
> payment-platform-frontend@1.0.0 lint
> eslint . --format json

[{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/analyze-viewport.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/commitlint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/complete-flow-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/debug-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/final-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/scripts/check-coverage.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":135,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Coverage threshold enforcement script\n * Ensures that code coverage meets the required 85% threshold\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\nconst REQUIRED_COVERAGE = 85\nconst COVERAGE_FILE = path.join(__dirname, '../coverage/coverage-summary.json')\n\nfunction checkCoverage() {\n  try {\n    if (!fs.existsSync(COVERAGE_FILE)) {\n      console.error('❌ Coverage summary file not found. Run tests with coverage first.')\n      process.exit(1)\n    }\n\n    const coverageData = JSON.parse(fs.readFileSync(COVERAGE_FILE, 'utf8'))\n    const totalCoverage = coverageData.total\n\n    console.log('\\n📊 Coverage Summary:')\n    console.log('===================')\n\n    const metrics = ['lines', 'functions', 'branches', 'statements']\n    const results = {}\n    let allPassed = true\n\n    metrics.forEach(metric => {\n      const percentage = totalCoverage[metric].pct\n      const passed = percentage >= REQUIRED_COVERAGE\n      results[metric] = { percentage, passed }\n\n      const status = passed ? '✅' : '❌'\n      const color = passed ? '\\x1b[32m' : '\\x1b[31m'\n      const reset = '\\x1b[0m'\n\n      console.log(`${status} ${metric.padEnd(12)}: ${color}${percentage.toFixed(2)}%${reset} (required: ${REQUIRED_COVERAGE}%)`)\n\n      if (!passed) {\n        allPassed = false\n      }\n    })\n\n    console.log('\\n📋 Detailed Results:')\n    console.log('===================')\n    console.log(`Total files: ${Object.keys(coverageData).length - 1}`) // -1 for 'total' key\n\n    if (allPassed) {\n      console.log('\\n🎉 SUCCESS: All coverage thresholds met!')\n      console.log(`✨ Code coverage exceeds the required ${REQUIRED_COVERAGE}% threshold.`)\n      process.exit(0)\n    } else {\n      console.log('\\n💥 FAILURE: Coverage thresholds not met!')\n      console.log(`❗ Please add more tests to reach the required ${REQUIRED_COVERAGE}% threshold.`)\n\n      // Show which files need more coverage\n      console.log('\\n📁 Files needing attention:')\n      Object.entries(coverageData).forEach(([file, data]) => {\n        if (file === 'total') return\n\n        const fileCoverage = data.lines.pct\n        if (fileCoverage < REQUIRED_COVERAGE) {\n          console.log(`   📄 ${file}: ${fileCoverage.toFixed(2)}% lines coverage`)\n        }\n      })\n\n      process.exit(1)\n    }\n  } catch (error) {\n    console.error('❌ Error reading coverage data:', error.message)\n    process.exit(1)\n  }\n}\n\n// Additional helper function to show coverage trends\nfunction showCoverageTrends() {\n  const historyFile = path.join(__dirname, '../coverage/coverage-history.json')\n\n  if (fs.existsSync(historyFile)) {\n    try {\n      const history = JSON.parse(fs.readFileSync(historyFile, 'utf8'))\n      const latest = history[history.length - 1]\n      const previous = history[history.length - 2]\n\n      if (previous) {\n        console.log('\\n📈 Coverage Trends:')\n        console.log('==================')\n\n        const trend = latest.lines - previous.lines\n        const trendSymbol = trend > 0 ? '📈' : trend < 0 ? '📉' : '➡️'\n        const trendColor = trend > 0 ? '\\x1b[32m' : trend < 0 ? '\\x1b[31m' : '\\x1b[33m'\n\n        console.log(`${trendSymbol} Lines: ${trendColor}${trend > 0 ? '+' : ''}${trend.toFixed(2)}%\\x1b[0m since last run`)\n      }\n    } catch {\n      // Ignore history errors\n    }\n  }\n}\n\n// Save current coverage for trend analysis\nfunction saveCoverageHistory() {\n  try {\n    const coverageData = JSON.parse(fs.readFileSync(COVERAGE_FILE, 'utf8'))\n    const historyFile = path.join(__dirname, '../coverage/coverage-history.json')\n\n    let history = []\n    if (fs.existsSync(historyFile)) {\n      history = JSON.parse(fs.readFileSync(historyFile, 'utf8'))\n    }\n\n    const currentEntry = {\n      timestamp: new Date().toISOString(),\n      lines: coverageData.total.lines.pct,\n      functions: coverageData.total.functions.pct,\n      branches: coverageData.total.branches.pct,\n      statements: coverageData.total.statements.pct,\n    }\n\n    history.push(currentEntry)\n\n    // Keep only last 10 entries\n    if (history.length > 10) {\n      history = history.slice(-10)\n    }\n\n    fs.writeFileSync(historyFile, JSON.stringify(history, null, 2))\n  } catch (error) {\n    // Ignore history save errors\n  }\n}\n\n// Main execution\nconsole.log('🔍 Checking code coverage thresholds...')\nsaveCoverageHistory()\nshowCoverageTrends()\ncheckCoverage()\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/scripts/test-coverage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/App.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react'\nimport { describe, it, expect, vi } from 'vitest'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './App'\n\nimport type { RootState } from '@/store'\nimport type { SessionInfo } from '@/types/api'\nimport { createMockStore, type PartialTestState } from '@/test/utils/mockStore'\nimport { createMockUser } from '@/test/fixtures/users'\n\n// Mock react-hot-toast\nvi.mock('react-hot-toast', () => ({\n  Toaster: () => <div data-testid=\"toaster\">Toaster</div>,\n}))\n\n// Mock all page components\nvi.mock('./pages/auth/LoginPage', () => ({\n  default: () => <div data-testid=\"login-page\">Login Page</div>,\n}))\n\nvi.mock('./pages/auth/CallbackPage', () => ({\n  default: () => <div data-testid=\"callback-page\">Callback Page</div>,\n}))\n\nvi.mock('./pages/dashboard/DashboardPage', () => ({\n  default: () => <div data-testid=\"dashboard-page\">Dashboard Page</div>,\n}))\n\nvi.mock('./pages/organizations/OrganizationsPage', () => ({\n  default: () => <div data-testid=\"organizations-page\">Organizations Page</div>,\n}))\n\nvi.mock('./pages/organizations/OrganizationPage', () => ({\n  default: () => <div data-testid=\"organization-page\">Organization Page</div>,\n}))\n\nvi.mock('./pages/payments/PaymentsPage', () => ({\n  default: () => <div data-testid=\"payments-page\">Payments Page</div>,\n}))\n\nvi.mock('./pages/subscription/SubscriptionPage', () => ({\n  default: () => <div data-testid=\"subscription-page\">Subscription Page</div>,\n}))\n\nvi.mock('./pages/settings/SettingsPage', () => ({\n  default: () => <div data-testid=\"settings-page\">Settings Page</div>,\n}))\n\n// Mock layout components\nvi.mock('./components/layouts/AuthLayout', () => ({\n  default: () => <div data-testid=\"auth-layout\">Auth Layout</div>,\n}))\n\nvi.mock('./components/layouts/DashboardLayout', () => ({\n  default: () => <div data-testid=\"dashboard-layout\">Dashboard Layout</div>,\n}))\n\n// Mock LoadingSpinner\nvi.mock('./components/ui/LoadingSpinner', () => ({\n  default: ({ size }: { size?: string }) => (\n    <div data-testid=\"loading-spinner\" data-size={size}>Loading...</div>\n  ),\n}))\n\n// Mock ErrorBoundary\nvi.mock('./components/ui/ErrorBoundary', () => ({\n  default: ({ children }: { children: React.ReactNode }) => (\n    <div data-testid=\"error-boundary\">{children}</div>\n  ),\n}))\n\n// Mock API hooks\ninterface QueryResult<T> {\n  data?: T\n  error?: unknown\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nconst mockUseGetSessionQuery = vi.fn<[], QueryResult<SessionInfo>>()\nvi.mock('./store/api/authApi', () => ({\n  useGetSessionQuery: mockUseGetSessionQuery,\n}))\n\n// Mock auth slice selectors\nvi.mock('./store/slices/authSlice', async () => {\n  const actual = await vi.importActual('./store/slices/authSlice')\n  return {\n    ...actual,\n    selectIsAuthenticated: (state: RootState) => state.auth.isAuthenticated,\n    selectAuthLoading: (state: RootState) => state.auth.isLoading,\n  }\n})\n\nconst renderWithProviders = (\n  component: React.ReactElement,\n  initialState: PartialTestState = {}\n) => {\n  const store = createMockStore(initialState)\n  return render(\n    <Provider store={store}>\n      <BrowserRouter>{component}</BrowserRouter>\n    </Provider>\n  )\n}\n\ndescribe('App', () => {\n  beforeEach(() => {\n    vi.clearAllMocks()\n    mockUseGetSessionQuery.mockReturnValue({\n      data: null,\n      isLoading: false,\n      error: null,\n    })\n  })\n\n  describe('App structure', () => {\n    it('should render ErrorBoundary wrapper', () => {\n      renderWithProviders(<App />)\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n    })\n\n    it('should render Toaster component', () => {\n      renderWithProviders(<App />)\n      expect(screen.getByTestId('toaster')).toBeInTheDocument()\n    })\n\n    it('should have correct CSS class on root div', () => {\n      renderWithProviders(<App />)\n      const appDiv = screen.getByTestId('error-boundary').querySelector('.App')\n      expect(appDiv).toBeInTheDocument()\n    })\n  })\n\n  describe('authentication flow', () => {\n    it('should show loading spinner when auth is loading', () => {\n      renderWithProviders(<App />, {\n        auth: { isLoading: true }\n      })\n\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n      expect(screen.getByTestId('loading-spinner')).toHaveAttribute('data-size', 'lg')\n    })\n\n    it('should redirect to login when not authenticated', () => {\n      renderWithProviders(<App />, {\n        auth: { isAuthenticated: false }\n      })\n\n      // Should redirect to login, but with our mocked components we won't see the actual redirect\n      // The important thing is that it doesn't show dashboard content\n      expect(screen.queryByTestId('dashboard-page')).not.toBeInTheDocument()\n    })\n\n    it('should restore session from API when session data is available', async () => {\n      const mockSessionData = {\n        user: createMockUser({\n          id: '123',\n          name: 'Test User',\n        }),\n      }\n\n      mockUseGetSessionQuery.mockReturnValue({\n        data: mockSessionData,\n        isLoading: false,\n        error: null,\n      })\n\n      renderWithProviders(<App />, {\n        auth: { isAuthenticated: false }\n      })\n\n      // The useEffect should trigger and update the auth state\n      // We can't directly test the dispatch call, but we can verify the component renders\n      await waitFor(() => {\n        expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n      })\n    })\n\n    it('should skip session query when already authenticated', () => {\n      renderWithProviders(<App />, {\n        auth: { isAuthenticated: true }\n      })\n\n      // The useGetSessionQuery should be called with skip: true\n      // We can't directly assert this with the current mock setup,\n      // but the component should render without issues\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n    })\n  })\n\n  describe('routing', () => {\n    it('should handle unauthenticated user routing', () => {\n      // Test that routing works for unauthenticated users\n      renderWithProviders(<App />, {\n        auth: { isAuthenticated: false }\n      })\n\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n      // Component should render without crashing\n    })\n\n    it('should handle authenticated user routing', () => {\n      // Test that routing works for authenticated users\n      renderWithProviders(<App />, {\n        auth: { isAuthenticated: true }\n      })\n\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n      // Component should render without crashing\n    })\n  })\n\n  describe('error handling', () => {\n    it('should handle API errors gracefully', () => {\n      mockUseGetSessionQuery.mockReturnValue({\n        data: null,\n        isLoading: false,\n        error: { status: 500, message: 'Server error' },\n      })\n\n      renderWithProviders(<App />)\n\n      // Should still render without crashing\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n      expect(screen.getByTestId('toaster')).toBeInTheDocument()\n    })\n\n    it('should handle session loading state', () => {\n      mockUseGetSessionQuery.mockReturnValue({\n        data: null,\n        isLoading: true,\n        error: null,\n      })\n\n      renderWithProviders(<App />)\n\n      // Should still render the app structure\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n    })\n  })\n\n  describe('Toaster configuration', () => {\n    it('should render Toaster with correct position', () => {\n      renderWithProviders(<App />)\n      const toaster = screen.getByTestId('toaster')\n      expect(toaster).toBeInTheDocument()\n\n      // The Toaster component is mocked, so we can't test actual props,\n      // but we can verify it's rendered\n    })\n\n    it('should maintain consistent styling across renders', () => {\n      const { rerender } = renderWithProviders(<App />)\n      expect(screen.getByTestId('toaster')).toBeInTheDocument()\n\n      // Re-render with different state\n      rerender(\n        <Provider store={createMockStore({ auth: { isAuthenticated: true } })}>\n          <BrowserRouter>\n            <App />\n          </BrowserRouter>\n        </Provider>\n      )\n\n      expect(screen.getByTestId('toaster')).toBeInTheDocument()\n    })\n  })\n\n  describe('component lifecycle', () => {\n    it('should handle component mounting and unmounting', () => {\n      const { unmount } = renderWithProviders(<App />)\n\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n\n      // Should not throw when unmounting\n      expect(() => unmount()).not.toThrow()\n    })\n\n    it('should handle re-renders with state changes', () => {\n      const { rerender } = renderWithProviders(<App />, {\n        auth: { isAuthenticated: false }\n      })\n\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n\n      // Re-render with authenticated state\n      rerender(\n        <Provider store={createMockStore({ auth: { isAuthenticated: true } })}>\n          <BrowserRouter>\n            <App />\n          </BrowserRouter>\n        </Provider>\n      )\n\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n    })\n  })\n\n  describe('accessibility', () => {\n    it('should maintain semantic structure', () => {\n      renderWithProviders(<App />)\n\n      const appContainer = screen.getByTestId('error-boundary')\n      expect(appContainer).toBeInTheDocument()\n\n      // Should have proper HTML structure\n      expect(appContainer.querySelector('.App')).toBeInTheDocument()\n    })\n\n    it('should support keyboard navigation', () => {\n      renderWithProviders(<App />)\n\n      // Basic structure should be present for navigation\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument()\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/analytics/AnalyticsDashboard.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":60,"fix":{"range":[463,463],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":13,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useGetMetricDataQuery' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metric' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dashboard' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Insight' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MetricData' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnalyticsQueryRequest' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createMetricId' is defined but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":24},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":37,"column":1,"nodeType":"ImportDeclaration","endLine":53,"endColumn":18},{"ruleId":"import/order","severity":2,"message":"`recharts` import should occur before import of `@/store/api/analyticsApi`","line":37,"column":1,"nodeType":"ImportDeclaration","endLine":53,"endColumn":18,"fix":{"range":[464,1293],"text":"import {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts'\nimport {\n  useListMetricsQuery,\n  useListDashboardsQuery,\n  useGetInsightsQuery,\n  useGetAnalyticsHealthQuery,\n  useGetMetricDataQuery,\n  useExecuteAnalyticsQueryMutation,\n  useAcknowledgeInsightMutation,\n} from '@/store/api/analyticsApi'\nimport { useTenant } from '@/components/tenants/TenantProvider'\nimport type {\n  Metric,\n  Dashboard,\n  Insight,\n  MetricData,\n  AnalyticsQueryRequest,\n  TimePeriod,\n  TimeGranularity,\n} from '@/types/analytics'\nimport { createMetricId } from '@/types/analytics'\n\n// Chart library (would be imported from a charting library like Chart.js, D3, or Recharts)\n// For now, using placeholder components\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":7},{"ruleId":"import/order","severity":2,"message":"`@heroicons/react/24/outline` import should occur before import of `@/store/api/analyticsApi`","line":56,"column":1,"nodeType":"ImportDeclaration","endLine":74,"endColumn":37,"fix":{"range":[464,1664],"text":"import {\n  ChartBarIcon,\n  ChartPieIcon,\n  CursorArrowRaysIcon,\n  EyeIcon,\n  Cog6ToothIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  InformationCircleIcon,\n  ClockIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  LightBulbIcon,\n  BellIcon,\n  FunnelIcon,\n  CalendarIcon,\n  PlusIcon,\n  AdjustmentsHorizontalIcon,\n} from '@heroicons/react/24/outline'\nimport {\n  useListMetricsQuery,\n  useListDashboardsQuery,\n  useGetInsightsQuery,\n  useGetAnalyticsHealthQuery,\n  useGetMetricDataQuery,\n  useExecuteAnalyticsQueryMutation,\n  useAcknowledgeInsightMutation,\n} from '@/store/api/analyticsApi'\nimport { useTenant } from '@/components/tenants/TenantProvider'\nimport type {\n  Metric,\n  Dashboard,\n  Insight,\n  MetricData,\n  AnalyticsQueryRequest,\n  TimePeriod,\n  TimeGranularity,\n} from '@/types/analytics'\nimport { createMetricId } from '@/types/analytics'\n\n// Chart library (would be imported from a charting library like Chart.js, D3, or Recharts)\n// For now, using placeholder components\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts'\n\n// Icons\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cog6ToothIcon' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FunnelIcon' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tenantContext' is assigned a value but never used.","line":83,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customTimeRange' is assigned a value but never used.","line":88,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCustomTimeRange' is assigned a value but never used.","line":88,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoadingHealth' is assigned a value but never used.","line":124,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'executeQuery' is assigned a value but never used.","line":127,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'metrics' logical expression could make the dependencies of useMemo Hook (at line 136) change on every render. To fix this, wrap the initialization of 'metrics' in its own useMemo() Hook.","line":130,"column":9,"nodeType":"VariableDeclarator","endLine":130,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":130,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":130,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3185,3187],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3243,3245],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'keyMetricIds' is assigned a value but never used.","line":134,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timeRange' is assigned a value but never used.","line":139,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<\"metrics\" | \"insights\" | \"dashboards\" | \"overview\" | \"health\">`.","line":380,"column":43,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":380,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11931,11934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11931,11934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":551,"column":37,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":551,"endColumn":81},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":587,"column":21,"nodeType":"JSXOpeningElement","endLine":597,"endColumn":22},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":587,"column":21,"nodeType":"JSXOpeningElement","endLine":597,"endColumn":22},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":741,"column":37,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":741,"endColumn":81}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * Advanced Analytics Dashboard\n *\n * Comprehensive analytics platform interface supporting:\n * - Real-time metrics monitoring and visualization\n * - Custom dashboard creation and management\n * - Machine learning insights and predictions\n * - Interactive data exploration and filtering\n * - Cross-tenant analytics and reporting capabilities\n * - Performance monitoring and business intelligence\n */\n\nimport React, { useState, useMemo, useEffect } from 'react'\nimport {\n  useListMetricsQuery,\n  useListDashboardsQuery,\n  useGetInsightsQuery,\n  useGetAnalyticsHealthQuery,\n  useGetMetricDataQuery,\n  useExecuteAnalyticsQueryMutation,\n  useAcknowledgeInsightMutation,\n} from '@/store/api/analyticsApi'\nimport { useTenant } from '@/components/tenants/TenantProvider'\nimport type {\n  Metric,\n  Dashboard,\n  Insight,\n  MetricData,\n  AnalyticsQueryRequest,\n  TimePeriod,\n  TimeGranularity,\n} from '@/types/analytics'\nimport { createMetricId } from '@/types/analytics'\n\n// Chart library (would be imported from a charting library like Chart.js, D3, or Recharts)\n// For now, using placeholder components\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts'\n\n// Icons\nimport {\n  ChartBarIcon,\n  ChartPieIcon,\n  CursorArrowRaysIcon,\n  EyeIcon,\n  Cog6ToothIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  InformationCircleIcon,\n  ClockIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  LightBulbIcon,\n  BellIcon,\n  FunnelIcon,\n  CalendarIcon,\n  PlusIcon,\n  AdjustmentsHorizontalIcon,\n} from '@heroicons/react/24/outline'\n\ninterface AnalyticsDashboardProps {\n  className?: string\n}\n\nconst AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({\n  className = '',\n}) => {\n  const { tenantContext } = useTenant()\n  const [selectedTimePeriod, setSelectedTimePeriod] = useState<TimePeriod>('day')\n  const [selectedGranularity, setSelectedGranularity] = useState<TimeGranularity>('hour')\n  const [activeTab, setActiveTab] = useState<'overview' | 'metrics' | 'dashboards' | 'insights' | 'health'>('overview')\n  const [selectedMetrics, setSelectedMetrics] = useState<string[]>([])\n  const [customTimeRange, setCustomTimeRange] = useState({\n    start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    end: new Date().toISOString(),\n  })\n\n  // API hooks\n  const {\n    data: metricsResponse,\n    isLoading: isLoadingMetrics,\n  } = useListMetricsQuery({\n    page: 1,\n    pageSize: 50,\n    sortBy: 'name',\n    sortOrder: 'asc',\n  })\n\n  const {\n    data: dashboardsResponse,\n    isLoading: isLoadingDashboards,\n  } = useListDashboardsQuery({\n    page: 1,\n    pageSize: 20,\n    sortBy: 'lastViewedAt',\n    sortOrder: 'desc',\n  })\n\n  const {\n    data: insights,\n    isLoading: isLoadingInsights,\n  } = useGetInsightsQuery({\n    acknowledged: false,\n    limit: 10,\n  })\n\n  const {\n    data: analyticsHealth,\n    isLoading: isLoadingHealth,\n  } = useGetAnalyticsHealthQuery()\n\n  const [executeQuery] = useExecuteAnalyticsQueryMutation()\n  const [acknowledgeInsight] = useAcknowledgeInsightMutation()\n\n  const metrics = metricsResponse?.metrics || []\n  const dashboards = dashboardsResponse?.dashboards || []\n\n  // Sample metric data queries for key metrics\n  const keyMetricIds = useMemo(() => {\n    return metrics.slice(0, 6).map(m => m.id)\n  }, [metrics])\n\n  // Calculate time range based on selected period\n  const timeRange = useMemo(() => {\n    const end = new Date()\n    const start = new Date()\n\n    switch (selectedTimePeriod) {\n      case 'hour':\n        start.setHours(start.getHours() - 1)\n        break\n      case 'day':\n        start.setDate(start.getDate() - 1)\n        break\n      case 'week':\n        start.setDate(start.getDate() - 7)\n        break\n      case 'month':\n        start.setMonth(start.getMonth() - 1)\n        break\n      case 'quarter':\n        start.setMonth(start.getMonth() - 3)\n        break\n      case 'year':\n        start.setFullYear(start.getFullYear() - 1)\n        break\n    }\n\n    return {\n      start: start.toISOString(),\n      end: end.toISOString(),\n      granularity: selectedGranularity,\n    }\n  }, [selectedTimePeriod, selectedGranularity])\n\n  // Key metrics overview\n  const keyMetrics = useMemo(() => [\n    {\n      id: 'active_users',\n      name: 'Active Users',\n      value: '2,847',\n      change: '+12.5%',\n      trend: 'up',\n      icon: <CursorArrowRaysIcon className=\"h-6 w-6\" />,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n    },\n    {\n      id: 'revenue',\n      name: 'Revenue',\n      value: '$45,231',\n      change: '+8.2%',\n      trend: 'up',\n      icon: <ChartBarIcon className=\"h-6 w-6\" />,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n    },\n    {\n      id: 'conversion_rate',\n      name: 'Conversion Rate',\n      value: '3.24%',\n      change: '-2.1%',\n      trend: 'down',\n      icon: <ChartPieIcon className=\"h-6 w-6\" />,\n      color: 'text-yellow-600',\n      bgColor: 'bg-yellow-50',\n    },\n    {\n      id: 'avg_session_duration',\n      name: 'Avg Session Duration',\n      value: '4m 32s',\n      change: '+5.7%',\n      trend: 'up',\n      icon: <ClockIcon className=\"h-6 w-6\" />,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n    },\n  ], [])\n\n  // Sample chart data (would be fetched from API)\n  const chartData = useMemo(() => {\n    const data = []\n    const now = new Date()\n    for (let i = 23; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 60 * 60 * 1000)\n      data.push({\n        time: time.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),\n        users: Math.floor(Math.random() * 1000) + 500,\n        revenue: Math.floor(Math.random() * 5000) + 2000,\n        sessions: Math.floor(Math.random() * 800) + 300,\n        conversions: Math.floor(Math.random() * 50) + 10,\n      })\n    }\n    return data\n  }, [])\n\n  const handleAcknowledgeInsight = async (insightId: string) => {\n    try {\n      await acknowledgeInsight({ insightId }).unwrap()\n    } catch (error) {\n      console.error('Failed to acknowledge insight:', error)\n    }\n  }\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'trend':\n        return <ArrowTrendingUpIcon className=\"h-5 w-5\" />\n      case 'anomaly':\n        return <ExclamationTriangleIcon className=\"h-5 w-5\" />\n      case 'prediction':\n        return <LightBulbIcon className=\"h-5 w-5\" />\n      case 'recommendation':\n        return <InformationCircleIcon className=\"h-5 w-5\" />\n      default:\n        return <BellIcon className=\"h-5 w-5\" />\n    }\n  }\n\n  const getInsightColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'border-red-200 bg-red-50 text-red-800'\n      case 'high':\n        return 'border-orange-200 bg-orange-50 text-orange-800'\n      case 'medium':\n        return 'border-yellow-200 bg-yellow-50 text-yellow-800'\n      case 'low':\n        return 'border-blue-200 bg-blue-50 text-blue-800'\n      default:\n        return 'border-gray-200 bg-gray-50 text-gray-800'\n    }\n  }\n\n  const tabs = [\n    { key: 'overview', label: 'Overview', icon: ChartBarIcon },\n    { key: 'metrics', label: 'Metrics', icon: ChartPieIcon },\n    { key: 'dashboards', label: 'Dashboards', icon: EyeIcon },\n    { key: 'insights', label: 'Insights', icon: LightBulbIcon },\n    { key: 'health', label: 'Health', icon: CheckCircleIcon },\n  ]\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Analytics Dashboard</h1>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Monitor your key metrics, insights, and performance indicators in real-time.\n          </p>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          {/* Time Period Selector */}\n          <div className=\"flex items-center space-x-2\">\n            <CalendarIcon className=\"h-5 w-5 text-gray-400\" />\n            <select\n              value={selectedTimePeriod}\n              onChange={(e) => setSelectedTimePeriod(e.target.value as TimePeriod)}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            >\n              <option value=\"hour\">Last Hour</option>\n              <option value=\"day\">Last 24 Hours</option>\n              <option value=\"week\">Last Week</option>\n              <option value=\"month\">Last Month</option>\n              <option value=\"quarter\">Last Quarter</option>\n              <option value=\"year\">Last Year</option>\n            </select>\n          </div>\n\n          {/* Granularity Selector */}\n          <div className=\"flex items-center space-x-2\">\n            <AdjustmentsHorizontalIcon className=\"h-5 w-5 text-gray-400\" />\n            <select\n              value={selectedGranularity}\n              onChange={(e) => setSelectedGranularity(e.target.value as TimeGranularity)}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            >\n              <option value=\"minute\">Minute</option>\n              <option value=\"hour\">Hour</option>\n              <option value=\"day\">Day</option>\n              <option value=\"week\">Week</option>\n              <option value=\"month\">Month</option>\n            </select>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            <PlusIcon className=\"h-4 w-4 mr-2\" />\n            Create Dashboard\n          </button>\n        </div>\n      </div>\n\n      {/* Health Status Bar */}\n      {analyticsHealth && (\n        <div className={`rounded-lg p-4 ${\n          analyticsHealth.status === 'healthy' ? 'bg-green-50 border border-green-200' :\n          analyticsHealth.status === 'degraded' ? 'bg-yellow-50 border border-yellow-200' :\n          'bg-red-50 border border-red-200'\n        }`}>\n          <div className=\"flex items-center\">\n            <div className={`flex-shrink-0 ${\n              analyticsHealth.status === 'healthy' ? 'text-green-400' :\n              analyticsHealth.status === 'degraded' ? 'text-yellow-400' :\n              'text-red-400'\n            }`}>\n              <CheckCircleIcon className=\"h-5 w-5\" />\n            </div>\n            <div className=\"ml-3\">\n              <h3 className={`text-sm font-medium ${\n                analyticsHealth.status === 'healthy' ? 'text-green-800' :\n                analyticsHealth.status === 'degraded' ? 'text-yellow-800' :\n                'text-red-800'\n              }`}>\n                Analytics System {analyticsHealth.status === 'healthy' ? 'Operational' :\n                analyticsHealth.status === 'degraded' ? 'Degraded' : 'Down'}\n              </h3>\n              <div className={`mt-1 text-sm ${\n                analyticsHealth.status === 'healthy' ? 'text-green-700' :\n                analyticsHealth.status === 'degraded' ? 'text-yellow-700' :\n                'text-red-700'\n              }`}>\n                <span>Components: </span>\n                {Object.entries(analyticsHealth.components).map(([name, component]) => (\n                  <span key={name} className=\"mr-2\">\n                    {name}: {component.status}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tabs Navigation */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.key}\n              onClick={() => setActiveTab(tab.key as any)}\n              className={`group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.key\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <tab.icon\n                className={`-ml-0.5 mr-2 h-5 w-5 ${\n                  activeTab === tab.key ? 'text-indigo-500' : 'text-gray-400 group-hover:text-gray-500'\n                }`}\n              />\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* Key Metrics Cards */}\n          <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n            {keyMetrics.map((metric) => (\n              <div key={metric.id} className=\"bg-white overflow-hidden shadow rounded-lg\">\n                <div className=\"p-5\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <div className={`inline-flex items-center justify-center p-3 ${metric.bgColor} rounded-md`}>\n                        <div className={metric.color}>\n                          {metric.icon}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"ml-5 w-0 flex-1\">\n                      <dl>\n                        <dt className=\"text-sm font-medium text-gray-500 truncate\">\n                          {metric.name}\n                        </dt>\n                        <dd className=\"flex items-baseline\">\n                          <div className=\"text-2xl font-semibold text-gray-900\">\n                            {metric.value}\n                          </div>\n                          <div className={`ml-2 flex items-baseline text-sm font-semibold ${\n                            metric.trend === 'up' ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {metric.trend === 'up' ? (\n                              <ArrowTrendingUpIcon className=\"self-center flex-shrink-0 h-4 w-4\" />\n                            ) : (\n                              <ArrowTrendingDownIcon className=\"self-center flex-shrink-0 h-4 w-4\" />\n                            )}\n                            <span className=\"ml-1\">{metric.change}</span>\n                          </div>\n                        </dd>\n                      </dl>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Charts Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Users Over Time */}\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Active Users</h3>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                    Live\n                  </span>\n                </div>\n              </div>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#3B82F6\"\n                      strokeWidth={2}\n                      dot={{ fill: '#3B82F6' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n\n            {/* Revenue Over Time */}\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Revenue</h3>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-500\">USD</span>\n                </div>\n              </div>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip formatter={(value) => [`$${value}`, 'Revenue']} />\n                    <Legend />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"revenue\"\n                      stroke=\"#10B981\"\n                      fill=\"#10B981\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n\n            {/* Sessions and Conversions */}\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Sessions & Conversions</h3>\n              </div>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"sessions\" fill=\"#8B5CF6\" />\n                    <Bar dataKey=\"conversions\" fill=\"#F59E0B\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n\n            {/* Top Insights */}\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Recent Insights</h3>\n                <button\n                  onClick={() => setActiveTab('insights')}\n                  className=\"text-sm text-indigo-600 hover:text-indigo-900\"\n                >\n                  View all\n                </button>\n              </div>\n              <div className=\"space-y-3\">\n                {insights?.slice(0, 5).map((insight) => (\n                  <div\n                    key={insight.id}\n                    className={`p-3 rounded-lg border ${getInsightColor(insight.severity)}`}\n                  >\n                    <div className=\"flex items-start\">\n                      <div className=\"flex-shrink-0\">\n                        {getInsightIcon(insight.type)}\n                      </div>\n                      <div className=\"ml-3 flex-1\">\n                        <h4 className=\"text-sm font-medium\">{insight.title}</h4>\n                        <p className=\"mt-1 text-sm opacity-90\">{insight.summary}</p>\n                        <div className=\"mt-2 flex items-center justify-between\">\n                          <span className=\"text-xs opacity-75\">\n                            Confidence: {Math.round(insight.confidence * 100)}%\n                          </span>\n                          <button\n                            onClick={() => handleAcknowledgeInsight(insight.id)}\n                            className=\"text-xs hover:underline\"\n                          >\n                            Acknowledge\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {(!insights || insights.length === 0) && (\n                  <div className=\"text-center py-4 text-gray-500\">\n                    <LightBulbIcon className=\"mx-auto h-8 w-8 mb-2\" />\n                    <p className=\"text-sm\">No insights available</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'metrics' && (\n        <div className=\"space-y-6\">\n          {/* Metrics Management Interface */}\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Available Metrics</h3>\n              {isLoadingMetrics ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto\"></div>\n                  <p className=\"mt-2 text-sm text-gray-500\">Loading metrics...</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {metrics.map((metric) => (\n                    <div\n                      key={metric.id}\n                      className=\"border border-gray-200 rounded-lg p-4 hover:border-indigo-300 cursor-pointer\"\n                      onClick={() => {\n                        if (selectedMetrics.includes(metric.id)) {\n                          setSelectedMetrics(selectedMetrics.filter(id => id !== metric.id))\n                        } else {\n                          setSelectedMetrics([...selectedMetrics, metric.id])\n                        }\n                      }}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"text-sm font-medium text-gray-900\">{metric.name}</h4>\n                          <p className=\"text-xs text-gray-500\">{metric.category}</p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            metric.type === 'counter' ? 'bg-blue-100 text-blue-800' :\n                            metric.type === 'gauge' ? 'bg-green-100 text-green-800' :\n                            metric.type === 'rate' ? 'bg-yellow-100 text-yellow-800' :\n                            'bg-gray-100 text-gray-800'\n                          }`}>\n                            {metric.type}\n                          </span>\n                          {selectedMetrics.includes(metric.id) && (\n                            <CheckCircleIcon className=\"h-5 w-5 text-indigo-600\" />\n                          )}\n                        </div>\n                      </div>\n                      <p className=\"mt-2 text-sm text-gray-600\">{metric.description}</p>\n                      <div className=\"mt-2 flex flex-wrap gap-1\">\n                        {metric.tags.map((tag) => (\n                          <span\n                            key={tag}\n                            className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'dashboards' && (\n        <div className=\"space-y-6\">\n          {/* Dashboard Management Interface */}\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">My Dashboards</h3>\n              {isLoadingDashboards ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto\"></div>\n                  <p className=\"mt-2 text-sm text-gray-500\">Loading dashboards...</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {dashboards.map((dashboard) => (\n                    <div\n                      key={dashboard.id}\n                      className=\"border border-gray-200 rounded-lg p-4 hover:border-indigo-300 cursor-pointer transition-colors\"\n                    >\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"text-lg font-medium text-gray-900\">{dashboard.name}</h4>\n                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                          dashboard.visibility === 'public' ? 'bg-green-100 text-green-800' :\n                          dashboard.visibility === 'private' ? 'bg-red-100 text-red-800' :\n                          'bg-blue-100 text-blue-800'\n                        }`}>\n                          {dashboard.visibility}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-3\">{dashboard.description}</p>\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span>{dashboard.widgets.length} widgets</span>\n                        <span>{dashboard.viewCount} views</span>\n                      </div>\n                      <div className=\"mt-3 flex flex-wrap gap-1\">\n                        {dashboard.tags.map((tag) => (\n                          <span\n                            key={tag}\n                            className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'insights' && (\n        <div className=\"space-y-6\">\n          {/* Insights Management Interface */}\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">AI-Powered Insights</h3>\n              {isLoadingInsights ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto\"></div>\n                  <p className=\"mt-2 text-sm text-gray-500\">Loading insights...</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {insights?.map((insight) => (\n                    <div\n                      key={insight.id}\n                      className={`p-4 rounded-lg border ${getInsightColor(insight.severity)}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start\">\n                          <div className=\"flex-shrink-0 mr-3\">\n                            {getInsightIcon(insight.type)}\n                          </div>\n                          <div className=\"flex-1\">\n                            <h4 className=\"text-sm font-medium\">{insight.title}</h4>\n                            <p className=\"mt-1 text-sm\">{insight.description}</p>\n                            <div className=\"mt-2 flex items-center space-x-4 text-xs opacity-75\">\n                              <span>Type: {insight.type}</span>\n                              <span>Confidence: {Math.round(insight.confidence * 100)}%</span>\n                              <span>Generated: {new Date(insight.generatedAt).toLocaleString()}</span>\n                            </div>\n                            {insight.recommendations && insight.recommendations.length > 0 && (\n                              <div className=\"mt-3\">\n                                <h5 className=\"text-xs font-medium mb-2\">Recommendations:</h5>\n                                <ul className=\"space-y-1\">\n                                  {insight.recommendations.map((rec, index) => (\n                                    <li key={index} className=\"text-xs flex items-center\">\n                                      <span className={`inline-block w-2 h-2 rounded-full mr-2 ${\n                                        rec.impact === 'high' ? 'bg-red-400' :\n                                        rec.impact === 'medium' ? 'bg-yellow-400' :\n                                        'bg-green-400'\n                                      }`}></span>\n                                      {rec.action}\n                                    </li>\n                                  ))}\n                                </ul>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <button\n                            onClick={() => handleAcknowledgeInsight(insight.id)}\n                            className=\"text-xs px-3 py-1 rounded bg-white bg-opacity-50 hover:bg-opacity-75 transition-colors\"\n                          >\n                            Acknowledge\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  {(!insights || insights.length === 0) && (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <LightBulbIcon className=\"mx-auto h-12 w-12 mb-4\" />\n                      <h3 className=\"text-lg font-medium mb-2\">No insights available</h3>\n                      <p className=\"text-sm\">\n                        Insights will appear here as our AI analyzes your data patterns.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'health' && (\n        <div className=\"space-y-6\">\n          {/* System Health Interface */}\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">System Health</h3>\n              {analyticsHealth && (\n                <div className=\"space-y-4\">\n                  <div className={`p-4 rounded-lg ${\n                    analyticsHealth.status === 'healthy' ? 'bg-green-50 border border-green-200' :\n                    analyticsHealth.status === 'degraded' ? 'bg-yellow-50 border border-yellow-200' :\n                    'bg-red-50 border border-red-200'\n                  }`}>\n                    <div className=\"flex items-center\">\n                      <CheckCircleIcon className={`h-6 w-6 ${\n                        analyticsHealth.status === 'healthy' ? 'text-green-500' :\n                        analyticsHealth.status === 'degraded' ? 'text-yellow-500' :\n                        'text-red-500'\n                      }`} />\n                      <h4 className={`ml-2 text-lg font-medium ${\n                        analyticsHealth.status === 'healthy' ? 'text-green-800' :\n                        analyticsHealth.status === 'degraded' ? 'text-yellow-800' :\n                        'text-red-800'\n                      }`}>\n                        Overall Status: {analyticsHealth.status.charAt(0).toUpperCase() + analyticsHealth.status.slice(1)}\n                      </h4>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {Object.entries(analyticsHealth.components).map(([name, component]) => (\n                      <div\n                        key={name}\n                        className={`p-4 rounded-lg border ${\n                          component.status === 'healthy' ? 'border-green-200 bg-green-50' :\n                          component.status === 'degraded' ? 'border-yellow-200 bg-yellow-50' :\n                          'border-red-200 bg-red-50'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <h5 className=\"font-medium text-gray-900\">{name}</h5>\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            component.status === 'healthy' ? 'bg-green-100 text-green-800' :\n                            component.status === 'degraded' ? 'bg-yellow-100 text-yellow-800' :\n                            'bg-red-100 text-red-800'\n                          }`}>\n                            {component.status}\n                          </span>\n                        </div>\n                        <p className=\"mt-1 text-sm text-gray-600\">\n                          Last checked: {new Date(component.lastCheck).toLocaleString()}\n                        </p>\n                        {component.details && (\n                          <p className=\"mt-1 text-xs text-gray-500\">{component.details}</p>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default AnalyticsDashboard","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/analytics/DashboardBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":36},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":24,"fix":{"range":[599,599],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'z' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useGetMetricDataQuery' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metric' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":9},{"ruleId":"import/order","severity":2,"message":"`@heroicons/react/24/outline` import should occur before import of `@/store/api/analyticsApi`","line":34,"column":1,"nodeType":"ImportDeclaration","endLine":51,"endColumn":37,"fix":{"range":[600,1247],"text":"import {\n  PlusIcon,\n  TrashIcon,\n  CogIcon,\n  EyeIcon,\n  DocumentDuplicateIcon,\n  ShareIcon,\n  SaveIcon,\n  XMarkIcon,\n  ArrowsPointingOutIcon,\n  Squares2X2Icon,\n  ChartBarIcon,\n  ChartPieIcon,\n  TableCellsIcon,\n  DocumentTextIcon,\n  PhotoIcon,\n  GlobeAltIcon,\n} from '@heroicons/react/24/outline'\nimport {\n  useCreateDashboardMutation,\n  useUpdateDashboardMutation,\n  useListMetricsQuery,\n  useGetMetricDataQuery,\n} from '@/store/api/analyticsApi'\nimport type {\n  Dashboard,\n  DashboardWidget,\n  Metric,\n  ChartType,\n  DataSource,\n  CreateDashboardRequest,\n} from '@/types/analytics'\nimport { DashboardSchema } from '@/types/analytics'\n\n// Icons\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CogIcon' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShareIcon' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":12},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":84,"column":19,"nodeType":"TSMappedType","messageId":"preferRecord","endLine":84,"endColumn":73,"fix":{"range":[2147,2201],"text":"Record<ChartType, { name: string; icon: string }>"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":105,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":105,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2861,2863],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'draggedWidget' is assigned a value but never used.","line":123,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setDraggedWidget' is assigned a value but never used.","line":123,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3939,3941],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":142,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":142,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4102,4104],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":143,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":143,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4163,4165],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":144,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":144,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4205,4207],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":145,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":145,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4246,4248],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4292,4294],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":147,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":147,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4347,4349],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":160,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":160,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4813,4815],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":172,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":172,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5057,5059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `SetStateAction<string | null>`.","line":175,"column":23,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":175,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":175,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":182,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":182,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5328,5330],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":183,"column":9,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":183,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":191,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":191,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5575,5577],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":214,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":214,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6319,6321],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'moveWidget' is assigned a value but never used.","line":219,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":234,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":234,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6928,6931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6928,6931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7349,7351],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":279,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":279,"endColumn":37},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":304,"column":15,"nodeType":"JSXOpeningElement","endLine":304,"endColumn":79},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":321,"column":15,"nodeType":"JSXOpeningElement","endLine":321,"endColumn":79},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":338,"column":15,"nodeType":"JSXOpeningElement","endLine":338,"endColumn":79},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":360,"column":15,"nodeType":"JSXOpeningElement","endLine":360,"endColumn":79},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":391,"column":15,"nodeType":"JSXOpeningElement","endLine":391,"endColumn":61},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":434,"column":19,"nodeType":"JSXOpeningElement","endLine":434,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":447,"column":21,"nodeType":"JSXOpeningElement","endLine":447,"endColumn":85},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":451,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":451,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15619,15621],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":468,"column":21,"nodeType":"JSXOpeningElement","endLine":468,"endColumn":85},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":472,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":472,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16653,16655],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":477,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":477,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":477,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16895,16898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16895,16898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":527,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":527,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18969,18971],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":548,"column":15,"nodeType":"JSXOpeningElement","endLine":569,"endColumn":16},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":548,"column":15,"nodeType":"JSXOpeningElement","endLine":569,"endColumn":16},{"ruleId":"@typescript-eslint/non-nullable-type-assertion-style","severity":2,"message":"Use a ! assertion to more succinctly remove null and undefined from the type.","line":621,"column":37,"nodeType":"TSAsExpression","messageId":"preferNonNullAssertion","endLine":621,"endColumn":74,"fix":{"range":[23021,23058],"text":"widget.config?.chartType!"}}],"suppressedMessages":[],"errorCount":48,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"/**\n * Advanced Dashboard Builder\n *\n * Interactive dashboard creation and management interface supporting:\n * - Drag-and-drop widget placement and sizing\n * - Real-time data visualization configuration\n * - Custom chart types and styling options\n * - Advanced filtering and data source management\n * - Template-based dashboard creation\n * - Collaborative dashboard sharing and permissions\n */\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport {\n  useCreateDashboardMutation,\n  useUpdateDashboardMutation,\n  useListMetricsQuery,\n  useGetMetricDataQuery,\n} from '@/store/api/analyticsApi'\nimport type {\n  Dashboard,\n  DashboardWidget,\n  Metric,\n  ChartType,\n  DataSource,\n  CreateDashboardRequest,\n} from '@/types/analytics'\nimport { DashboardSchema } from '@/types/analytics'\n\n// Icons\nimport {\n  PlusIcon,\n  TrashIcon,\n  CogIcon,\n  EyeIcon,\n  DocumentDuplicateIcon,\n  ShareIcon,\n  SaveIcon,\n  XMarkIcon,\n  ArrowsPointingOutIcon,\n  Squares2X2Icon,\n  ChartBarIcon,\n  ChartPieIcon,\n  TableCellsIcon,\n  DocumentTextIcon,\n  PhotoIcon,\n  GlobeAltIcon,\n} from '@heroicons/react/24/outline'\n\n// React DnD for drag and drop (simplified interface)\ninterface DragItem {\n  type: string\n  id: string\n  widget?: DashboardWidget\n}\n\ninterface Position {\n  x: number\n  y: number\n  width: number\n  height: number\n}\n\ninterface DashboardBuilderProps {\n  dashboardId?: string\n  initialDashboard?: Dashboard\n  onSave?: (dashboard: Dashboard) => void\n  onCancel?: () => void\n  className?: string\n}\n\nconst WidgetTypeConfig = {\n  metric: { name: 'Metric Card', icon: ChartBarIcon, minWidth: 2, minHeight: 2 },\n  chart: { name: 'Chart', icon: ChartPieIcon, minWidth: 4, minHeight: 3 },\n  table: { name: 'Table', icon: TableCellsIcon, minWidth: 4, minHeight: 3 },\n  text: { name: 'Text', icon: DocumentTextIcon, minWidth: 2, minHeight: 1 },\n  image: { name: 'Image', icon: PhotoIcon, minWidth: 2, minHeight: 2 },\n  iframe: { name: 'Embed', icon: GlobeAltIcon, minWidth: 4, minHeight: 3 },\n}\n\nconst ChartTypes: { [key in ChartType]: { name: string; icon: string } } = {\n  line: { name: 'Line Chart', icon: '📈' },\n  bar: { name: 'Bar Chart', icon: '📊' },\n  pie: { name: 'Pie Chart', icon: '🥧' },\n  donut: { name: 'Donut Chart', icon: '🍩' },\n  area: { name: 'Area Chart', icon: '📊' },\n  scatter: { name: 'Scatter Plot', icon: '•' },\n  heatmap: { name: 'Heatmap', icon: '🔥' },\n  table: { name: 'Data Table', icon: '📋' },\n}\n\nconst createDashboardSchema = DashboardSchema.omit({ id: true })\n\nconst DashboardBuilder: React.FC<DashboardBuilderProps> = ({\n  dashboardId,\n  initialDashboard,\n  onSave,\n  onCancel,\n  className = '',\n}) => {\n  const [dashboard, setDashboard] = useState<Partial<Dashboard>>(\n    initialDashboard || {\n      name: 'New Dashboard',\n      description: '',\n      category: 'General',\n      tags: [],\n      layout: { type: 'grid', columns: 12, gap: 4, responsive: true },\n      widgets: [],\n      visibility: 'private',\n      sharedWith: [],\n      permissions: { canView: [], canEdit: [], canShare: [], canDelete: [] },\n      filters: [],\n      variables: [],\n      autoRefresh: false,\n    }\n  )\n\n  const [selectedWidget, setSelectedWidget] = useState<string | null>(null)\n  const [showWidgetConfig, setShowWidgetConfig] = useState(false)\n  const [draggedWidget, setDraggedWidget] = useState<DragItem | null>(null)\n  const [gridSize] = useState({ width: 12, height: 20 })\n  const [previewMode, setPreviewMode] = useState(false)\n\n  const [createDashboard, { isLoading: isCreating }] = useCreateDashboardMutation()\n  const [updateDashboard, { isLoading: isUpdating }] = useUpdateDashboardMutation()\n\n  const { data: metricsResponse } = useListMetricsQuery({\n    page: 1,\n    pageSize: 100,\n    sortBy: 'name',\n    sortOrder: 'asc',\n  })\n\n  const metrics = metricsResponse?.metrics || []\n\n  const dashboardForm = useForm<CreateDashboardRequest>({\n    resolver: zodResolver(createDashboardSchema),\n    defaultValues: {\n      name: dashboard.name || 'New Dashboard',\n      description: dashboard.description || '',\n      category: dashboard.category || 'General',\n      tags: dashboard.tags || [],\n      visibility: dashboard.visibility || 'private',\n      autoRefresh: dashboard.autoRefresh || false,\n      refreshInterval: dashboard.refreshInterval,\n    },\n  })\n\n  const generateWidgetId = () => `widget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n  const addWidget = useCallback((type: keyof typeof WidgetTypeConfig, position?: Position) => {\n    const widgetConfig = WidgetTypeConfig[type]\n    const newWidget: DashboardWidget = {\n      id: generateWidgetId(),\n      type,\n      title: `New ${widgetConfig.name}`,\n      position: position || {\n        x: 0,\n        y: 0,\n        width: widgetConfig.minWidth,\n        height: widgetConfig.minHeight,\n      },\n      config: {},\n      dataSources: [],\n    }\n\n    setDashboard(prev => ({\n      ...prev,\n      widgets: [...(prev.widgets || []), newWidget],\n    }))\n\n    setSelectedWidget(newWidget.id)\n    setShowWidgetConfig(true)\n  }, [])\n\n  const updateWidget = useCallback((widgetId: string, updates: Partial<DashboardWidget>) => {\n    setDashboard(prev => ({\n      ...prev,\n      widgets: (prev.widgets || []).map(widget =>\n        widget.id === widgetId ? { ...widget, ...updates } : widget\n      ),\n    }))\n  }, [])\n\n  const removeWidget = useCallback((widgetId: string) => {\n    setDashboard(prev => ({\n      ...prev,\n      widgets: (prev.widgets || []).filter(widget => widget.id !== widgetId),\n    }))\n    if (selectedWidget === widgetId) {\n      setSelectedWidget(null)\n      setShowWidgetConfig(false)\n    }\n  }, [selectedWidget])\n\n  const duplicateWidget = useCallback((widgetId: string) => {\n    const widget = dashboard.widgets?.find(w => w.id === widgetId)\n    if (widget) {\n      const newWidget: DashboardWidget = {\n        ...widget,\n        id: generateWidgetId(),\n        title: `${widget.title} (Copy)`,\n        position: {\n          ...widget.position,\n          x: Math.min(widget.position.x + 1, gridSize.width - widget.position.width),\n          y: widget.position.y + 1,\n        },\n      }\n      setDashboard(prev => ({\n        ...prev,\n        widgets: [...(prev.widgets || []), newWidget],\n      }))\n    }\n  }, [dashboard.widgets, gridSize.width])\n\n  const moveWidget = useCallback((widgetId: string, newPosition: Position) => {\n    updateWidget(widgetId, { position: newPosition })\n  }, [updateWidget])\n\n  const handleSave = async () => {\n    try {\n      const formData = dashboardForm.getValues()\n      const dashboardData: CreateDashboardRequest = {\n        ...formData,\n        ...dashboard,\n      } as CreateDashboardRequest\n\n      let savedDashboard: Dashboard\n      if (dashboardId) {\n        savedDashboard = await updateDashboard({\n          dashboardId: dashboardId as any,\n          updates: dashboardData,\n        }).unwrap()\n      } else {\n        savedDashboard = await createDashboard(dashboardData).unwrap()\n      }\n\n      onSave?.(savedDashboard)\n    } catch (error) {\n      console.error('Failed to save dashboard:', error)\n    }\n  }\n\n  const selectedWidgetData = useMemo(() => {\n    if (!selectedWidget) return null\n    return dashboard.widgets?.find(w => w.id === selectedWidget) || null\n  }, [selectedWidget, dashboard.widgets])\n\n  const gridStyle = {\n    backgroundImage: `\n      linear-gradient(to right, #f3f4f6 1px, transparent 1px),\n      linear-gradient(to bottom, #f3f4f6 1px, transparent 1px)\n    `,\n    backgroundSize: `${100 / gridSize.width}% ${100 / gridSize.height}%`,\n  }\n\n  return (\n    <div className={`flex h-screen ${className}`}>\n      {/* Sidebar */}\n      <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Dashboard Builder</h2>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setPreviewMode(!previewMode)}\n                className={`p-2 rounded-lg ${\n                  previewMode ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-100 text-gray-600'\n                } hover:bg-indigo-200`}\n                title={previewMode ? 'Exit Preview' : 'Preview'}\n              >\n                <EyeIcon className=\"h-5 w-5\" />\n              </button>\n              <button\n                onClick={handleSave}\n                disabled={isCreating || isUpdating}\n                className=\"p-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50\"\n                title=\"Save Dashboard\"\n              >\n                <SaveIcon className=\"h-5 w-5\" />\n              </button>\n              {onCancel && (\n                <button\n                  onClick={onCancel}\n                  className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200\"\n                  title=\"Cancel\"\n                >\n                  <XMarkIcon className=\"h-5 w-5\" />\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Dashboard Settings */}\n        <div className=\"p-4 border-b border-gray-200\">\n          <h3 className=\"text-sm font-medium text-gray-900 mb-3\">Dashboard Settings</h3>\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Name\n              </label>\n              <Controller\n                name=\"name\"\n                control={dashboardForm.control}\n                render={({ field }) => (\n                  <input\n                    {...field}\n                    type=\"text\"\n                    className=\"w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                    placeholder=\"Dashboard name\"\n                  />\n                )}\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Description\n              </label>\n              <Controller\n                name=\"description\"\n                control={dashboardForm.control}\n                render={({ field }) => (\n                  <textarea\n                    {...field}\n                    rows={2}\n                    className=\"w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                    placeholder=\"Dashboard description\"\n                  />\n                )}\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Category\n              </label>\n              <Controller\n                name=\"category\"\n                control={dashboardForm.control}\n                render={({ field }) => (\n                  <select\n                    {...field}\n                    className=\"w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                  >\n                    <option value=\"General\">General</option>\n                    <option value=\"Business\">Business</option>\n                    <option value=\"Technical\">Technical</option>\n                    <option value=\"Marketing\">Marketing</option>\n                    <option value=\"Sales\">Sales</option>\n                    <option value=\"Operations\">Operations</option>\n                  </select>\n                )}\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Visibility\n              </label>\n              <Controller\n                name=\"visibility\"\n                control={dashboardForm.control}\n                render={({ field }) => (\n                  <select\n                    {...field}\n                    className=\"w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                  >\n                    <option value=\"private\">Private</option>\n                    <option value=\"shared\">Shared</option>\n                    <option value=\"public\">Public</option>\n                  </select>\n                )}\n              />\n            </div>\n            <div className=\"flex items-center\">\n              <Controller\n                name=\"autoRefresh\"\n                control={dashboardForm.control}\n                render={({ field }) => (\n                  <input\n                    type=\"checkbox\"\n                    checked={field.value}\n                    onChange={field.onChange}\n                    className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                  />\n                )}\n              />\n              <label className=\"ml-2 text-xs text-gray-700\">\n                Auto refresh\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Widget Library */}\n        <div className=\"flex-1 p-4 overflow-y-auto\">\n          <h3 className=\"text-sm font-medium text-gray-900 mb-3\">Widget Library</h3>\n          <div className=\"space-y-2\">\n            {Object.entries(WidgetTypeConfig).map(([type, config]) => (\n              <button\n                key={type}\n                onClick={() => addWidget(type as keyof typeof WidgetTypeConfig)}\n                className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:border-indigo-300 hover:bg-indigo-50 transition-colors\"\n                disabled={previewMode}\n              >\n                <div className=\"flex items-center\">\n                  <config.icon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                  <span className=\"text-sm font-medium text-gray-900\">{config.name}</span>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Widget Configuration Panel */}\n        {showWidgetConfig && selectedWidgetData && (\n          <div className=\"border-t border-gray-200 bg-gray-50\">\n            <div className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-sm font-medium text-gray-900\">Widget Configuration</h3>\n                <button\n                  onClick={() => setShowWidgetConfig(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <XMarkIcon className=\"h-4 w-4\" />\n                </button>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                    Title\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={selectedWidgetData.title}\n                    onChange={(e) => updateWidget(selectedWidgetData.id, { title: e.target.value })}\n                    className=\"w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                  />\n                </div>\n\n                {selectedWidgetData.type === 'chart' && (\n                  <div>\n                    <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                      Chart Type\n                    </label>\n                    <select\n                      value={selectedWidgetData.config?.chartType || 'line'}\n                      onChange={(e) => updateWidget(selectedWidgetData.id, {\n                        config: { ...selectedWidgetData.config, chartType: e.target.value as ChartType }\n                      })}\n                      className=\"w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                    >\n                      {Object.entries(ChartTypes).map(([value, config]) => (\n                        <option key={value} value={value}>\n                          {config.icon} {config.name}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                )}\n\n                {selectedWidgetData.type === 'metric' && (\n                  <div>\n                    <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                      Metric\n                    </label>\n                    <select\n                      value={selectedWidgetData.dataSources?.[0]?.metricId || ''}\n                      onChange={(e) => {\n                        const dataSource: DataSource = {\n                          id: 'primary',\n                          type: 'metric',\n                          metricId: e.target.value as any,\n                        }\n                        updateWidget(selectedWidgetData.id, {\n                          dataSources: [dataSource]\n                        })\n                      }}\n                      className=\"w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                    >\n                      <option value=\"\">Select a metric</option>\n                      {metrics.map((metric) => (\n                        <option key={metric.id} value={metric.id}>\n                          {metric.name} ({metric.category})\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between pt-3 border-t border-gray-200\">\n                  <button\n                    onClick={() => duplicateWidget(selectedWidgetData.id)}\n                    className=\"text-xs text-indigo-600 hover:text-indigo-800\"\n                  >\n                    <DocumentDuplicateIcon className=\"h-4 w-4 inline mr-1\" />\n                    Duplicate\n                  </button>\n                  <button\n                    onClick={() => removeWidget(selectedWidgetData.id)}\n                    className=\"text-xs text-red-600 hover:text-red-800\"\n                  >\n                    <TrashIcon className=\"h-4 w-4 inline mr-1\" />\n                    Delete\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Main Canvas */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Canvas Header */}\n        <div className=\"p-4 bg-white border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">\n                {dashboardForm.watch('name') || 'New Dashboard'}\n              </h1>\n              <p className=\"text-sm text-gray-500\">\n                {dashboard.widgets?.length || 0} widgets • Grid: {gridSize.width}x{gridSize.height}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-xs text-gray-500\">\n                {previewMode ? 'Preview Mode' : 'Edit Mode'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Canvas */}\n        <div className=\"flex-1 p-4 bg-gray-50 overflow-auto\">\n          <div\n            className=\"relative bg-white rounded-lg shadow-sm border border-gray-200 min-h-full\"\n            style={{\n              ...gridStyle,\n              minHeight: '800px',\n            }}\n          >\n            {dashboard.widgets?.map((widget) => (\n              <div\n                key={widget.id}\n                className={`absolute border-2 rounded-lg transition-all duration-200 ${\n                  selectedWidget === widget.id\n                    ? 'border-indigo-500 bg-indigo-50'\n                    : 'border-gray-200 bg-white hover:border-gray-300'\n                } ${previewMode ? 'cursor-default' : 'cursor-pointer'}`}\n                style={{\n                  left: `${(widget.position.x / gridSize.width) * 100}%`,\n                  top: `${(widget.position.y / gridSize.height) * 100}%`,\n                  width: `${(widget.position.width / gridSize.width) * 100}%`,\n                  height: `${(widget.position.height / gridSize.height) * 100}%`,\n                  minWidth: '120px',\n                  minHeight: '80px',\n                }}\n                onClick={() => {\n                  if (!previewMode) {\n                    setSelectedWidget(widget.id)\n                    setShowWidgetConfig(true)\n                  }\n                }}\n              >\n                {/* Widget Header */}\n                <div className=\"flex items-center justify-between p-2 border-b border-gray-200\">\n                  <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                    {widget.title}\n                  </h4>\n                  {!previewMode && selectedWidget === widget.id && (\n                    <div className=\"flex items-center space-x-1\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          // Handle resize\n                        }}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                        title=\"Resize\"\n                      >\n                        <ArrowsPointingOutIcon className=\"h-3 w-3\" />\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          removeWidget(widget.id)\n                        }}\n                        className=\"text-gray-400 hover:text-red-600\"\n                        title=\"Delete\"\n                      >\n                        <XMarkIcon className=\"h-3 w-3\" />\n                      </button>\n                    </div>\n                  )}\n                </div>\n\n                {/* Widget Content */}\n                <div className=\"p-3 h-full\">\n                  {widget.type === 'metric' && (\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-900\">\n                        {widget.dataSources?.[0]?.metricId ? '1,234' : '--'}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {widget.dataSources?.[0]?.metricId\n                          ? metrics.find(m => m.id === widget.dataSources?.[0]?.metricId)?.name\n                          : 'No metric selected'\n                        }\n                      </div>\n                    </div>\n                  )}\n\n                  {widget.type === 'chart' && (\n                    <div className=\"text-center text-gray-500\">\n                      <ChartBarIcon className=\"h-12 w-12 mx-auto mb-2\" />\n                      <p className=\"text-sm\">\n                        {ChartTypes[widget.config?.chartType as ChartType]?.name || 'Chart'}\n                      </p>\n                    </div>\n                  )}\n\n                  {widget.type === 'table' && (\n                    <div className=\"text-center text-gray-500\">\n                      <TableCellsIcon className=\"h-12 w-12 mx-auto mb-2\" />\n                      <p className=\"text-sm\">Data Table</p>\n                    </div>\n                  )}\n\n                  {widget.type === 'text' && (\n                    <div className=\"text-gray-500\">\n                      <DocumentTextIcon className=\"h-8 w-8 mb-2\" />\n                      <p className=\"text-sm\">Text content will appear here</p>\n                    </div>\n                  )}\n\n                  {widget.type === 'image' && (\n                    <div className=\"text-center text-gray-500\">\n                      <PhotoIcon className=\"h-12 w-12 mx-auto mb-2\" />\n                      <p className=\"text-sm\">Image</p>\n                    </div>\n                  )}\n\n                  {widget.type === 'iframe' && (\n                    <div className=\"text-center text-gray-500\">\n                      <GlobeAltIcon className=\"h-12 w-12 mx-auto mb-2\" />\n                      <p className=\"text-sm\">Embedded Content</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n\n            {/* Empty State */}\n            {(!dashboard.widgets || dashboard.widgets.length === 0) && (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"text-center text-gray-500\">\n                  <Squares2X2Icon className=\"h-16 w-16 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Start Building Your Dashboard</h3>\n                  <p className=\"text-sm mb-4\">\n                    Add widgets from the sidebar to create your custom dashboard\n                  </p>\n                  <button\n                    onClick={() => addWidget('metric')}\n                    className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700\"\n                    disabled={previewMode}\n                  >\n                    <PlusIcon className=\"h-4 w-4 mr-2\" />\n                    Add First Widget\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DashboardBuilder","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/auth/PasswordLoginForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":88,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":88,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline'\n\nimport { usePasswordLoginMutation } from '../../store/api/authApi'\nimport { useAppDispatch } from '../../store/hooks'\nimport { setCredentials } from '../../store/slices/authSlice'\nimport { parseApiError } from '../../utils/apiError'\nimport { logger } from '../../utils/logger'\n\nconst passwordLoginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n})\n\ntype PasswordLoginFormData = z.infer<typeof passwordLoginSchema>\n\ninterface PasswordLoginFormProps {\n  onSuccess?: () => void\n  onError?: (error: string) => void\n}\n\nconst PasswordLoginForm: React.FC<PasswordLoginFormProps> = ({\n  onSuccess,\n  onError,\n}) => {\n  const [showPassword, setShowPassword] = useState(false)\n  const dispatch = useAppDispatch()\n  const [passwordLogin, { isLoading }] = usePasswordLoginMutation()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setError,\n  } = useForm<PasswordLoginFormData>({\n    resolver: zodResolver(passwordLoginSchema),\n    mode: 'onBlur',\n  })\n\n  const onSubmit = async (data: PasswordLoginFormData) => {\n    try {\n      // Include the demo organization ID for authentication\n      const loginData = {\n        ...data,\n        organizationId: 'b48e719b-3116-423e-b114-c9791e296a8d', // Demo organization ID\n      }\n      const result = await passwordLogin(loginData).unwrap()\n\n      // Update auth state with user and token\n      dispatch(\n        setCredentials({\n          user: result.user,\n          token: result.token,\n        })\n      )\n\n      onSuccess?.()\n    } catch (err) {\n      const parsed = parseApiError(err)\n      logger.error('Login failed:', parsed)\n      if (parsed.status === 429) {\n        onError?.('Too many login attempts. Please try again later.')\n        return\n      }\n      if (parsed.status === 401) {\n        setError('password', { message: 'Invalid email or password' })\n        return\n      }\n      // Try to map backend message to field when possible\n      const msg = parsed.message || 'Login failed. Please try again.'\n      if (msg.toLowerCase().includes('email')) {\n        setError('email', { message: msg })\n      } else if (\n        msg.toLowerCase().includes('password') ||\n        msg.toLowerCase().includes('credentials')\n      ) {\n        setError('password', { message: 'Invalid email or password' })\n      } else {\n        onError?.(msg)\n      }\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-900 text-center\">\n          Sign in to your account\n        </h3>\n        <p className=\"mt-1 text-sm text-gray-600 text-center\">\n          Enter your email and password to continue\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Email Field */}\n        <div>\n          <label\n            htmlFor=\"email\"\n            className=\"block text-sm font-medium text-gray-700\"\n          >\n            Email address\n          </label>\n          <div className=\"mt-1\">\n            <input\n              {...register('email')}\n              type=\"email\"\n              id=\"email\"\n              data-testid=\"email-input\"\n              autoComplete=\"email\"\n              className={`appearance-none block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:text-sm ${\n                errors.email\n                  ? 'border-red-300 focus:border-red-500 focus:ring-red-500'\n                  : 'border-gray-300 focus:border-primary-500'\n              }`}\n              placeholder=\"you@example.com\"\n            />\n            {errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\" data-testid=\"email-error\">\n                {errors.email.message}\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Password Field */}\n        <div>\n          <label\n            htmlFor=\"password\"\n            className=\"block text-sm font-medium text-gray-700\"\n          >\n            Password\n          </label>\n          <div className=\"mt-1 relative\">\n            <input\n              {...register('password')}\n              type={showPassword ? 'text' : 'password'}\n              id=\"password\"\n              data-testid=\"password-input\"\n              autoComplete=\"current-password\"\n              className={`appearance-none block w-full px-3 py-2 pr-10 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:text-sm ${\n                errors.password\n                  ? 'border-red-300 focus:border-red-500 focus:ring-red-500'\n                  : 'border-gray-300 focus:border-primary-500'\n              }`}\n              placeholder=\"Enter your password\"\n            />\n            <button\n              type=\"button\"\n              className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n              onClick={() => setShowPassword(!showPassword)}\n              aria-label={showPassword ? 'Hide password' : 'Show password'}\n            >\n              {showPassword ? (\n                <EyeSlashIcon className=\"h-5 w-5 text-gray-400 hover:text-gray-600\" />\n              ) : (\n                <EyeIcon className=\"h-5 w-5 text-gray-400 hover:text-gray-600\" />\n              )}\n            </button>\n            {errors.password && (\n              <p className=\"mt-1 text-sm text-red-600\" data-testid=\"password-error\">\n                {errors.password.message}\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Submit Button */}\n      <div>\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          data-testid=\"submit-button\"\n          className=\"w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n        >\n          {isLoading ? (\n            <>\n              <svg\n                className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                />\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                />\n              </svg>\n              Signing in...\n            </>\n          ) : (\n            'Sign in'\n          )}\n        </button>\n      </div>\n\n      {/* Footer */}\n      <div className=\"text-xs text-gray-500 text-center space-y-1\">\n        <p>\n          By signing in, you agree to our Terms of Service and Privacy Policy.\n        </p>\n        <p>Your data is encrypted and securely stored.</p>\n      </div>\n    </form>\n  )\n}\n\nexport default PasswordLoginForm\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/auth/mfa/MFAManagementDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":126,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":126,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3734,3734],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3734,3734],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":141,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":141,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4205,4205],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4205,4205],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":155,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":155,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4569,4571],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":68,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4641,4643],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5791,5793],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":207,"column":60,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":207,"endColumn":76},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":279,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":279,"endColumn":63},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":286,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":286,"endColumn":63},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":412,"column":17,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":412,"endColumn":33,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[14190,14190],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[14190,14190],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MFA Management Dashboard\n *\n * Comprehensive multi-factor authentication management interface:\n * - View and manage all MFA methods\n * - Security analytics and recommendations\n * - Backup codes management\n * - Trusted devices management\n * - Audit log and activity tracking\n * - Recovery options\n */\n\nimport React, { useState } from 'react'\nimport {\n  ShieldCheckIcon,\n  DevicePhoneMobileIcon,\n  EnvelopeIcon,\n  KeyIcon,\n  FingerPrintIcon,\n  QrCodeIcon,\n  DocumentTextIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  PlusIcon,\n  TrashIcon,\n  ClockIcon,\n  ChartBarIcon,\n  Cog6ToothIcon,\n} from '@heroicons/react/24/outline'\nimport { format } from 'date-fns'\nimport { clsx } from 'clsx'\nimport { toast } from 'react-hot-toast'\n\nimport {\n  useGetMFAMethodsQuery,\n  useGetMFAAnalyticsQuery,\n  useGetMFAAuditLogQuery,\n  useUpdateMFAMethodMutation,\n  useDeleteMFAMethodMutation,\n} from '../../../store/api/mfaApi'\nimport { Button } from '../../ui/button'\nimport { LoadingCard } from '../../ui/LoadingStates'\nimport { ApiErrorDisplay, EmptyState } from '../../ui/ErrorStates'\nimport { logger } from '../../../utils/logger'\nimport type { AnyMFAMethod, MFAMethodType } from '../../../types/mfa'\n\nimport TOTPSetup from './TOTPSetup'\n\ninterface MFAManagementDashboardProps {\n  className?: string\n}\n\ntype ActiveModal = 'none' | 'add-method' | 'backup-codes' | 'settings' | 'audit-log' | 'trusted-devices'\n\nconst MFAManagementDashboard: React.FC<MFAManagementDashboardProps> = ({ className }) => {\n  const [activeModal, setActiveModal] = useState<ActiveModal>('none')\n\n  // API queries\n  const { data: methods, isLoading: methodsLoading, error: methodsError, refetch: refetchMethods } = useGetMFAMethodsQuery()\n  const { data: analytics, isLoading: analyticsLoading } = useGetMFAAnalyticsQuery()\n  const { data: auditLog, isLoading: auditLoading } = useGetMFAAuditLogQuery({ limit: 10 })\n\n  // Mutations\n  const [updateMethod] = useUpdateMFAMethodMutation()\n  const [deleteMethod] = useDeleteMFAMethodMutation()\n\n  const getMethodIcon = (type: MFAMethodType) => {\n    switch (type) {\n      case 'totp':\n        return <QrCodeIcon className=\"w-5 h-5\" />\n      case 'sms':\n        return <DevicePhoneMobileIcon className=\"w-5 h-5\" />\n      case 'email':\n        return <EnvelopeIcon className=\"w-5 h-5\" />\n      case 'webauthn':\n        return <KeyIcon className=\"w-5 h-5\" />\n      case 'biometric':\n        return <FingerPrintIcon className=\"w-5 h-5\" />\n      case 'backup_codes':\n        return <DocumentTextIcon className=\"w-5 h-5\" />\n      default:\n        return <ShieldCheckIcon className=\"w-5 h-5\" />\n    }\n  }\n\n  const getMethodTypeLabel = (type: MFAMethodType): string => {\n    switch (type) {\n      case 'totp':\n        return 'Authenticator App'\n      case 'sms':\n        return 'SMS'\n      case 'email':\n        return 'Email'\n      case 'webauthn':\n        return 'Security Key'\n      case 'biometric':\n        return 'Biometric'\n      case 'backup_codes':\n        return 'Backup Codes'\n      default:\n        return 'Unknown'\n    }\n  }\n\n  const getSecurityLevelColor = (score: number) => {\n    if (score >= 90) return 'text-green-600 bg-green-100'\n    if (score >= 70) return 'text-yellow-600 bg-yellow-100'\n    return 'text-red-600 bg-red-100'\n  }\n\n  const getSecurityLevelLabel = (score: number) => {\n    if (score >= 90) return 'Excellent'\n    if (score >= 70) return 'Good'\n    if (score >= 50) return 'Fair'\n    return 'Poor'\n  }\n\n  const handleToggleMethod = async (method: AnyMFAMethod) => {\n    try {\n      await updateMethod({\n        methodId: method.id,\n        updates: { isEnabled: !method.isEnabled }\n      }).unwrap()\n\n      toast.success(`${method.name} ${method.isEnabled ? 'disabled' : 'enabled'}`)\n      refetchMethods()\n    } catch (error) {\n      logger.error('Failed to toggle MFA method:', error)\n      toast.error('Failed to update method. Please try again.')\n    }\n  }\n\n  const handleDeleteMethod = async (method: AnyMFAMethod) => {\n    if (!confirm(`Are you sure you want to remove \"${method.name}\"? This cannot be undone.`)) {\n      return\n    }\n\n    try {\n      await deleteMethod(method.id).unwrap()\n      toast.success(`${method.name} removed successfully`)\n      refetchMethods()\n    } catch (error) {\n      logger.error('Failed to delete MFA method:', error)\n      toast.error('Failed to remove method. Please try again.')\n    }\n  }\n\n\n\n  const renderSecurityOverview = () => {\n    if (analyticsLoading) {\n      return <LoadingCard title=\"Loading Security Overview\" />\n    }\n\n    const securityScore = analytics?.securityScore || 0\n    const activeMethods = methods?.filter(m => m.isEnabled).length || 0\n\n    return (\n      <div className=\"bg-white shadow rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Security Overview</h3>\n          <ChartBarIcon className=\"w-5 h-5 text-gray-400\" />\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <div className={clsx('inline-flex items-center px-3 py-1 rounded-full text-sm font-medium', getSecurityLevelColor(securityScore))}>\n              {getSecurityLevelLabel(securityScore)}\n            </div>\n            <p className=\"text-2xl font-bold text-gray-900 mt-2\">{securityScore}%</p>\n            <p className=\"text-sm text-gray-500\">Security Score</p>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-blue-600\">{activeMethods}</p>\n            <p className=\"text-sm text-gray-500\">Active Methods</p>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-green-600\">\n              {analytics?.loginAttempts.successful || 0}\n            </p>\n            <p className=\"text-sm text-gray-500\">Recent Logins</p>\n          </div>\n        </div>\n\n        {analytics?.recommendations && analytics.recommendations.length > 0 && (\n          <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-blue-900 mb-2\">Recommendations</h4>\n            <ul className=\"text-sm text-blue-800 space-y-1\">\n              {analytics.recommendations.slice(0, 3).map((rec, index) => (\n                <li key={index}>• {rec}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  const renderMFAMethods = () => {\n    if (methodsLoading) {\n      return <LoadingCard title=\"Loading MFA Methods\" />\n    }\n\n    if (methodsError) {\n      return <ApiErrorDisplay error={methodsError} onRetry={refetchMethods} />\n    }\n\n    if (!methods || methods.length === 0) {\n      return (\n        <EmptyState\n          title=\"No MFA methods configured\"\n          message=\"Add your first authentication method to secure your account.\"\n          action={{\n            label: \"Add MFA Method\",\n            onClick: () => setActiveModal('add-method')\n          }}\n        />\n      )\n    }\n\n    return (\n      <div className=\"bg-white shadow rounded-lg\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Authentication Methods</h3>\n            <Button\n              onClick={() => setActiveModal('add-method')}\n              size=\"sm\"\n            >\n              <PlusIcon className=\"w-4 h-4 mr-1\" />\n              Add Method\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"divide-y divide-gray-200\">\n          {methods.map((method) => (\n            <div key={method.id} className=\"px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className={clsx(\n                    'flex items-center justify-center w-10 h-10 rounded-lg',\n                    method.isEnabled ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                  )}>\n                    {getMethodIcon(method.type)}\n                  </div>\n                  <div className=\"ml-4\">\n                    <div className=\"flex items-center\">\n                      <h4 className=\"text-sm font-medium text-gray-900\">{method.name}</h4>\n                      {method.isPrimary && (\n                        <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n                          Primary\n                        </span>\n                      )}\n                      {!method.isEnabled && (\n                        <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800\">\n                          Disabled\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center mt-1 text-sm text-gray-500\">\n                      <span>{getMethodTypeLabel(method.type)}</span>\n                      {method.lastUsed && (\n                        <>\n                          <span className=\"mx-2\">•</span>\n                          <span>Last used {format(new Date(method.lastUsed), 'MMM d, yyyy')}</span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleToggleMethod(method)}\n                  >\n                    {method.isEnabled ? 'Disable' : 'Enable'}\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteMethod(method)}\n                    className=\"text-red-600 hover:text-red-700\"\n                  >\n                    <TrashIcon className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  const renderQuickActions = () => (\n    <div className=\"bg-white shadow rounded-lg p-6\">\n      <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Quick Actions</h3>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n        <Button\n          variant=\"outline\"\n          onClick={() => setActiveModal('backup-codes')}\n          className=\"justify-start\"\n        >\n          <DocumentTextIcon className=\"w-4 h-4 mr-2\" />\n          Backup Codes\n        </Button>\n        <Button\n          variant=\"outline\"\n          onClick={() => setActiveModal('settings')}\n          className=\"justify-start\"\n        >\n          <Cog6ToothIcon className=\"w-4 h-4 mr-2\" />\n          Settings\n        </Button>\n        <Button\n          variant=\"outline\"\n          onClick={() => setActiveModal('trusted-devices')}\n          className=\"justify-start\"\n        >\n          <KeyIcon className=\"w-4 h-4 mr-2\" />\n          Trusted Devices\n        </Button>\n        <Button\n          variant=\"outline\"\n          onClick={() => setActiveModal('audit-log')}\n          className=\"justify-start\"\n        >\n          <ClockIcon className=\"w-4 h-4 mr-2\" />\n          Activity Log\n        </Button>\n      </div>\n    </div>\n  )\n\n  const renderRecentActivity = () => {\n    if (auditLoading) {\n      return <LoadingCard title=\"Loading Recent Activity\" />\n    }\n\n    return (\n      <div className=\"bg-white shadow rounded-lg\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Recent Activity</h3>\n        </div>\n\n        {!auditLog || auditLog.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <ClockIcon className=\"w-8 h-8 mx-auto mb-2 text-gray-400\" />\n            <p>No recent activity</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {auditLog.slice(0, 5).map((event) => (\n              <div key={event.id} className=\"px-6 py-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className={clsx(\n                      'w-2 h-2 rounded-full mr-3',\n                      event.success ? 'bg-green-400' : 'bg-red-400'\n                    )} />\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {event.action.replace('_', ' ').charAt(0).toUpperCase() + event.action.slice(1)}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {format(new Date(event.timestamp), 'MMM d, yyyy h:mm a')}\n                      </p>\n                    </div>\n                  </div>\n                  {event.success ? (\n                    <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />\n                  ) : (\n                    <ExclamationTriangleIcon className=\"w-4 h-4 text-red-500\" />\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  const renderAddMethodModal = () => {\n    if (activeModal !== 'add-method') return null\n\n    return (\n      <div className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n        <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Add MFA Method</h3>\n              <button\n                onClick={() => setActiveModal('none')}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            <TOTPSetup\n              onComplete={() => {\n                toast.success('TOTP method added successfully!')\n                setActiveModal('none')\n                refetchMethods()\n              }}\n              onCancel={() => setActiveModal('none')}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (methodsLoading) {\n    return (\n      <div className={clsx('space-y-6', className)}>\n        <LoadingCard title=\"Loading MFA Dashboard\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className={clsx('space-y-6', className)}>\n      {/* Security Overview */}\n      {renderSecurityOverview()}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* MFA Methods - 2 columns */}\n        <div className=\"lg:col-span-2\">\n          {renderMFAMethods()}\n        </div>\n\n        {/* Sidebar - 1 column */}\n        <div className=\"space-y-6\">\n          {renderQuickActions()}\n          {renderRecentActivity()}\n        </div>\n      </div>\n\n      {/* Modals */}\n      {renderAddMethodModal()}\n    </div>\n  )\n}\n\nexport default MFAManagementDashboard\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/auth/mfa/TOTPSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1355,1358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1355,1358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":155,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":155,"endColumn":42,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4976,4976],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4976,4976],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleVerifySetup'. Either include it or remove the dependency array.","line":159,"column":6,"nodeType":"ArrayExpression","endLine":159,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [verificationCode, errors.verificationCode, handleSubmit, handleVerifySetup]","fix":{"range":[5074,5131],"text":"[verificationCode, errors.verificationCode, handleSubmit, handleVerifySetup]"}}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":221,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":221,"endColumn":54},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":310,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":310,"endColumn":96},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":353,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":353,"endColumn":55},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":433,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":433,"endColumn":84}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TOTP (Time-based One-Time Password) Setup Component\n *\n * Comprehensive setup flow for TOTP MFA using Google Authenticator,\n * Authy, or other TOTP-compatible apps:\n * - QR code display for easy setup\n * - Manual secret key entry option\n * - Verification flow\n * - Backup codes generation\n * - Progressive enhancement for accessibility\n */\n\nimport React, { useState, useEffect } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { QrCodeIcon, ClipboardDocumentIcon, CheckCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline'\nimport { clsx } from 'clsx'\nimport { toast } from 'react-hot-toast'\n\nimport { useSetupMFAMethodMutation, useVerifyMFASetupMutation } from '../../../store/api/mfaApi'\nimport { Button } from '../../ui/button'\nimport { logger } from '../../../utils/logger'\nimport type { TOTPSetupForm, MFASetupResponse } from '../../../types/mfa'\n\n// Validation schemas\nconst totpSetupSchema = z.object({\n  name: z.string().min(1, 'Please provide a name for this authenticator').max(50, 'Name must be 50 characters or less'),\n  verificationCode: z.string()\n    .regex(/^\\d{6}$/, 'Verification code must be exactly 6 digits')\n    .length(6, 'Verification code must be 6 digits'),\n})\n\ninterface TOTPSetupProps {\n  onComplete: (method: any) => void\n  onCancel: () => void\n  className?: string\n}\n\ntype SetupStep = 'configure' | 'scan' | 'verify' | 'backup' | 'complete'\n\nconst TOTPSetup: React.FC<TOTPSetupProps> = ({ onComplete, onCancel, className }) => {\n  const [currentStep, setCurrentStep] = useState<SetupStep>('configure')\n  const [setupData, setSetupData] = useState<MFASetupResponse | null>(null)\n  const [backupCodes, setBackupCodes] = useState<string[]>([])\n  const [showSecretKey, setShowSecretKey] = useState(false)\n\n  const [setupMFAMethod, { isLoading: isSettingUp }] = useSetupMFAMethodMutation()\n  const [verifySetup, { isLoading: isVerifying, error: verifyError }] = useVerifyMFASetupMutation()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    setValue,\n    clearErrors,\n  } = useForm<TOTPSetupForm>({\n    resolver: zodResolver(totpSetupSchema),\n    defaultValues: {\n      name: '',\n      verificationCode: '',\n    },\n  })\n\n  const methodName = watch('name')\n  const verificationCode = watch('verificationCode')\n\n  // Start TOTP setup process\n  const handleStartSetup = async (data: Pick<TOTPSetupForm, 'name'>) => {\n    try {\n      logger.info('Starting TOTP setup:', { name: data.name })\n\n      const response = await setupMFAMethod({\n        type: 'totp',\n        name: data.name,\n      }).unwrap()\n\n      setSetupData(response)\n      setCurrentStep('scan')\n\n      logger.info('TOTP setup initiated successfully')\n    } catch (error) {\n      logger.error('TOTP setup failed:', error)\n      toast.error('Failed to start TOTP setup. Please try again.')\n    }\n  }\n\n  // Verify TOTP setup\n  const handleVerifySetup = async (data: TOTPSetupForm) => {\n    if (!setupData?.method.id) {\n      toast.error('Setup data not found. Please start over.')\n      return\n    }\n\n    try {\n      logger.info('Verifying TOTP setup:', { methodId: setupData.method.id })\n\n      const response = await verifySetup({\n        methodId: setupData.method.id,\n        code: data.verificationCode,\n      }).unwrap()\n\n      if (response.success) {\n        // Check if backup codes were generated\n        if (setupData.setupData?.backupCodes) {\n          setBackupCodes(setupData.setupData.backupCodes)\n          setCurrentStep('backup')\n        } else {\n          setCurrentStep('complete')\n          onComplete(response.method)\n        }\n\n        logger.info('TOTP setup verified successfully')\n        toast.success('TOTP authenticator setup successfully!')\n      }\n    } catch (error) {\n      logger.error('TOTP verification failed:', error)\n      toast.error('Invalid verification code. Please try again.')\n    }\n  }\n\n  // Copy text to clipboard\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      toast.success(`${label} copied to clipboard`)\n    } catch (error) {\n      logger.error('Clipboard copy failed:', error)\n      toast.error('Failed to copy to clipboard')\n    }\n  }\n\n  // Handle backup codes acknowledgment\n  const handleBackupCodesAcknowledged = () => {\n    setCurrentStep('complete')\n    onComplete(setupData!.method)\n  }\n\n  // Auto-focus verification code input when QR is scanned\n  useEffect(() => {\n    if (currentStep === 'verify') {\n      const input = document.getElementById('verificationCode') as HTMLInputElement\n      if (input) {\n        input.focus()\n      }\n    }\n  }, [currentStep])\n\n  // Auto-format verification code\n  useEffect(() => {\n    if (verificationCode && verificationCode.length === 6 && !errors.verificationCode) {\n      // Auto-submit if code is valid format\n      const timer = setTimeout(() => {\n        handleSubmit(handleVerifySetup)()\n      }, 500)\n      return () => clearTimeout(timer)\n    }\n  }, [verificationCode, errors.verificationCode, handleSubmit])\n\n  const renderStepIndicator = () => {\n    const steps = [\n      { key: 'configure', label: 'Configure', number: 1 },\n      { key: 'scan', label: 'Scan QR', number: 2 },\n      { key: 'verify', label: 'Verify', number: 3 },\n      { key: 'backup', label: 'Backup', number: 4 },\n    ]\n\n    const stepIndex = steps.findIndex(step => step.key === currentStep)\n\n    return (\n      <div className=\"flex items-center justify-between mb-8\">\n        {steps.map((step, index) => (\n          <div key={step.key} className=\"flex items-center\">\n            <div\n              className={clsx(\n                'flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium',\n                index <= stepIndex\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-200 text-gray-600'\n              )}\n            >\n              {index < stepIndex ? '✓' : step.number}\n            </div>\n            <span\n              className={clsx(\n                'ml-2 text-sm font-medium',\n                index <= stepIndex ? 'text-blue-600' : 'text-gray-500'\n              )}\n            >\n              {step.label}\n            </span>\n            {index < steps.length - 1 && (\n              <div\n                className={clsx(\n                  'w-12 h-0.5 mx-4',\n                  index < stepIndex ? 'bg-blue-600' : 'bg-gray-200'\n                )}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  const renderConfigureStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <QrCodeIcon className=\"w-8 h-8 text-blue-600\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n          Setup Authenticator App\n        </h3>\n        <p className=\"text-sm text-gray-600 max-w-md mx-auto\">\n          Configure your TOTP authenticator app like Google Authenticator, Authy, or 1Password to generate secure codes.\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit(handleStartSetup)} className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Authenticator Name\n          </label>\n          <input\n            {...register('name')}\n            type=\"text\"\n            id=\"name\"\n            placeholder=\"e.g., iPhone Authenticator, Work Phone\"\n            className={clsx(\n              'w-full px-3 py-2 border rounded-lg text-sm transition-colors',\n              errors.name\n                ? 'border-red-300 focus:border-red-500 focus:ring-red-500'\n                : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500'\n            )}\n          />\n          {errors.name && (\n            <p className=\"mt-1 text-xs text-red-600\">{errors.name.message}</p>\n          )}\n        </div>\n\n        <div className=\"flex gap-3\">\n          <Button type=\"submit\" isLoading={isSettingUp} className=\"flex-1\">\n            Continue Setup\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n\n  const renderScanStep = () => {\n    if (!setupData?.setupData?.qrCode) {\n      return (\n        <div className=\"text-center py-8\">\n          <ExclamationTriangleIcon className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n          <p className=\"text-red-600\">QR code not generated. Please try again.</p>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            Scan QR Code\n          </h3>\n          <p className=\"text-sm text-gray-600 max-w-md mx-auto\">\n            Open your authenticator app and scan this QR code to add your account.\n          </p>\n        </div>\n\n        {/* QR Code Display */}\n        <div className=\"bg-white p-6 border-2 border-gray-200 rounded-lg text-center\">\n          <img\n            src={setupData.setupData.qrCode}\n            alt=\"TOTP QR Code\"\n            className=\"mx-auto max-w-full h-auto\"\n            style={{ maxWidth: '200px' }}\n          />\n        </div>\n\n        {/* Manual Entry Option */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-gray-700\">\n              Can't scan? Enter manually:\n            </span>\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowSecretKey(!showSecretKey)}\n            >\n              {showSecretKey ? 'Hide' : 'Show'} Key\n            </Button>\n          </div>\n\n          {showSecretKey && setupData.setupData.secretKey && (\n            <div className=\"bg-white p-3 border border-gray-200 rounded font-mono text-xs break-all\">\n              <div className=\"flex items-center justify-between\">\n                <code>{setupData.setupData.secretKey}</code>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(setupData.setupData.secretKey!, 'Secret key')}\n                >\n                  <ClipboardDocumentIcon className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex gap-3\">\n          <Button\n            type=\"button\"\n            onClick={() => setCurrentStep('verify')}\n            className=\"flex-1\"\n          >\n            I've Added the Account\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => setCurrentStep('configure')}\n          >\n            Back\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  const renderVerifyStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <CheckCircleIcon className=\"w-8 h-8 text-green-600\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n          Verify Setup\n        </h3>\n        <p className=\"text-sm text-gray-600 max-w-md mx-auto\">\n          Enter the 6-digit code from your authenticator app to complete setup.\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit(handleVerifySetup)} className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"verificationCode\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Verification Code\n          </label>\n          <input\n            {...register('verificationCode')}\n            type=\"text\"\n            id=\"verificationCode\"\n            inputMode=\"numeric\"\n            pattern=\"\\d{6}\"\n            maxLength={6}\n            placeholder=\"000000\"\n            className={clsx(\n              'w-full px-4 py-3 border rounded-lg text-center text-lg font-mono tracking-widest transition-colors',\n              errors.verificationCode\n                ? 'border-red-300 focus:border-red-500 focus:ring-red-500'\n                : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500'\n            )}\n            onChange={(e) => {\n              const value = e.target.value.replace(/\\D/g, '').slice(0, 6)\n              setValue('verificationCode', value)\n              if (errors.verificationCode && value.length === 6) {\n                clearErrors('verificationCode')\n              }\n            }}\n          />\n          {errors.verificationCode && (\n            <p className=\"mt-1 text-xs text-red-600\">{errors.verificationCode.message}</p>\n          )}\n          {verifyError && (\n            <p className=\"mt-1 text-xs text-red-600\">Invalid code. Please try again.</p>\n          )}\n        </div>\n\n        <div className=\"flex gap-3\">\n          <Button type=\"submit\" isLoading={isVerifying} disabled={verificationCode.length !== 6} className=\"flex-1\">\n            Verify & Complete\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => setCurrentStep('scan')}\n          >\n            Back\n          </Button>\n        </div>\n      </form>\n\n      <div className=\"text-center\">\n        <p className=\"text-xs text-gray-500\">\n          Codes refresh every 30 seconds. Wait for a new code if this one doesn't work.\n        </p>\n      </div>\n    </div>\n  )\n\n  const renderBackupCodesStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <ExclamationTriangleIcon className=\"w-8 h-8 text-yellow-600\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n          Save Backup Codes\n        </h3>\n        <p className=\"text-sm text-gray-600 max-w-md mx-auto\">\n          Store these backup codes in a secure place. You can use them to access your account if you lose your authenticator.\n        </p>\n      </div>\n\n      <div className=\"bg-gray-50 p-4 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-sm font-medium text-gray-700\">\n            Backup Codes (use once each)\n          </span>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => copyToClipboard(backupCodes.join('\\n'), 'Backup codes')}\n          >\n            <ClipboardDocumentIcon className=\"w-4 h-4 mr-1\" />\n            Copy All\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-2\">\n          {backupCodes.map((code, index) => (\n            <div\n              key={index}\n              className=\"bg-white p-2 border border-gray-200 rounded font-mono text-sm text-center\"\n            >\n              {code}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <ExclamationTriangleIcon className=\"h-5 w-5 text-blue-400\" />\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-blue-800\">Important</h3>\n            <div className=\"mt-2 text-sm text-blue-700\">\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>Each code can only be used once</li>\n                <li>Store them in a secure password manager</li>\n                <li>Don't share these codes with anyone</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Button type=\"button\" onClick={handleBackupCodesAcknowledged} className=\"w-full\">\n        I've Saved My Backup Codes\n      </Button>\n    </div>\n  )\n\n  const renderCompleteStep = () => (\n    <div className=\"text-center space-y-6\">\n      <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n        <CheckCircleIcon className=\"w-8 h-8 text-green-600\" />\n      </div>\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n          Setup Complete!\n        </h3>\n        <p className=\"text-sm text-gray-600\">\n          Your authenticator \"{methodName}\" has been configured successfully.\n        </p>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className={clsx('max-w-md mx-auto', className)}>\n      {currentStep !== 'complete' && renderStepIndicator()}\n\n      {currentStep === 'configure' && renderConfigureStep()}\n      {currentStep === 'scan' && renderScanStep()}\n      {currentStep === 'verify' && renderVerifyStep()}\n      {currentStep === 'backup' && renderBackupCodesStep()}\n      {currentStep === 'complete' && renderCompleteStep()}\n    </div>\n  )\n}\n\nexport default TOTPSetup\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/auth/rbac/PermissionChecker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1285,1288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1285,1288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resource' is defined but never used.","line":161,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'action' is defined but never used.","line":162,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":163,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4504,4507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4504,4507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'organizationId' is defined but never used.","line":186,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resource' is defined but never used.","line":191,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'action' is defined but never used.","line":191,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resourceId' is defined but never used.","line":191,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'organizationId' is defined but never used.","line":206,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resource' is defined but never used.","line":211,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'action' is defined but never used.","line":211,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resourceId' is defined but never used.","line":211,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'organizationId' is defined but never used.","line":220,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":47},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":271,"column":89,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":271,"endColumn":91,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7679,7681],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":335,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":335,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9174,9176],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Permission Checker Component\n *\n * React component for declarative permission-based rendering:\n * - Conditionally renders content based on user permissions\n * - Supports resource-level and action-level checks\n * - Caches permission results for performance\n * - Provides fallback content for unauthorized access\n * - Integrates with RBAC system\n */\n\nimport React, { useMemo } from 'react'\n\nimport { useCheckPermissionQuery } from '../../../store/api/rbacApi'\nimport { useAppSelector } from '../../../store/hooks'\nimport { selectCurrentUser } from '../../../store/slices/authSlice'\nimport { logger } from '../../../utils/logger'\nimport type { ResourceType, ActionType } from '../../../types/rbac'\n\nexport interface PermissionCheckerProps {\n  /** Resource being accessed */\n  resource: ResourceType\n  /** Action being performed on the resource */\n  action: ActionType\n  /** Optional specific resource ID for granular permissions */\n  resourceId?: string\n  /** Content to render if user has permission */\n  children: React.ReactNode\n  /** Content to render if user lacks permission */\n  fallback?: React.ReactNode\n  /** Organization ID for organization-scoped permissions */\n  organizationId?: string\n  /** Additional context for permission evaluation */\n  context?: Record<string, any>\n  /** Whether to show loading state during permission check */\n  showLoading?: boolean\n  /** Whether to log permission denials for debugging */\n  logDenials?: boolean\n  /** Custom loading component */\n  loadingComponent?: React.ReactNode\n}\n\n/**\n * Wrapper component that conditionally renders children based on user permissions.\n * Uses RTK Query to check permissions and caches results automatically.\n */\nconst PermissionChecker: React.FC<PermissionCheckerProps> = ({\n  resource,\n  action,\n  resourceId,\n  children,\n  fallback = null,\n  organizationId,\n  context,\n  showLoading = false,\n  logDenials = false,\n  loadingComponent,\n}) => {\n  const user = useAppSelector(selectCurrentUser)\n\n  // Build permission context\n  const permissionContext = useMemo(() => {\n    if (!user) return null\n\n    return {\n      userId: user.id,\n      organizationId,\n      resource,\n      action,\n      resourceId,\n      additionalContext: context,\n    }\n  }, [user, organizationId, resource, action, resourceId, context])\n\n  // Check permission via API\n  const {\n    data: permissionResult,\n    isLoading,\n    error,\n    isError,\n  } = useCheckPermissionQuery(permissionContext!, {\n    skip: !permissionContext,\n    // Cache permission results for 5 minutes\n    pollingInterval: 0,\n    refetchOnMountOrArgChange: 300, // 5 minutes\n  })\n\n  // Handle loading state\n  if (isLoading && showLoading) {\n    if (loadingComponent) {\n      return <>{loadingComponent}</>\n    }\n    return (\n      <div className=\"inline-flex items-center text-gray-400\" data-testid=\"permission-loading\">\n        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400\"></div>\n        <span className=\"ml-2 text-sm\">Checking permissions...</span>\n      </div>\n    )\n  }\n\n  // Handle error state - deny access on error for security\n  if (isError) {\n    if (logDenials) {\n      logger.warn('Permission check failed:', {\n        resource,\n        action,\n        resourceId,\n        error,\n        user: user?.id,\n      })\n    }\n    return <>{fallback}</>\n  }\n\n  // Handle no user - deny access\n  if (!user || !permissionContext) {\n    if (logDenials) {\n      logger.debug('Permission denied - no authenticated user:', {\n        resource,\n        action,\n        resourceId,\n      })\n    }\n    return <>{fallback}</>\n  }\n\n  // Handle permission result\n  const hasPermission = permissionResult?.allowed ?? false\n\n  if (!hasPermission) {\n    if (logDenials) {\n      logger.info('Permission denied:', {\n        resource,\n        action,\n        resourceId,\n        reason: permissionResult?.reason,\n        user: user.id,\n      })\n    }\n    return <>{fallback}</>\n  }\n\n  // User has permission - render children\n  return <>{children}</>\n}\n\nexport default PermissionChecker\n\n/**\n * Hook for imperative permission checking\n */\nexport const usePermissionCheck = () => {\n  const user = useAppSelector(selectCurrentUser)\n\n  return useMemo(() => {\n    return {\n      /**\n       * Check if current user has permission for a specific action\n       */\n      hasPermission: (\n        resource: ResourceType,\n        action: ActionType,\n        options?: {\n          resourceId?: string\n          organizationId?: string\n          context?: Record<string, any>\n        }\n      ) => {\n        if (!user) return false\n\n        // This would typically use a cached permission check\n        // For now, we'll return a simple implementation\n        // In a real app, this would integrate with the permission API\n        return true // Placeholder\n      },\n\n      /**\n       * Check multiple permissions at once\n       */\n      hasAnyPermission: (\n        permissions: Array<{\n          resource: ResourceType\n          action: ActionType\n          resourceId?: string\n        }>,\n        organizationId?: string\n      ) => {\n        if (!user) return false\n\n        // Check if user has any of the specified permissions\n        return permissions.some(({ resource, action, resourceId }) =>\n          // This would use the actual permission check logic\n          true // Placeholder\n        )\n      },\n\n      /**\n       * Check if user has all specified permissions\n       */\n      hasAllPermissions: (\n        permissions: Array<{\n          resource: ResourceType\n          action: ActionType\n          resourceId?: string\n        }>,\n        organizationId?: string\n      ) => {\n        if (!user) return false\n\n        // Check if user has all of the specified permissions\n        return permissions.every(({ resource, action, resourceId }) =>\n          // This would use the actual permission check logic\n          true // Placeholder\n        )\n      },\n\n      /**\n       * Get user's effective permissions for debugging\n       */\n      getEffectivePermissions: (organizationId?: string) => {\n        if (!user) return []\n\n        // This would fetch and return user's effective permissions\n        return [] // Placeholder\n      },\n    }\n  }, [user])\n}\n\n/**\n * Higher-order component for permission-based access control\n */\nexport const withPermissionCheck = <P extends object>(\n  Component: React.ComponentType<P>,\n  requiredPermissions: Array<{\n    resource: ResourceType\n    action: ActionType\n    resourceId?: string\n  }>\n) => {\n  const PermissionWrappedComponent: React.FC<P> = (props) => {\n    return (\n      <PermissionChecker\n        resource={requiredPermissions[0].resource}\n        action={requiredPermissions[0].action}\n        resourceId={requiredPermissions[0].resourceId}\n        fallback={\n          <div className=\"text-center py-8\" data-testid=\"permission-denied\">\n            <div className=\"text-gray-400 mb-2\">\n              <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 15v2m0 0v3m0-3h3m-3 0h-3m-3-9a9 9 0 1118 0 9 9 0 01-18 0z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-1\">Access Restricted</h3>\n            <p className=\"text-sm text-gray-500\">\n              You don't have permission to access this resource.\n            </p>\n          </div>\n        }\n      >\n        <Component {...props} />\n      </PermissionChecker>\n    )\n  }\n\n  PermissionWrappedComponent.displayName = `withPermissionCheck(${Component.displayName || Component.name})`\n\n  return PermissionWrappedComponent\n}\n\n/**\n * Utility component for rendering content based on role\n */\nexport interface RoleGuardProps {\n  allowedRoles: string[]\n  children: React.ReactNode\n  fallback?: React.ReactNode\n  userRoles?: string[]\n}\n\nexport const RoleGuard: React.FC<RoleGuardProps> = ({\n  allowedRoles,\n  children,\n  fallback = null,\n  userRoles = [],\n}) => {\n  const hasRequiredRole = allowedRoles.some(role => userRoles.includes(role))\n\n  if (!hasRequiredRole) {\n    return <>{fallback}</>\n  }\n\n  return <>{children}</>\n}\n\n/**\n * Component for rendering permission-sensitive UI elements\n */\nexport interface PermissionButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  resource: ResourceType\n  action: ActionType\n  resourceId?: string\n  organizationId?: string\n  fallbackText?: string\n  hideWhenNoPermission?: boolean\n}\n\nexport const PermissionButton: React.FC<PermissionButtonProps> = ({\n  resource,\n  action,\n  resourceId,\n  organizationId,\n  fallbackText = 'Not Authorized',\n  hideWhenNoPermission = false,\n  children,\n  ...buttonProps\n}) => {\n  return (\n    <PermissionChecker\n      resource={resource}\n      action={action}\n      resourceId={resourceId}\n      organizationId={organizationId}\n      fallback={\n        hideWhenNoPermission ? null : (\n          <button\n            {...buttonProps}\n            disabled={true}\n            title=\"You don't have permission for this action\"\n            className={`${buttonProps.className || ''} opacity-50 cursor-not-allowed`}\n          >\n            {fallbackText}\n          </button>\n        )\n      }\n    >\n      <button {...buttonProps}>\n        {children}\n      </button>\n    </PermissionChecker>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/error/EnhancedErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1431,1433],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":95,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":95,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2555,2557],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":318,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":318,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9809,9811],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | Error`.","line":340,"column":35,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":340,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":350,"column":16,"nodeType":"MemberExpression","messageId":"voidReturnProperty","endLine":350,"endColumn":49},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":350,"column":16,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":350,"endColumn":49},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":351,"column":21,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":351,"endColumn":59},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":357,"column":18,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":357,"endColumn":51},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":358,"column":23,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":358,"endColumn":61}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\n// Error types that can be handled differently\ninterface ErrorDetails {\n  name: string;\n  message: string;\n  stack?: string;\n  componentStack?: string;\n  correlationId?: string;\n  timestamp: number;\n  userAgent: string;\n  url: string;\n  userId?: string;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorDetails: ErrorDetails | null;\n  errorId: string | null;\n  retryCount: number;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: (error: ErrorDetails, retry: () => void) => ReactNode;\n  onError?: (error: ErrorDetails) => void;\n  maxRetries?: number;\n  enableErrorReporting?: boolean;\n}\n\n// Error reporting service\nclass ErrorReportingService {\n  private static correlationId: string | null = null;\n\n  static setCorrelationId(id: string): void {\n    this.correlationId = id;\n  }\n\n  static async reportError(errorDetails: ErrorDetails): Promise<void> {\n    try {\n      // Report to your error tracking service (e.g., Sentry, LogRocket, etc.)\n      if (import.meta.env.PROD) {\n        await fetch('/api/v1/errors', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Correlation-ID': this.correlationId || crypto.randomUUID(),\n          },\n          body: JSON.stringify(errorDetails),\n        });\n      } else {\n        console.error('Error Boundary Report:', errorDetails);\n      }\n    } catch (reportingError) {\n      console.error('Failed to report error:', reportingError);\n    }\n  }\n\n  static generateErrorId(): string {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport class EnhancedErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  private retryTimeouts: NodeJS.Timeout[] = [];\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      error: null,\n      errorDetails: null,\n      errorId: null,\n      retryCount: 0,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    const errorDetails: ErrorDetails = {\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack || undefined,\n      correlationId: this.generateCorrelationId(),\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      userId: this.getCurrentUserId(),\n    };\n\n    const errorId = ErrorReportingService.generateErrorId();\n\n    this.setState({\n      errorDetails,\n      errorId,\n    });\n\n    // Report error if enabled\n    if (this.props.enableErrorReporting !== false) {\n      ErrorReportingService.reportError(errorDetails)\n        .catch(reportingError => {\n          console.error('Error reporting failed:', reportingError);\n        });\n    }\n\n    // Call custom error handler\n    this.props.onError?.(errorDetails);\n\n    // Log to console in development\n    if (import.meta.env.DEV) {\n      console.group('🚨 Error Boundary Caught Error');\n      console.error('Error:', error);\n      console.error('Component Stack:', errorInfo.componentStack);\n      console.error('Error Details:', errorDetails);\n      console.groupEnd();\n    }\n  }\n\n  componentWillUnmount(): void {\n    // Clean up any pending retry timeouts\n    this.retryTimeouts.forEach(timeout => clearTimeout(timeout));\n  }\n\n  private generateCorrelationId(): string {\n    return crypto.randomUUID();\n  }\n\n  private getCurrentUserId(): string | undefined {\n    // Get from your auth store/context\n    try {\n      const userData = localStorage.getItem('user');\n      if (userData) {\n        const user = JSON.parse(userData) as { id?: string };\n        return user.id;\n      }\n    } catch {\n      // Ignore parsing errors\n    }\n    return undefined;\n  }\n\n  private handleRetry = (): void => {\n    const maxRetries = this.props.maxRetries ?? 3;\n\n    if (this.state.retryCount >= maxRetries) {\n      return;\n    }\n\n    // Add exponential backoff\n    const delay = Math.pow(2, this.state.retryCount) * 1000;\n\n    const timeout = setTimeout(() => {\n      this.setState(prevState => ({\n        hasError: false,\n        error: null,\n        errorDetails: null,\n        errorId: null,\n        retryCount: prevState.retryCount + 1,\n      }));\n    }, delay);\n\n    this.retryTimeouts.push(timeout);\n  };\n\n  private handleReload = (): void => {\n    window.location.reload();\n  };\n\n  private handleReportIssue = (): void => {\n    const { errorDetails, errorId } = this.state;\n\n    if (!errorDetails || !errorId) return;\n\n    const issueBody = `\nError ID: ${errorId}\nCorrelation ID: ${errorDetails.correlationId}\nTimestamp: ${new Date(errorDetails.timestamp).toISOString()}\nURL: ${errorDetails.url}\nUser Agent: ${errorDetails.userAgent}\n\nError: ${errorDetails.name}: ${errorDetails.message}\n\nStack Trace:\n${errorDetails.stack}\n\nComponent Stack:\n${errorDetails.componentStack}\n    `.trim();\n\n    const githubUrl = `https://github.com/your-org/your-repo/issues/new?title=${encodeURIComponent(\n      `Error: ${errorDetails.name} - ${errorDetails.message}`\n    )}&body=${encodeURIComponent(issueBody)}`;\n\n    window.open(githubUrl, '_blank');\n  };\n\n  render(): ReactNode {\n    const { hasError, errorDetails, errorId, retryCount } = this.state;\n    const { children, fallback, maxRetries = 3 } = this.props;\n\n    if (hasError && errorDetails) {\n      // Use custom fallback if provided\n      if (fallback) {\n        return fallback(errorDetails, this.handleRetry);\n      }\n\n      // Default error UI\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 px-4\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 h-12 w-12 text-red-500\">\n                <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n                  />\n                </svg>\n              </div>\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                Something went wrong\n              </CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                We encountered an unexpected error. Don&apos;t worry, we&apos;ve been notified.\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              {/* Error details for development */}\n              {import.meta.env.DEV && (\n                <div className=\"bg-gray-100 rounded-lg p-3\">\n                  <details className=\"text-sm\">\n                    <summary className=\"cursor-pointer font-medium text-gray-700 hover:text-gray-900\">\n                      Error Details (Development)\n                    </summary>\n                    <div className=\"mt-2 space-y-2 text-xs font-mono text-gray-600\">\n                      <div><strong>Error ID:</strong> {errorId}</div>\n                      <div><strong>Correlation ID:</strong> {errorDetails.correlationId}</div>\n                      <div><strong>Type:</strong> {errorDetails.name}</div>\n                      <div><strong>Message:</strong> {errorDetails.message}</div>\n                      <div><strong>Retry Count:</strong> {retryCount}/{maxRetries}</div>\n                    </div>\n                  </details>\n                </div>\n              )}\n\n              {/* Action buttons */}\n              <div className=\"flex flex-col space-y-2\">\n                {retryCount < maxRetries && (\n                  <Button onClick={this.handleRetry} className=\"w-full\">\n                    Try Again {retryCount > 0 && `(${retryCount}/${maxRetries})`}\n                  </Button>\n                )}\n\n                <Button\n                  variant=\"outline\"\n                  onClick={this.handleReload}\n                  className=\"w-full\"\n                >\n                  Reload Page\n                </Button>\n\n                {import.meta.env.DEV && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={this.handleReportIssue}\n                    className=\"w-full text-xs\"\n                  >\n                    Report Issue on GitHub\n                  </Button>\n                )}\n              </div>\n\n              {/* Error ID for user reference */}\n              <div className=\"text-center\">\n                <p className=\"text-xs text-gray-500\">\n                  Error ID: <code className=\"bg-gray-100 px-1 rounded\">{errorId}</code>\n                </p>\n                <p className=\"text-xs text-gray-400 mt-1\">\n                  Reference this ID when contacting support\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\n// Higher-order component for easy error boundary wrapping\nexport function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n  errorBoundaryProps?: Omit<ErrorBoundaryProps, 'children'>\n) {\n  const WrappedComponent = (props: P) => (\n    <EnhancedErrorBoundary {...errorBoundaryProps}>\n      <Component {...props} />\n    </EnhancedErrorBoundary>\n  );\n\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n\n  return WrappedComponent;\n}\n\n// Hook for throwing errors that will be caught by error boundaries\nexport function useErrorHandler() {\n  return React.useCallback((error: Error | string) => {\n    const errorToThrow = typeof error === 'string' ? new Error(error) : error;\n\n    // Use React's error boundary mechanism\n    throw errorToThrow;\n  }, []);\n}\n\n// Async error handler hook\nexport function useAsyncErrorHandler() {\n  const throwError = useErrorHandler();\n\n  return React.useCallback((asyncFn: () => Promise<void>) => {\n    return asyncFn().catch(error => {\n      // Convert async errors to sync errors for error boundaries\n      setTimeout(() => throwError(error), 0);\n    });\n  }, [throwError]);\n}\n\n// Context for error boundary configuration\nexport const ErrorBoundaryContext = React.createContext<{\n  reportError: (error: ErrorDetails) => void;\n  setCorrelationId: (id: string) => void;\n}>({\n  reportError: ErrorReportingService.reportError,\n  setCorrelationId: ErrorReportingService.setCorrelationId,\n});\n\n// Provider component\nexport function ErrorBoundaryProvider({ children }: { children: ReactNode }) {\n  const contextValue = React.useMemo(() => ({\n    reportError: ErrorReportingService.reportError,\n    setCorrelationId: ErrorReportingService.setCorrelationId,\n  }), []);\n\n  return (\n    <ErrorBoundaryContext.Provider value={contextValue}>\n      {children}\n    </ErrorBoundaryContext.Provider>\n  );\n}\n\n// Hook to access error boundary context\nexport function useErrorBoundary() {\n  const context = React.useContext(ErrorBoundaryContext);\n\n  if (!context) {\n    throw new Error('useErrorBoundary must be used within an ErrorBoundaryProvider');\n  }\n\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/layouts/AccessibleDashboardLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRef' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useScreenReader' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useSkipLinks' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prefersReducedMotion' is assigned a value but never used.","line":76,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an error typed value.","line":79,"column":11,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":79,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an error typed value.","line":79,"column":35,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":79,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an error typed value.","line":79,"column":55,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":79,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an error typed value.","line":79,"column":69,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":79,"endColumn":77},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2549,2549],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2549,2549],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":87,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":87,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":93,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":96,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":96,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":99,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":107,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":107,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":112,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":112,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":122,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":122,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'announce' and 'closeSidebar'. Either include them or remove the dependency array.","line":133,"column":6,"nodeType":"ArrayExpression","endLine":133,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [announce, closeSidebar, sidebarOpen]","fix":{"range":[3732,3745],"text":"[announce, closeSidebar, sidebarOpen]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":168,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":168,"endColumn":13},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'announce' and 'getCurrentPageTitle'. Either include them or remove the dependency array.","line":169,"column":6,"nodeType":"ArrayExpression","endLine":169,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [announce, getCurrentPageTitle, location.pathname]","fix":{"range":[4740,4759],"text":"[announce, getCurrentPageTitle, location.pathname]"}}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":193,"column":13,"nodeType":"JSXOpeningElement","endLine":197,"endColumn":15},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":193,"column":13,"nodeType":"JSXOpeningElement","endLine":197,"endColumn":15},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":217,"column":28,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":217,"endColumn":42},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":223,"column":21,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":223,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6913,6913],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6913,6913],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":235,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":235,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":239,"column":28,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":239,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10323,10326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10323,10326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used.","line":324,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":324,"endColumn":11},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","line":349,"column":9,"nodeType":"JSXOpeningElement","endLine":349,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":395,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":395,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":395,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":395,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":395,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":395,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13316,13318],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":400,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":400,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":400,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":400,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13519,13521],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":403,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":403,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":403,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":403,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13638,13640],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react'\nimport { Outlet, Link, useLocation, useNavigate } from 'react-router-dom'\nimport {\n  HomeIcon,\n  BuildingOfficeIcon,\n  CreditCardIcon,\n  DocumentTextIcon,\n  Cog6ToothIcon,\n  ArrowRightOnRectangleIcon,\n  Bars3Icon,\n  XMarkIcon,\n  UserCircleIcon,\n  LockClosedIcon,\n  MagnifyingGlassIcon,\n} from '@heroicons/react/24/outline'\n\nimport { useAppDispatch, useAppSelector } from '../../store/hooks'\nimport { logout, selectCurrentUser } from '../../store/slices/authSlice'\nimport { useLogoutMutation } from '../../store/api/authApi'\nimport { logger } from '../../utils/logger'\nimport {\n  useFocusTrap,\n  useKeyboardNavigation,\n  useScreenReader,\n  useReducedMotion,\n  useAccessibilityContext,\n  useSkipLinks\n} from '../../hooks/useAccessibility'\nimport { CommandPalette } from '../ui/InteractionPatterns'\n\nimport { Button } from '@/components/ui/button'\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar'\nimport { cn } from '@/lib/utils'\n\nconst navigation = [\n  {\n    name: 'Dashboard',\n    href: '/dashboard',\n    icon: HomeIcon,\n    description: 'View your dashboard overview and statistics'\n  },\n  {\n    name: 'Organizations',\n    href: '/organizations',\n    icon: BuildingOfficeIcon,\n    description: 'Manage your organizations and memberships'\n  },\n  {\n    name: 'Payments',\n    href: '/payments',\n    icon: CreditCardIcon,\n    description: 'View payment history and manage payment methods'\n  },\n  {\n    name: 'Subscription',\n    href: '/subscription',\n    icon: DocumentTextIcon,\n    description: 'Manage your subscription and billing'\n  },\n  {\n    name: 'Settings',\n    href: '/settings',\n    icon: Cog6ToothIcon,\n    description: 'Configure your account settings and preferences'\n  },\n]\n\nconst AccessibleDashboardLayout: React.FC = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const dispatch = useAppDispatch()\n  const user = useAppSelector(selectCurrentUser)\n  const [logoutMutation] = useLogoutMutation()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [commandPaletteOpen, setCommandPaletteOpen] = useState(false)\n  const prefersReducedMotion = useReducedMotion()\n\n  // Accessibility hooks\n  const { announce, components: { AnnouncementRegion, StatusRegion, SkipLink } } = useAccessibilityContext()\n  const sidebarFocusTrap = useFocusTrap(sidebarOpen)\n  const { containerRef: navRef } = useKeyboardNavigation({\n    direction: 'vertical',\n    onSelect: (index) => {\n      const link = navigation[index]\n      if (link) {\n        navigate(link.href)\n        announce(`Navigating to ${link.name}`)\n      }\n    }\n  })\n\n  const handleLogout = async () => {\n    announce('Logging out...')\n    try {\n      await logoutMutation().unwrap()\n      announce('Successfully logged out')\n    } catch (error) {\n      logger.error('Logout failed:', error)\n      announce('Logout failed. Please try again.')\n    } finally {\n      dispatch(logout())\n    }\n  }\n\n  const openSidebar = () => {\n    setSidebarOpen(true)\n    announce('Navigation menu opened')\n  }\n\n  const closeSidebar = () => {\n    setSidebarOpen(false)\n    announce('Navigation menu closed')\n  }\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Command palette shortcut (Cmd+K or Ctrl+K)\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault()\n        setCommandPaletteOpen(true)\n        announce('Command palette opened')\n      }\n\n      // Close sidebar with Escape\n      if (e.key === 'Escape' && sidebarOpen) {\n        closeSidebar()\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [sidebarOpen])\n\n  // Command palette items\n  const commandItems = [\n    ...navigation.map(item => ({\n      id: item.href,\n      title: `Go to ${item.name}`,\n      subtitle: item.description,\n      action: () => navigate(item.href),\n      icon: item.icon,\n      group: 'Navigation'\n    })),\n    {\n      id: 'logout',\n      title: 'Sign Out',\n      subtitle: 'Log out of your account',\n      action: handleLogout,\n      icon: ArrowRightOnRectangleIcon,\n      group: 'Account'\n    }\n  ]\n\n  // Get current page title for accessibility\n  const getCurrentPageTitle = () => {\n    const current = navigation.find(item =>\n      location.pathname === item.href ||\n      (item.href !== '/dashboard' && location.pathname.startsWith(item.href + '/')) ||\n      (item.href === '/dashboard' && location.pathname === '/')\n    )\n    return current ? current.name : 'Payment Platform'\n  }\n\n  // Announce page changes\n  useEffect(() => {\n    const pageTitle = getCurrentPageTitle()\n    announce(`${pageTitle} page loaded`)\n  }, [location.pathname])\n\n  return (\n    <>\n      {/* Skip Links */}\n      <SkipLink href=\"#main-content\">Skip to main content</SkipLink>\n      <SkipLink href=\"#navigation\">Skip to navigation</SkipLink>\n\n      {/* Live Regions */}\n      <AnnouncementRegion />\n      <StatusRegion />\n\n      <div className=\"h-screen flex bg-gray-50\">\n        <div className=\"flex w-full\">\n          {/* Mobile sidebar */}\n          <div\n            className={cn(\n              'fixed inset-0 flex z-50 md:hidden transition-opacity duration-300',\n              sidebarOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'\n            )}\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"sidebar-title\"\n          >\n            <div\n              className=\"fixed inset-0 bg-gray-900/20 backdrop-blur-sm\"\n              onClick={closeSidebar}\n              aria-label=\"Close navigation menu\"\n            />\n            <div\n              ref={sidebarFocusTrap}\n              className={cn(\n                'relative flex-1 flex flex-col max-w-xs w-full transform transition-transform duration-300 ease-in-out',\n                sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n              )}\n            >\n              <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\n                <button\n                  type=\"button\"\n                  className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-gray-300 text-gray-600 hover:text-gray-800 bg-white/80 backdrop-blur-sm\"\n                  onClick={closeSidebar}\n                  aria-label=\"Close navigation menu\"\n                >\n                  <XMarkIcon className=\"h-6 w-6\" />\n                </button>\n              </div>\n              <div className=\"backdrop-blur-xl bg-white/80 border border-gray-200/50 rounded-r-2xl h-full shadow-xl\">\n                <SidebarContent\n                  onLogout={handleLogout}\n                  currentPath={location.pathname}\n                  user={user}\n                  isMobile\n                  navRef={navRef}\n                  onNavigate={(path) => {\n                    navigate(path)\n                    closeSidebar()\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Desktop sidebar */}\n          <div className=\"hidden md:flex md:w-64 md:flex-col\">\n            <div className=\"bg-white border-r border-gray-200 flex-1 flex flex-col min-h-0\">\n              <SidebarContent\n                onLogout={handleLogout}\n                currentPath={location.pathname}\n                user={user}\n                navRef={navRef}\n                onNavigate={navigate}\n              />\n            </div>\n          </div>\n\n          {/* Main content */}\n          <div className=\"flex flex-col flex-1 overflow-hidden\">\n            {/* Mobile header */}\n            <div className=\"md:hidden\">\n              <div className=\"relative z-10 flex-shrink-0 flex h-16 backdrop-blur-xl bg-white/90 border-b border-gray-200/50 shadow-sm\">\n                <button\n                  type=\"button\"\n                  className=\"px-4 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\n                  onClick={openSidebar}\n                  aria-label=\"Open navigation menu\"\n                  aria-expanded={sidebarOpen}\n                  aria-controls=\"mobile-sidebar\"\n                >\n                  <Bars3Icon className=\"h-6 w-6\" />\n                </button>\n                <div className=\"flex-1 px-4 flex justify-between items-center\">\n                  <div className=\"flex items-center space-x-3\">\n                    <LockClosedIcon className=\"h-6 w-6 text-gray-700\" aria-hidden=\"true\" />\n                    <h1 className=\"text-lg font-semibold text-gray-900\">\n                      Payment Platform\n                    </h1>\n                  </div>\n                  {user && (\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-sm text-gray-700\">{user.name}</span>\n                      <UserCircleIcon className=\"h-8 w-8 text-gray-500\" aria-hidden=\"true\" />\n                    </div>\n                  )}\n\n                  {/* Command palette trigger */}\n                  <button\n                    onClick={() => setCommandPaletteOpen(true)}\n                    className=\"ml-3 p-2 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-md\"\n                    aria-label=\"Open command palette\"\n                    title=\"Open command palette (⌘K)\"\n                  >\n                    <MagnifyingGlassIcon className=\"h-5 w-5\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* Page content */}\n            <main\n              id=\"main-content\"\n              className=\"flex-1 overflow-y-auto p-4 focus:outline-none\"\n              tabIndex={-1}\n              role=\"main\"\n              aria-label={`${getCurrentPageTitle()} main content`}\n            >\n              <Outlet />\n            </main>\n          </div>\n        </div>\n\n        {/* Command Palette */}\n        <CommandPalette\n          isOpen={commandPaletteOpen}\n          onClose={() => setCommandPaletteOpen(false)}\n          items={commandItems}\n          placeholder=\"Search for actions, pages, or settings...\"\n        />\n      </div>\n    </>\n  )\n}\n\ninterface SidebarContentProps {\n  onLogout: () => void\n  currentPath: string\n  user: any\n  isMobile?: boolean\n  navRef?: React.RefObject<HTMLElement>\n  onNavigate: (path: string) => void\n}\n\nconst SidebarContent: React.FC<SidebarContentProps> = ({\n  onLogout,\n  currentPath,\n  user,\n  isMobile = false,\n  navRef,\n  onNavigate\n}) => {\n  return (\n    <>\n      {/* Logo */}\n      <div className=\"flex items-center flex-shrink-0 px-4 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 gradient-brand rounded-lg flex items-center justify-center\">\n            <LockClosedIcon className=\"h-4 w-4 text-white\" aria-hidden=\"true\" />\n          </div>\n          <span className=\"ml-2 text-base font-semibold text-gray-900\">\n            Payment Platform\n          </span>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav\n        id=\"navigation\"\n        className=\"flex-1 flex flex-col overflow-y-auto px-3 py-3\"\n        aria-label=\"Main navigation\"\n        ref={navRef}\n      >\n        <ul className=\"flex-1 space-y-1\" role=\"list\">\n          {navigation.map((item, index) => {\n            const isActive = currentPath === item.href ||\n              (item.href !== '/dashboard' && currentPath.startsWith(item.href + '/')) ||\n              (item.href === '/dashboard' && currentPath === '/')\n\n            return (\n              <li key={item.name} role=\"none\">\n                <Link\n                  to={item.href}\n                  data-keyboard-nav\n                  onClick={() => onNavigate(item.href)}\n                  className={cn(\n                    'group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset',\n                    isActive\n                      ? 'bg-primary-50 text-primary-700 border-r-2 border-primary-600'\n                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                  )}\n                  aria-current={isActive ? 'page' : undefined}\n                  aria-describedby={`nav-desc-${index}`}\n                >\n                  <item.icon\n                    className={cn(\n                      'mr-3 flex-shrink-0 h-4 w-4',\n                      isActive\n                        ? 'text-primary-600'\n                        : 'text-gray-400 group-hover:text-gray-600'\n                    )}\n                    aria-hidden=\"true\"\n                  />\n                  {item.name}\n                  <span id={`nav-desc-${index}`} className=\"sr-only\">\n                    {item.description}\n                  </span>\n                </Link>\n              </li>\n            )\n          })}\n        </ul>\n      </nav>\n\n      {/* User section */}\n      <div className=\"flex-shrink-0 border-t border-gray-200 p-3\">\n        <div className=\"flex items-center w-full p-2 rounded-lg hover:bg-gray-50 transition-colors\">\n          <Avatar className=\"h-7 w-7\">\n            <AvatarFallback className=\"bg-gray-500 text-white text-xs\">\n              {user?.name?.charAt(0) || 'U'}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"ml-2 flex-1 min-w-0\">\n            <p className=\"text-xs font-medium text-gray-900 truncate\">\n              {user?.name || 'Demo User'}\n            </p>\n            <p className=\"text-xs text-gray-600 truncate\">\n              {user?.email || 'demo@example.com'}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onLogout}\n            className=\"flex-shrink-0 h-7 w-7 p-0 text-gray-500 hover:text-gray-700 focus:ring-2 focus:ring-blue-500\"\n            aria-label=\"Sign out\"\n          >\n            <ArrowRightOnRectangleIcon className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default AccessibleDashboardLayout","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/layouts/AuthLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/layouts/DashboardLayout.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":23,"column":1,"nodeType":"ImportDeclaration","endLine":23,"endColumn":33,"fix":{"range":[717,717],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../../store/slices/authSlice` type import should occur before import of `@/components/ui/button`","line":24,"column":1,"nodeType":"ImportDeclaration","endLine":24,"endColumn":57,"fix":{"range":[573,775],"text":"import type { User } from '../../store/slices/authSlice'\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { cn } from \"@/lib/utils\"\n"}},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":85,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":85,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":98,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":98,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":129,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":129,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4861,4892],"text":"(user.firstName ?? user.lastName)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":129,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":129,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4893,4895],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'User' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":151,"column":9,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":151,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used.","line":159,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":159,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":215,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":215,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `error` typed value.","line":215,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":215,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":215,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7646,7701],"text":"(user?.firstName?.charAt(0) ?? user?.lastName?.charAt(0))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":215,"column":46,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":215,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `error` typed value.","line":215,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":60},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":215,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":215,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7702,7704],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `error` typed value.","line":220,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `error` typed value.","line":220,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `error` typed value.","line":221,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `error` typed value.","line":221,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `error` typed value.","line":222,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":222,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":222,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8001,8034],"text":"(user?.firstName ?? user?.lastName)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `error` typed value.","line":222,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":52},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":222,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":222,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8035,8037],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":225,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":225,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":225,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8154,8156],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { Outlet, Link, useLocation } from 'react-router-dom'\nimport {\n  HomeIcon,\n  BuildingOfficeIcon,\n  CreditCardIcon,\n  DocumentTextIcon,\n  Cog6ToothIcon,\n  ArrowRightOnRectangleIcon,\n  Bars3Icon,\n  XMarkIcon,\n  UserCircleIcon,\n  LockClosedIcon,\n} from '@heroicons/react/24/outline'\n\nimport { useAppDispatch, useAppSelector } from '../../store/hooks'\nimport { logout, selectCurrentUser } from '../../store/slices/authSlice'\nimport { useLogoutMutation } from '../../store/api/authApi'\nimport { logger } from '../../utils/logger'\n\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { cn } from \"@/lib/utils\"\nimport type { User } from '../../store/slices/authSlice'\n\nconst navigation = [\n  { name: 'Dashboard', href: '/dashboard', icon: HomeIcon },\n  { name: 'Organizations', href: '/organizations', icon: BuildingOfficeIcon },\n  { name: 'Payments', href: '/payments', icon: CreditCardIcon },\n  { name: 'Subscription', href: '/subscription', icon: DocumentTextIcon },\n  { name: 'Settings', href: '/settings', icon: Cog6ToothIcon },\n]\n\nconst DashboardLayout: React.FC = () => {\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const user = useAppSelector(selectCurrentUser)\n  const [logoutMutation] = useLogoutMutation()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n\n  const handleLogout = async () => {\n    try {\n      await logoutMutation().unwrap()\n    } catch (error) {\n      logger.error('Logout failed:', error)\n    } finally {\n      dispatch(logout())\n    }\n  }\n\n  return (\n    <div className=\"h-screen flex bg-gray-50\">\n      <div className=\"flex w-full\">\n        {/* Mobile sidebar */}\n        <div\n          className={cn(\n            'fixed inset-0 flex z-50 md:hidden',\n            sidebarOpen ? 'block' : 'hidden'\n          )}\n        >\n          <div\n            className=\"fixed inset-0 bg-gray-900/20 backdrop-blur-sm\"\n            onClick={() => setSidebarOpen(false)}\n            onKeyDown={(e) => {\n              if (e.key === 'Escape') {\n                setSidebarOpen(false)\n              }\n            }}\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Close sidebar\"\n          />\n          <div className=\"relative flex-1 flex flex-col max-w-xs w-full\">\n            <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\n              <button\n                type=\"button\"\n                className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-gray-300 text-gray-600 hover:text-gray-800 bg-white/80 backdrop-blur-sm\"\n                onClick={() => setSidebarOpen(false)}\n              >\n                <XMarkIcon className=\"h-6 w-6\" />\n              </button>\n            </div>\n            <div className=\"backdrop-blur-xl bg-white/80 border border-gray-200/50 rounded-r-2xl h-full shadow-xl\">\n              <SidebarContent\n                onLogout={handleLogout}\n                currentPath={location.pathname}\n                user={user}\n                isMobile\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Desktop sidebar */}\n        <div className=\"hidden md:flex md:w-64 md:flex-col\">\n          <div className=\"bg-white border-r border-gray-200 flex-1 flex flex-col min-h-0\">\n            <SidebarContent\n              onLogout={handleLogout}\n              currentPath={location.pathname}\n              user={user}\n            />\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          {/* Mobile header */}\n          <div className=\"md:hidden\">\n            <div className=\"relative z-10 flex-shrink-0 flex h-16 backdrop-blur-xl bg-white/90 border-b border-gray-200/50 shadow-sm\">\n              <button\n                type=\"button\"\n                className=\"px-4 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\n                onClick={() => setSidebarOpen(true)}\n              >\n                <Bars3Icon className=\"h-6 w-6\" />\n              </button>\n              <div className=\"flex-1 px-4 flex justify-between items-center\">\n                <div className=\"flex items-center space-x-3\">\n                  <LockClosedIcon className=\"h-6 w-6 text-gray-700\" />\n                  <h1 className=\"text-lg font-semibold text-gray-900\">\n                    Payment Platform\n                  </h1>\n                </div>\n                {user && (\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-sm text-gray-700\">\n                      {user.firstName && user.lastName\n                        ? `${user.firstName} ${user.lastName}`\n                        : user.firstName || user.lastName || 'User'}\n                    </span>\n                    <UserCircleIcon className=\"h-8 w-8 text-gray-500\" />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Page content */}\n          <main className=\"flex-1 overflow-y-auto p-4\">\n            <Outlet />\n          </main>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface SidebarContentProps {\n  onLogout: () => void\n  currentPath: string\n  user: User | null\n  isMobile?: boolean\n}\n\nconst SidebarContent: React.FC<SidebarContentProps> = ({\n  onLogout,\n  currentPath,\n  user,\n  isMobile = false,\n}) => {\n  return (\n    <>\n      {/* Logo */}\n      <div className=\"flex items-center flex-shrink-0 px-4 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 gradient-brand rounded-lg flex items-center justify-center\">\n            <LockClosedIcon className=\"h-4 w-4 text-white\" />\n          </div>\n          <span className=\"ml-2 text-base font-semibold text-gray-900\">\n            Payment Platform\n          </span>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex-1 flex flex-col overflow-y-auto px-3 py-3\">\n        <nav className=\"flex-1 space-y-1\">\n          {navigation.map(item => {\n            const isActive = currentPath === item.href || \n              (item.href !== '/dashboard' && currentPath.startsWith(item.href + '/')) ||\n              (item.href === '/dashboard' && currentPath === '/')\n\n            return (\n              <Link\n                key={item.name}\n                to={item.href}\n                data-testid={`nav-${item.name.toLowerCase()}`}\n                className={cn(\n                  'group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors',\n                  isActive\n                    ? 'bg-primary-50 text-primary-700 border-r-2 border-primary-600'\n                    : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                )}\n              >\n                <item.icon\n                  className={cn(\n                    'mr-3 flex-shrink-0 h-4 w-4',\n                    isActive\n                      ? 'text-primary-600'\n                      : 'text-gray-400 group-hover:text-gray-600'\n                  )}\n                />\n                {item.name}\n              </Link>\n            )\n          })}\n        </nav>\n      </div>\n\n      {/* User section */}\n      <div className=\"flex-shrink-0 border-t border-gray-200 p-3\">\n        <div className=\"flex items-center w-full p-2 rounded-lg hover:bg-gray-50 transition-colors\">\n          <Avatar className=\"h-7 w-7\">\n            <AvatarFallback className=\"bg-gray-500 text-white text-xs\">\n              {user?.firstName?.charAt(0) || user?.lastName?.charAt(0) || 'U'}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"ml-2 flex-1 min-w-0\">\n            <p className=\"text-xs font-medium text-gray-900 truncate\">\n              {user?.firstName && user?.lastName\n                ? `${user.firstName} ${user.lastName}`\n                : user?.firstName || user?.lastName || 'Demo User'}\n            </p>\n            <p className=\"text-xs text-gray-600 truncate\">\n              {user?.email || 'demo@example.com'}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onLogout}\n            className=\"flex-shrink-0 h-7 w-7 p-0 text-gray-500 hover:text-gray-700\"\n            title=\"Sign out\"\n          >\n            <ArrowRightOnRectangleIcon className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default DashboardLayout\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/organizations/CreateOrganizationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1707,1710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1707,1710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1723,1726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1723,1726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'onSave' has no 'await' expression.","line":85,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":85,"endColumn":19,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2841,2847],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":87,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .slug on an `any` value.","line":87,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":87,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":105,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timestamp on an `any` value.","line":107,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":108,"column":30,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":108,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":108,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":46},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":108,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":108,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3623,3625],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":109,"column":30,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":109,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .slug on an `any` value.","line":109,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":46},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3676,3678],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":110,"column":37,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":110,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":110,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":110,"endColumn":60},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":110,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":110,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3743,3745],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getFieldState' function makes the dependencies of useEffect Hook (at line 163) change on every render. To fix this, wrap the definition of 'getFieldState' in its own useCallback() Hook.","line":124,"column":9,"nodeType":"VariableDeclarator","endLine":134,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'getFieldState' in its own useCallback() Hook.","fix":{"range":[4192,4704],"text":"useCallback((fieldName: keyof CreateOrganizationForm) => {\n    const hasError = !!errors[fieldName]\n    const isTouched = fieldTouched[fieldName] || !!dirtyFields[fieldName]\n    const hasValue = fieldName === 'name' ? !!watchedName.trim() :\n                    fieldName === 'slug' ? !!watchedSlug.trim() :\n                    fieldName === 'description' ? !!watchedDescription?.trim() : false\n\n    if (hasError && isTouched) return 'error'\n    if (!hasError && isTouched && hasValue) return 'valid'\n    return 'default'\n  })"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":146,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":146,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5017,5017],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5017,5017],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":201,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'orgData' is defined but never used.","line":211,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":41},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":252,"column":9,"nodeType":"JSXOpeningElement","endLine":255,"endColumn":11},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":252,"column":9,"nodeType":"JSXOpeningElement","endLine":255,"endColumn":11},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":302,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":302,"endColumn":50},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":476,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":476,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19535,19537],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport {\n  XMarkIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  InformationCircleIcon\n} from '@heroicons/react/24/outline'\nimport { toast } from 'react-hot-toast'\nimport { clsx } from 'clsx'\n\nimport { useCreateOrganizationMutation } from '../../store/api/organizationApi'\nimport { parseApiError } from '../../utils/apiError'\nimport { logger } from '../../utils/logger'\nimport { useAutoSave } from '../../hooks/useAutoSave'\nimport { AutoSaveIndicator, UnsavedChangesWarning } from '../ui/AutoSaveComponents'\nimport { useFormSubmissionNotifications } from '../../hooks/useNotificationIntegration'\n\nconst createOrganizationSchema = z.object({\n  name: z\n    .string()\n    .min(3, 'Name must be at least 3 characters')\n    .max(50, 'Name must be less than 50 characters')\n    .regex(/^[a-zA-Z0-9\\s-_.]+$/, 'Name can only contain letters, numbers, spaces, hyphens, underscores, and periods'),\n  slug: z\n    .string()\n    .min(3, 'Slug must be at least 3 characters')\n    .max(50, 'Slug must be less than 50 characters')\n    .regex(\n      /^[a-z0-9-]+$/,\n      'Only lowercase letters, numbers, and dashes allowed'\n    )\n    .refine(\n      slug => !slug.startsWith('-') && !slug.endsWith('-'),\n      'Cannot start or end with dash'\n    ),\n  description: z\n    .string()\n    .max(200, 'Keep description under 200 characters')\n    .optional(),\n})\n\ntype CreateOrganizationForm = z.infer<typeof createOrganizationSchema>\n\ninterface CreateOrganizationModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onOptimisticCreate?: (organization: any) => Promise<any>\n}\n\nconst CreateOrganizationModal: React.FC<CreateOrganizationModalProps> = ({\n  isOpen,\n  onClose,\n  onOptimisticCreate,\n}) => {\n  const [createOrganization, { isLoading }] = useCreateOrganizationMutation()\n  const [slugAvailability, setSlugAvailability] = useState<'unknown' | 'checking' | 'available' | 'taken'>('unknown')\n  const [fieldTouched, setFieldTouched] = useState<Record<string, boolean>>({})\n  const { submitFormWithNotifications } = useFormSubmissionNotifications()\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    trigger,\n    formState: { errors, isValid, dirtyFields },\n    reset,\n  } = useForm<CreateOrganizationForm>({\n    resolver: zodResolver(createOrganizationSchema),\n    mode: 'onBlur',\n    reValidateMode: 'onChange',\n  })\n\n  const watchedName = watch('name', '')\n  const watchedSlug = watch('slug', '')\n  const watchedDescription = watch('description', '')\n\n  // Auto-save form data to localStorage\n  const formData = { name: watchedName, slug: watchedSlug, description: watchedDescription }\n  const autoSave = useAutoSave(formData, {\n    delay: 2000,\n    onSave: async (data) => {\n      // Only save if there's actually some content and the modal is open\n      if (isOpen && (data.name || data.slug || data.description)) {\n        localStorage.setItem('createOrganizationDraft', JSON.stringify({\n          ...data,\n          timestamp: Date.now()\n        }))\n      }\n    },\n    onError: (error) => {\n      logger.error('Auto-save failed:', error)\n    }\n  })\n\n  // Load draft on modal open\n  useEffect(() => {\n    if (isOpen) {\n      const draft = localStorage.getItem('createOrganizationDraft')\n      if (draft) {\n        try {\n          const parsedDraft = JSON.parse(draft)\n          // Only load draft if it's less than 24 hours old\n          if (Date.now() - parsedDraft.timestamp < 86400000) {\n            setValue('name', parsedDraft.name || '')\n            setValue('slug', parsedDraft.slug || '')\n            setValue('description', parsedDraft.description || '')\n            toast.success('Draft restored from your last session')\n          } else {\n            localStorage.removeItem('createOrganizationDraft')\n          }\n        } catch (error) {\n          logger.error('Failed to parse organization draft:', error)\n          localStorage.removeItem('createOrganizationDraft')\n        }\n      }\n    }\n  }, [isOpen, setValue])\n\n  // Helper function to get field validation state\n  const getFieldState = (fieldName: keyof CreateOrganizationForm) => {\n    const hasError = !!errors[fieldName]\n    const isTouched = fieldTouched[fieldName] || !!dirtyFields[fieldName]\n    const hasValue = fieldName === 'name' ? !!watchedName.trim() :\n                    fieldName === 'slug' ? !!watchedSlug.trim() :\n                    fieldName === 'description' ? !!watchedDescription?.trim() : false\n\n    if (hasError && isTouched) return 'error'\n    if (!hasError && isTouched && hasValue) return 'valid'\n    return 'default'\n  }\n\n  // Auto-generate slug from name\n  useEffect(() => {\n    if (watchedName && !fieldTouched.slug) {\n      const slug = watchedName\n        .toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .substring(0, 50)\n      setValue('slug', slug)\n      trigger('slug') // Re-validate slug when auto-generated\n    }\n  }, [watchedName, setValue, trigger, fieldTouched.slug])\n\n  // Check slug availability (simulated - replace with real API call)\n  useEffect(() => {\n    if (watchedSlug.length >= 3 && getFieldState('slug') !== 'error') {\n      setSlugAvailability('checking')\n      const timer = setTimeout(() => {\n        // Simulate API call - replace with real endpoint\n        const isAvailable = !['admin', 'api', 'www', 'test', 'demo'].includes(watchedSlug.toLowerCase())\n        setSlugAvailability(isAvailable ? 'available' : 'taken')\n      }, 800)\n      return () => clearTimeout(timer)\n    } else {\n      setSlugAvailability('unknown')\n    }\n  }, [watchedSlug, getFieldState])\n\n  const handleFieldBlur = (fieldName: string) => {\n    setFieldTouched(prev => ({ ...prev, [fieldName]: true }))\n  }\n\n  const onSubmit = async (data: CreateOrganizationForm) => {\n    const organizationData = {\n      name: data.name,\n      slug: data.slug,\n      settings: data.description\n        ? { description: data.description }\n        : undefined,\n    }\n\n    if (onOptimisticCreate) {\n      // Use optimistic updates if callback is provided\n      const optimisticOrganization = {\n        id: `temp-${Date.now()}`, // Temporary ID\n        name: data.name,\n        slug: data.slug,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        // Add other required fields with defaults\n      }\n\n      try {\n        await onOptimisticCreate(optimisticOrganization)\n        localStorage.removeItem('createOrganizationDraft')\n        reset()\n        onClose()\n      } catch (err) {\n        const parsed = parseApiError(err)\n        logger.error('Failed to create organization:', parsed)\n        // Error already handled by optimistic updates hook\n      }\n    } else {\n      // Use enhanced notification system for regular submission\n      const result = await submitFormWithNotifications(\n        organizationData,\n        async (orgData) => {\n          return createOrganization(orgData).unwrap()\n        },\n        {\n          loadingTitle: 'Creating organization...',\n          successTitle: 'Organization created!',\n          successMessage: `\"${data.name}\" has been created successfully`,\n          errorTitle: 'Failed to create organization',\n          validateBeforeSubmit: (orgData) => {\n            // Additional validation if needed\n            if (slugAvailability === 'taken') {\n              return 'This organization slug is already taken. Please choose a different one.'\n            }\n            if (slugAvailability === 'checking') {\n              return 'Please wait while we check slug availability.'\n            }\n            return null\n          },\n          onSuccess: () => {\n            localStorage.removeItem('createOrganizationDraft')\n            reset()\n            onClose()\n          },\n          onError: (error) => {\n            logger.error('Failed to create organization:', error)\n          }\n        }\n      )\n    }\n  }\n\n  const handleClose = () => {\n    reset()\n    setSlugAvailability('unknown')\n    setFieldTouched({})\n    onClose()\n  }\n\n  const clearDraft = () => {\n    localStorage.removeItem('createOrganizationDraft')\n    reset()\n    toast.success('Draft cleared')\n  }\n\n  if (!isOpen) {return null}\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        <div\n          className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n          onClick={handleClose}\n        />\n\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\">\n          &#8203;\n        </span>\n\n        <div className=\"relative inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6\">\n          <div className=\"absolute top-0 right-0 pt-4 pr-4\">\n            <button\n              type=\"button\"\n              className=\"bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n              onClick={handleClose}\n            >\n              <XMarkIcon className=\"h-6 w-6\" />\n            </button>\n          </div>\n\n          <div className=\"sm:flex sm:items-start\">\n            <div className=\"w-full mt-3 text-center sm:mt-0 sm:text-left\">\n              {/* Header with auto-save indicator */}\n              <div className=\"flex justify-between items-start mb-2\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                  Create New Organization\n                </h3>\n                <AutoSaveIndicator\n                  status={autoSave.status}\n                  lastSaved={autoSave.lastSaved}\n                  error={autoSave.error}\n                  onRetry={autoSave.retry}\n                />\n              </div>\n\n              {/* Unsaved changes warning */}\n              <UnsavedChangesWarning\n                hasUnsavedChanges={autoSave.hasUnsavedChanges}\n                onSave={autoSave.save}\n                onDiscard={clearDraft}\n              />\n\n              <div className=\"mt-2\">\n                <p className=\"text-sm text-gray-500\">\n                  Create a new organization to manage your team and subscriptions.\n                  Your progress is automatically saved.\n                </p>\n              </div>\n\n              <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"mt-6 space-y-6\"\n              >\n                <div>\n                  <label\n                    htmlFor=\"name\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Organization Name <span className=\"text-red-500\">*</span>\n                  </label>\n                  <div className=\"mt-1 relative\">\n                    <input\n                      {...register('name', {\n                        onBlur: () => handleFieldBlur('name')\n                      })}\n                      type=\"text\"\n                      className={clsx(\n                        'shadow-sm block w-full sm:text-sm border rounded-md pr-10',\n                        {\n                          'border-gray-300 focus:ring-primary-500 focus:border-primary-500': getFieldState('name') === 'default',\n                          'border-green-500 focus:ring-green-500 focus:border-green-500': getFieldState('name') === 'valid',\n                          'border-red-500 focus:ring-red-500 focus:border-red-500': getFieldState('name') === 'error',\n                        }\n                      )}\n                      placeholder=\"e.g., Acme Corporation\"\n                      maxLength={50}\n                    />\n                    {/* Validation Icon */}\n                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                      {getFieldState('name') === 'valid' && (\n                        <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />\n                      )}\n                      {getFieldState('name') === 'error' && (\n                        <ExclamationTriangleIcon className=\"h-5 w-5 text-red-500\" />\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mt-1 flex justify-between\">\n                    <div>\n                      {errors.name && (\n                        <p className=\"text-sm text-red-600 flex items-center\">\n                          <ExclamationTriangleIcon className=\"h-4 w-4 mr-1\" />\n                          {errors.name.message}\n                        </p>\n                      )}\n                      {getFieldState('name') === 'valid' && (\n                        <p className=\"text-sm text-green-600 flex items-center\">\n                          <CheckCircleIcon className=\"h-4 w-4 mr-1\" />\n                          Looks good!\n                        </p>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-gray-500\">\n                      {watchedName.length}/50\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <label\n                    htmlFor=\"slug\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    URL Slug <span className=\"text-red-500\">*</span>\n                  </label>\n                  <div className=\"mt-1 flex rounded-md shadow-sm relative\">\n                    <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm\">\n                      /\n                    </span>\n                    <div className=\"relative flex-1\">\n                      <input\n                        {...register('slug', {\n                          onBlur: () => handleFieldBlur('slug'),\n                          onChange: () => setSlugAvailability('unknown')\n                        })}\n                        type=\"text\"\n                        className={clsx(\n                          'flex-1 block w-full rounded-none rounded-r-md sm:text-sm border pr-10',\n                          {\n                            'border-gray-300 focus:ring-primary-500 focus:border-primary-500': getFieldState('slug') === 'default',\n                            'border-green-500 focus:ring-green-500 focus:border-green-500': getFieldState('slug') === 'valid' && slugAvailability === 'available',\n                            'border-red-500 focus:ring-red-500 focus:border-red-500': getFieldState('slug') === 'error' || slugAvailability === 'taken',\n                          }\n                        )}\n                        placeholder=\"acme-corp\"\n                        maxLength={50}\n                      />\n                      {/* Availability Icon */}\n                      <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                        {slugAvailability === 'checking' && (\n                          <div className=\"animate-spin h-4 w-4 border-2 border-primary-500 border-t-transparent rounded-full\" />\n                        )}\n                        {slugAvailability === 'available' && getFieldState('slug') !== 'error' && (\n                          <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />\n                        )}\n                        {(slugAvailability === 'taken' || getFieldState('slug') === 'error') && (\n                          <ExclamationTriangleIcon className=\"h-5 w-5 text-red-500\" />\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mt-1 flex justify-between\">\n                    <div>\n                      {errors.slug && (\n                        <p className=\"text-sm text-red-600 flex items-center\">\n                          <ExclamationTriangleIcon className=\"h-4 w-4 mr-1\" />\n                          {errors.slug.message}\n                        </p>\n                      )}\n                      {slugAvailability === 'taken' && !errors.slug && (\n                        <p className=\"text-sm text-red-600 flex items-center\">\n                          <ExclamationTriangleIcon className=\"h-4 w-4 mr-1\" />\n                          This slug is already taken\n                        </p>\n                      )}\n                      {slugAvailability === 'available' && !errors.slug && (\n                        <p className=\"text-sm text-green-600 flex items-center\">\n                          <CheckCircleIcon className=\"h-4 w-4 mr-1\" />\n                          Available!\n                        </p>\n                      )}\n                      {slugAvailability === 'checking' && !errors.slug && (\n                        <p className=\"text-sm text-gray-600 flex items-center\">\n                          <InformationCircleIcon className=\"h-4 w-4 mr-1\" />\n                          Checking availability...\n                        </p>\n                      )}\n                      {!errors.slug && getFieldState('slug') === 'default' && (\n                        <p className=\"text-sm text-gray-500\">\n                          Only lowercase letters, numbers, and dashes allowed\n                        </p>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-gray-500\">\n                      {watchedSlug.length}/50\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <label\n                    htmlFor=\"description\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Description (Optional)\n                  </label>\n                  <div className=\"mt-1 relative\">\n                    <textarea\n                      {...register('description', {\n                        onBlur: () => handleFieldBlur('description')\n                      })}\n                      rows={3}\n                      className={clsx(\n                        'shadow-sm block w-full sm:text-sm border rounded-md',\n                        {\n                          'border-gray-300 focus:ring-primary-500 focus:border-primary-500': getFieldState('description') === 'default',\n                          'border-green-500 focus:ring-green-500 focus:border-green-500': getFieldState('description') === 'valid',\n                          'border-red-500 focus:ring-red-500 focus:border-red-500': getFieldState('description') === 'error',\n                        }\n                      )}\n                      placeholder=\"Brief description of your organization...\"\n                      maxLength={200}\n                    />\n                  </div>\n                  <div className=\"mt-1 flex justify-between\">\n                    <div>\n                      {errors.description && (\n                        <p className=\"text-sm text-red-600 flex items-center\">\n                          <ExclamationTriangleIcon className=\"h-4 w-4 mr-1\" />\n                          {errors.description.message}\n                        </p>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-gray-500\">\n                      {watchedDescription?.length || 0}/200\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense\">\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading || !isValid || slugAvailability === 'taken' || slugAvailability === 'checking'}\n                    className={clsx(\n                      'w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 text-base font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 sm:col-start-2 sm:text-sm transition-colors',\n                      {\n                        'bg-primary-600 hover:bg-primary-700 focus:ring-primary-500': isValid && slugAvailability !== 'taken' && slugAvailability !== 'checking' && !isLoading,\n                        'bg-gray-400 cursor-not-allowed': !isValid || slugAvailability === 'taken' || slugAvailability === 'checking' || isLoading,\n                      }\n                    )}\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center\">\n                        <div className=\"animate-spin -ml-1 mr-3 h-4 w-4 border-2 border-white border-t-transparent rounded-full\" />\n                        Creating...\n                      </div>\n                    ) : (\n                      'Create Organization'\n                    )}\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={handleClose}\n                    className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:col-start-1 sm:text-sm\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CreateOrganizationModal\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/payments/AddPaymentMethodForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1848,1851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1848,1851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":83,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":84,"column":20,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":84,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":84,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<boolean>`.","line":88,"column":21,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":88,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .complete on an `any` value.","line":88,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3758,3760],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":164,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":164,"endColumn":34},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":317,"column":11,"nodeType":"JSXOpeningElement","endLine":320,"endColumn":12}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport {\n  useStripe,\n  useElements,\n  CardElement,\n} from '@stripe/react-stripe-js'\nimport { toast } from 'react-hot-toast'\nimport {\n  CreditCardIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline'\nimport { clsx } from 'clsx'\n\nimport { useCreateSetupIntentMutation } from '../../store/api/paymentApi'\nimport { Button } from '../ui/button'\nimport { logger } from '../../utils/logger'\n\n\ninterface AddPaymentMethodFormProps {\n  organizationId: string\n  onSuccess: () => void\n  onCancel: () => void\n}\n\ninterface FormData {\n  name: string\n  email: string\n  address: {\n    line1: string\n    line2: string\n    city: string\n    state: string\n    postal_code: string\n    country: string\n  }\n}\n\nconst AddPaymentMethodForm: React.FC<AddPaymentMethodFormProps> = ({\n  organizationId,\n  onSuccess,\n  onCancel,\n}) => {\n  const stripe = useStripe()\n  const elements = useElements()\n  const [createSetupIntent] = useCreateSetupIntentMutation()\n\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    email: '',\n    address: {\n      line1: '',\n      line2: '',\n      city: '',\n      state: '',\n      postal_code: '',\n      country: 'US',\n    },\n  })\n  const [cardError, setCardError] = useState<string>('')\n  const [cardComplete, setCardComplete] = useState(false)\n\n  const handleInputChange = (field: string, value: string) => {\n    if (field.startsWith('address.')) {\n      const addressField = field.replace('address.', '')\n      setFormData(prev => ({\n        ...prev,\n        address: {\n          ...prev.address,\n          [addressField]: value,\n        },\n      }))\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [field]: value,\n      }))\n    }\n  }\n\n  const handleCardChange = (event: any) => {\n    if (event.error) {\n      setCardError(event.error.message)\n    } else {\n      setCardError('')\n    }\n    setCardComplete(event.complete)\n  }\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault()\n\n    if (!stripe || !elements) {\n      logger.error('Stripe not loaded')\n      toast.error('Payment system not ready. Please try again.')\n      return\n    }\n\n    const cardElement = elements.getElement(CardElement)\n    if (!cardElement) {\n      logger.error('Card element not found')\n      toast.error('Card information not found. Please refresh and try again.')\n      return\n    }\n\n    // Validate form\n    if (!formData.name.trim() || !formData.email.trim() || !formData.address.line1.trim()) {\n      toast.error('Please fill in all required fields')\n      return\n    }\n\n    if (!cardComplete) {\n      toast.error('Please enter complete card information')\n      return\n    }\n\n    setIsProcessing(true)\n    setCardError('')\n\n    try {\n      // Create setup intent\n      const { client_secret } = await createSetupIntent({\n        organizationId,\n        usage: 'off_session',\n      }).unwrap()\n\n      // Confirm the setup intent with the card\n      const { error, setupIntent } = await stripe.confirmCardSetup(client_secret, {\n        payment_method: {\n          card: cardElement,\n          billing_details: {\n            name: formData.name,\n            email: formData.email,\n            address: {\n              line1: formData.address.line1,\n              line2: formData.address.line2 || undefined,\n              city: formData.address.city,\n              state: formData.address.state,\n              postal_code: formData.address.postal_code,\n              country: formData.address.country,\n            },\n          },\n        },\n      })\n\n      if (error) {\n        logger.error('Setup intent confirmation failed:', error)\n        setCardError(error.message || 'Failed to add payment method')\n        toast.error('Failed to add payment method. Please try again.')\n      } else if (setupIntent?.status === 'succeeded') {\n        toast.success('Payment method added successfully!')\n        onSuccess()\n      }\n    } catch (error) {\n      logger.error('Failed to create setup intent:', error)\n      toast.error('Failed to set up payment method. Please try again.')\n    } finally {\n      setIsProcessing(false)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-3 pb-4 border-b border-gray-200\">\n        <div className=\"w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center\">\n          <CreditCardIcon className=\"w-4 h-4 text-primary-600\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Add Payment Method</h3>\n          <p className=\"text-sm text-gray-600\">\n            Securely add a new payment method using Stripe\n          </p>\n        </div>\n      </div>\n\n      {/* Billing Information */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-900\">Billing Information</h4>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Full Name *\n            </label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n              placeholder=\"Enter full name\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email Address *\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={formData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n              placeholder=\"Enter email address\"\n              required\n            />\n          </div>\n        </div>\n\n        <div>\n          <label htmlFor=\"address1\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Address Line 1 *\n          </label>\n          <input\n            type=\"text\"\n            id=\"address1\"\n            value={formData.address.line1}\n            onChange={(e) => handleInputChange('address.line1', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n            placeholder=\"Enter street address\"\n            required\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"address2\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Address Line 2\n          </label>\n          <input\n            type=\"text\"\n            id=\"address2\"\n            value={formData.address.line2}\n            onChange={(e) => handleInputChange('address.line2', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n            placeholder=\"Apartment, suite, etc. (optional)\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              City *\n            </label>\n            <input\n              type=\"text\"\n              id=\"city\"\n              value={formData.address.city}\n              onChange={(e) => handleInputChange('address.city', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n              placeholder=\"Enter city\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"state\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              State *\n            </label>\n            <input\n              type=\"text\"\n              id=\"state\"\n              value={formData.address.state}\n              onChange={(e) => handleInputChange('address.state', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n              placeholder=\"Enter state\"\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label htmlFor=\"postal_code\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Postal Code *\n            </label>\n            <input\n              type=\"text\"\n              id=\"postal_code\"\n              value={formData.address.postal_code}\n              onChange={(e) => handleInputChange('address.postal_code', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n              placeholder=\"Enter postal code\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"country\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Country *\n            </label>\n            <select\n              id=\"country\"\n              value={formData.address.country}\n              onChange={(e) => handleInputChange('address.country', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n            >\n              <option value=\"US\">United States</option>\n              <option value=\"CA\">Canada</option>\n              <option value=\"GB\">United Kingdom</option>\n              <option value=\"AU\">Australia</option>\n              <option value=\"DE\">Germany</option>\n              <option value=\"FR\">France</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Card Information */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-900\">Card Information</h4>\n\n        <div className=\"relative\">\n          <label\n            id=\"card-details-label\"\n            className=\"block text-sm font-medium text-gray-700 mb-2\"\n          >\n            Card Details *\n          </label>\n          <div\n            className={clsx(\n              'px-3 py-3 border rounded-md shadow-sm bg-white',\n              cardError ? 'border-red-300' : 'border-gray-300',\n              'focus-within:ring-1 focus-within:ring-primary-500 focus-within:border-primary-500'\n            )}\n            role=\"group\"\n            aria-labelledby=\"card-details-label\"\n          >\n            <CardElement\n              onChange={handleCardChange}\n              options={{\n                style: {\n                  base: {\n                    fontSize: '16px',\n                    color: '#374151',\n                    fontFamily: 'Inter, system-ui, sans-serif',\n                    '::placeholder': {\n                      color: '#9CA3AF',\n                    },\n                  },\n                  invalid: {\n                    color: '#EF4444',\n                  },\n                },\n                hidePostalCode: true, // We collect this separately\n              }}\n            />\n          </div>\n\n          {cardError && (\n            <div className=\"flex items-center mt-2 text-sm text-red-600\">\n              <ExclamationTriangleIcon className=\"w-4 h-4 mr-1\" />\n              {cardError}\n            </div>\n          )}\n\n          {cardComplete && !cardError && (\n            <div className=\"flex items-center mt-2 text-sm text-green-600\">\n              <CheckCircleIcon className=\"w-4 h-4 mr-1\" />\n              Card information looks good\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Security Notice */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\n              <svg className=\"w-3 h-3 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Secure Payment:</strong> Your card information is processed securely by Stripe.\n              We never store your card details on our servers.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex space-x-3 pt-4 border-t border-gray-200\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onCancel}\n          disabled={isProcessing}\n          className=\"flex-1\"\n        >\n          Cancel\n        </Button>\n\n        <Button\n          type=\"submit\"\n          disabled={!stripe || isProcessing || !cardComplete}\n          className=\"flex-1\"\n        >\n          {isProcessing ? (\n            <div className=\"flex items-center\">\n              <svg className=\"animate-spin -ml-1 mr-3 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Processing...\n            </div>\n          ) : (\n            <div className=\"flex items-center\">\n              <CreditCardIcon className=\"w-4 h-4 mr-2\" />\n              Add Payment Method\n            </div>\n          )}\n        </Button>\n      </div>\n    </form>\n  )\n}\n\nexport default AddPaymentMethodForm\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/payments/InternationalPaymentProcessor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":12,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CurrencyDollarIcon' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BanknotesIcon' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exchangeRates' is assigned a value but never used.","line":83,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setExchangeRates' is assigned a value but never used.","line":83,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'taxRates' is assigned a value but never used.","line":84,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTaxRates' is assigned a value but never used.","line":84,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":207,"column":79,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":207,"endColumn":81,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7670,7672],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'paymentMethods'. Either include it or remove the dependency array.","line":243,"column":6,"nodeType":"ArrayExpression","endLine":243,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [paymentMethods, selectedCurrency, customerCountry]","fix":{"range":[9216,9251],"text":"[paymentMethods, selectedCurrency, customerCountry]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currency' is defined but never used.","line":246,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":49},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'convertAmount'. Either include it or remove the dependency array.","line":261,"column":6,"nodeType":"ArrayExpression","endLine":261,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [amount, convertAmount, defaultCurrency, selectedCurrency]","fix":{"range":[9816,9859],"text":"[amount, convertAmount, defaultCurrency, selectedCurrency]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'calculateTax'. Either include it or remove the dependency array.","line":266,"column":6,"nodeType":"ArrayExpression","endLine":266,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [calculateTax, convertedAmount, selectedCurrency]","fix":{"range":[9979,10014],"text":"[calculateTax, convertedAmount, selectedCurrency]"}}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":390,"column":13,"nodeType":"JSXOpeningElement","endLine":399,"endColumn":14},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":390,"column":13,"nodeType":"JSXOpeningElement","endLine":399,"endColumn":14}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * International Payment Processing System\n *\n * Comprehensive multi-currency, multi-region payment processing:\n * - Multi-currency support with real-time exchange rates\n * - Regional payment methods (SEPA, Bancontact, Alipay, etc.)\n * - Tax calculation and compliance (VAT, GST, etc.)\n * - Currency conversion and presentation\n * - International banking and compliance\n */\n\nimport React, { useState, useEffect, useMemo } from 'react'\nimport {\n  CurrencyDollarIcon,\n  GlobeAltIcon,\n  CreditCardIcon,\n  BanknotesIcon,\n  CalculatorIcon,\n  ScaleIcon,\n} from '@heroicons/react/24/outline'\nimport { clsx } from 'clsx'\nimport { toast } from 'react-hot-toast'\n\nimport { Button } from '../ui/button'\nimport { logger } from '../../utils/logger'\n\n// Types for international payments\ninterface Currency {\n  code: string\n  name: string\n  symbol: string\n  decimals: number\n  isSupported: boolean\n  exchangeRate: number // relative to USD\n  minimumAmount: number\n}\n\ninterface PaymentMethod {\n  id: string\n  type: 'card' | 'bank_transfer' | 'digital_wallet' | 'local_payment'\n  name: string\n  description: string\n  supportedCurrencies: string[]\n  supportedCountries: string[]\n  icon: string\n  processingTime: string\n  fees: {\n    fixed?: number\n    percentage?: number\n    currency: string\n  }\n  isRecommended?: boolean\n}\n\ninterface TaxRate {\n  country: string\n  region?: string\n  type: 'VAT' | 'GST' | 'SALES_TAX' | 'OTHER'\n  rate: number\n  name: string\n  applicableToB2B: boolean\n  applicableToB2C: boolean\n}\n\ninterface InternationalPaymentProcessorProps {\n  amount: number\n  defaultCurrency?: string\n  customerCountry?: string\n  className?: string\n  onPaymentMethodSelect: (method: PaymentMethod, currency: string) => void\n}\n\nconst InternationalPaymentProcessor: React.FC<InternationalPaymentProcessorProps> = ({\n  amount,\n  defaultCurrency = 'USD',\n  customerCountry = 'US',\n  className,\n  onPaymentMethodSelect,\n}) => {\n  const [selectedCurrency, setSelectedCurrency] = useState(defaultCurrency)\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<PaymentMethod | null>(null)\n  const [showCurrencySelector, setShowCurrencySelector] = useState(false)\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>({})\n  const [taxRates, setTaxRates] = useState<TaxRate[]>([])\n\n  // Supported currencies with exchange rates (mock data)\n  const currencies: Currency[] = [\n    { code: 'USD', name: 'US Dollar', symbol: '$', decimals: 2, isSupported: true, exchangeRate: 1.0, minimumAmount: 0.5 },\n    { code: 'EUR', name: 'Euro', symbol: '€', decimals: 2, isSupported: true, exchangeRate: 0.85, minimumAmount: 0.5 },\n    { code: 'GBP', name: 'British Pound', symbol: '£', decimals: 2, isSupported: true, exchangeRate: 0.73, minimumAmount: 0.3 },\n    { code: 'JPY', name: 'Japanese Yen', symbol: '¥', decimals: 0, isSupported: true, exchangeRate: 110.0, minimumAmount: 50 },\n    { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$', decimals: 2, isSupported: true, exchangeRate: 1.25, minimumAmount: 0.5 },\n    { code: 'AUD', name: 'Australian Dollar', symbol: 'A$', decimals: 2, isSupported: true, exchangeRate: 1.35, minimumAmount: 0.5 },\n    { code: 'CHF', name: 'Swiss Franc', symbol: 'Fr', decimals: 2, isSupported: true, exchangeRate: 0.92, minimumAmount: 0.5 },\n    { code: 'SGD', name: 'Singapore Dollar', symbol: 'S$', decimals: 2, isSupported: true, exchangeRate: 1.35, minimumAmount: 0.5 },\n    { code: 'CNY', name: 'Chinese Yuan', symbol: '¥', decimals: 2, isSupported: true, exchangeRate: 6.45, minimumAmount: 3.0 },\n    { code: 'INR', name: 'Indian Rupee', symbol: '₹', decimals: 2, isSupported: true, exchangeRate: 75.0, minimumAmount: 35 },\n  ]\n\n  // International payment methods\n  const paymentMethods: PaymentMethod[] = [\n    {\n      id: 'card',\n      type: 'card',\n      name: 'Credit/Debit Card',\n      description: 'Visa, Mastercard, American Express',\n      supportedCurrencies: currencies.map(c => c.code),\n      supportedCountries: ['*'], // Global support\n      icon: '💳',\n      processingTime: 'Instant',\n      fees: { percentage: 2.9, fixed: 0.30, currency: 'USD' },\n      isRecommended: true,\n    },\n    {\n      id: 'sepa',\n      type: 'bank_transfer',\n      name: 'SEPA Direct Debit',\n      description: 'Single Euro Payments Area',\n      supportedCurrencies: ['EUR'],\n      supportedCountries: ['AT', 'BE', 'CY', 'DE', 'EE', 'ES', 'FI', 'FR', 'GR', 'IE', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'PT', 'SI', 'SK'],\n      icon: '🏦',\n      processingTime: '3-5 business days',\n      fees: { fixed: 0.35, currency: 'EUR' },\n    },\n    {\n      id: 'bancontact',\n      type: 'local_payment',\n      name: 'Bancontact',\n      description: 'Popular in Belgium',\n      supportedCurrencies: ['EUR'],\n      supportedCountries: ['BE'],\n      icon: '🇧🇪',\n      processingTime: 'Instant',\n      fees: { percentage: 1.4, currency: 'EUR' },\n    },\n    {\n      id: 'ideal',\n      type: 'local_payment',\n      name: 'iDEAL',\n      description: 'Dutch online banking',\n      supportedCurrencies: ['EUR'],\n      supportedCountries: ['NL'],\n      icon: '🇳🇱',\n      processingTime: 'Instant',\n      fees: { fixed: 0.29, currency: 'EUR' },\n    },\n    {\n      id: 'alipay',\n      type: 'digital_wallet',\n      name: 'Alipay',\n      description: 'Popular Chinese payment method',\n      supportedCurrencies: ['CNY', 'USD', 'EUR'],\n      supportedCountries: ['CN', 'HK', 'MO'],\n      icon: '🇨🇳',\n      processingTime: 'Instant',\n      fees: { percentage: 3.4, currency: 'USD' },\n    },\n    {\n      id: 'wechat_pay',\n      type: 'digital_wallet',\n      name: 'WeChat Pay',\n      description: 'Chinese mobile payment',\n      supportedCurrencies: ['CNY', 'USD'],\n      supportedCountries: ['CN'],\n      icon: '💬',\n      processingTime: 'Instant',\n      fees: { percentage: 3.4, currency: 'USD' },\n    },\n    {\n      id: 'upi',\n      type: 'digital_wallet',\n      name: 'UPI',\n      description: 'Unified Payments Interface (India)',\n      supportedCurrencies: ['INR'],\n      supportedCountries: ['IN'],\n      icon: '🇮🇳',\n      processingTime: 'Instant',\n      fees: { percentage: 2.0, currency: 'INR' },\n    },\n    {\n      id: 'sofort',\n      type: 'bank_transfer',\n      name: 'SOFORT',\n      description: 'German online banking',\n      supportedCurrencies: ['EUR'],\n      supportedCountries: ['DE', 'AT', 'CH', 'BE', 'NL'],\n      icon: '🇩🇪',\n      processingTime: 'Instant',\n      fees: { percentage: 1.4, currency: 'EUR' },\n    },\n  ]\n\n  // Tax rates by country/region\n  const allTaxRates: TaxRate[] = [\n    { country: 'US', type: 'SALES_TAX', rate: 8.5, name: 'Sales Tax (avg)', applicableToB2B: false, applicableToB2C: true },\n    { country: 'DE', type: 'VAT', rate: 19.0, name: 'Mehrwertsteuer', applicableToB2B: false, applicableToB2C: true },\n    { country: 'FR', type: 'VAT', rate: 20.0, name: 'TVA', applicableToB2B: false, applicableToB2C: true },\n    { country: 'GB', type: 'VAT', rate: 20.0, name: 'VAT', applicableToB2B: false, applicableToB2C: true },\n    { country: 'CA', type: 'GST', rate: 13.0, name: 'HST (avg)', applicableToB2B: false, applicableToB2C: true },\n    { country: 'AU', type: 'GST', rate: 10.0, name: 'GST', applicableToB2B: false, applicableToB2C: true },\n    { country: 'IN', type: 'GST', rate: 18.0, name: 'GST', applicableToB2B: true, applicableToB2C: true },\n    { country: 'SG', type: 'GST', rate: 7.0, name: 'GST', applicableToB2B: false, applicableToB2C: true },\n    { country: 'JP', type: 'OTHER', rate: 10.0, name: 'Consumption Tax', applicableToB2B: false, applicableToB2C: true },\n  ]\n\n  // Get currency object by code\n  const getCurrency = (code: string) => currencies.find(c => c.code === code) || currencies[0]\n\n  // Convert amount to selected currency\n  const convertAmount = (baseAmount: number, fromCurrency: string, toCurrency: string) => {\n    const fromCurrencyObj = getCurrency(fromCurrency)\n    const toCurrencyObj = getCurrency(toCurrency)\n\n    // Convert to USD first, then to target currency\n    const usdAmount = baseAmount / fromCurrencyObj.exchangeRate\n    const convertedAmount = usdAmount * toCurrencyObj.exchangeRate\n\n    return Math.round(convertedAmount * Math.pow(10, toCurrencyObj.decimals)) / Math.pow(10, toCurrencyObj.decimals)\n  }\n\n  // Format amount with currency\n  const formatAmount = (amount: number, currencyCode: string) => {\n    const currency = getCurrency(currencyCode)\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currencyCode,\n      minimumFractionDigits: currency.decimals,\n      maximumFractionDigits: currency.decimals,\n    }).format(amount)\n  }\n\n  // Get available payment methods for selected currency and country\n  const availablePaymentMethods = useMemo(() => {\n    return paymentMethods.filter(method => {\n      const supportsCurrency = method.supportedCurrencies.includes(selectedCurrency)\n      const supportsCountry = method.supportedCountries.includes('*') || method.supportedCountries.includes(customerCountry)\n      return supportsCurrency && supportsCountry\n    }).sort((a, b) => {\n      if (a.isRecommended && !b.isRecommended) return -1\n      if (!a.isRecommended && b.isRecommended) return 1\n      return a.name.localeCompare(b.name)\n    })\n  }, [selectedCurrency, customerCountry])\n\n  // Calculate tax for the transaction\n  const calculateTax = (amount: number, currency: string) => {\n    const taxRate = allTaxRates.find(rate => rate.country === customerCountry)\n    if (!taxRate) return { taxAmount: 0, taxRate: 0, taxName: '' }\n\n    const taxAmount = amount * (taxRate.rate / 100)\n    return {\n      taxAmount,\n      taxRate: taxRate.rate,\n      taxName: taxRate.name,\n    }\n  }\n\n  // Get converted amount in selected currency\n  const convertedAmount = useMemo(() => {\n    return convertAmount(amount, defaultCurrency, selectedCurrency)\n  }, [amount, defaultCurrency, selectedCurrency])\n\n  // Calculate tax\n  const taxInfo = useMemo(() => {\n    return calculateTax(convertedAmount, selectedCurrency)\n  }, [convertedAmount, selectedCurrency])\n\n  // Total amount including tax\n  const totalAmount = convertedAmount + taxInfo.taxAmount\n\n  const handlePaymentMethodSelect = (method: PaymentMethod) => {\n    setSelectedPaymentMethod(method)\n    onPaymentMethodSelect(method, selectedCurrency)\n    toast.success(`Selected ${method.name} for ${formatAmount(totalAmount, selectedCurrency)}`)\n  }\n\n  return (\n    <div className={clsx('space-y-6', className)}>\n      {/* Currency Selector */}\n      <div className=\"bg-white shadow rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-medium text-gray-900 flex items-center\">\n            <GlobeAltIcon className=\"w-5 h-5 mr-2\" />\n            Currency & Region\n          </h3>\n          <button\n            onClick={() => setShowCurrencySelector(!showCurrencySelector)}\n            className=\"text-sm text-blue-600 hover:text-blue-800\"\n          >\n            Change Currency\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <div className=\"text-sm font-medium text-gray-700 mb-1\">Amount</div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatAmount(convertedAmount, selectedCurrency)}\n            </div>\n            {selectedCurrency !== defaultCurrency && (\n              <div className=\"text-sm text-gray-500\">\n                Original: {formatAmount(amount, defaultCurrency)}\n              </div>\n            )}\n          </div>\n\n          <div>\n            <div className=\"text-sm font-medium text-gray-700 mb-1\">Currency</div>\n            <div className=\"text-lg text-gray-900\">\n              {getCurrency(selectedCurrency).name} ({selectedCurrency})\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              Rate: {getCurrency(selectedCurrency).exchangeRate.toFixed(4)}\n            </div>\n          </div>\n\n          <div>\n            <div className=\"text-sm font-medium text-gray-700 mb-1\">Customer Region</div>\n            <div className=\"text-lg text-gray-900\">{customerCountry}</div>\n            {taxInfo.taxAmount > 0 && (\n              <div className=\"text-sm text-gray-500\">\n                {taxInfo.taxName}: {taxInfo.taxRate}%\n              </div>\n            )}\n          </div>\n        </div>\n\n        {showCurrencySelector && (\n          <div className=\"mt-4 p-4 border border-gray-200 rounded-lg\">\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2\">\n              {currencies.map((currency) => (\n                <button\n                  key={currency.code}\n                  onClick={() => {\n                    setSelectedCurrency(currency.code)\n                    setShowCurrencySelector(false)\n                  }}\n                  className={clsx(\n                    'p-2 text-left border rounded-lg transition-colors',\n                    selectedCurrency === currency.code\n                      ? 'border-blue-500 bg-blue-50 text-blue-700'\n                      : 'border-gray-200 hover:border-gray-300'\n                  )}\n                >\n                  <div className=\"font-medium\">{currency.code}</div>\n                  <div className=\"text-sm text-gray-500\">{currency.symbol}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Tax Breakdown */}\n      {taxInfo.taxAmount > 0 && (\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4 flex items-center\">\n            <CalculatorIcon className=\"w-5 h-5 mr-2\" />\n            Tax Calculation\n          </h3>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Subtotal:</span>\n              <span className=\"text-gray-900\">{formatAmount(convertedAmount, selectedCurrency)}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">{taxInfo.taxName} ({taxInfo.taxRate}%):</span>\n              <span className=\"text-gray-900\">{formatAmount(taxInfo.taxAmount, selectedCurrency)}</span>\n            </div>\n            <div className=\"border-t border-gray-200 pt-2\">\n              <div className=\"flex justify-between font-medium\">\n                <span className=\"text-gray-900\">Total:</span>\n                <span className=\"text-gray-900\">{formatAmount(totalAmount, selectedCurrency)}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Payment Methods */}\n      <div className=\"bg-white shadow rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4 flex items-center\">\n          <CreditCardIcon className=\"w-5 h-5 mr-2\" />\n          Payment Methods\n        </h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {availablePaymentMethods.map((method) => (\n            <div\n              key={method.id}\n              className={clsx(\n                'border-2 rounded-lg p-4 cursor-pointer transition-all',\n                selectedPaymentMethod?.id === method.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              )}\n              onClick={() => handlePaymentMethodSelect(method)}\n            >\n              <div className=\"flex items-start justify-between mb-2\">\n                <div className=\"flex items-center\">\n                  <span className=\"text-2xl mr-3\">{method.icon}</span>\n                  <div>\n                    <div className=\"font-medium text-gray-900\">{method.name}</div>\n                    {method.isRecommended && (\n                      <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800\">\n                        Recommended\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <p className=\"text-sm text-gray-600 mb-2\">{method.description}</p>\n\n              <div className=\"text-xs text-gray-500 space-y-1\">\n                <div>Processing: {method.processingTime}</div>\n                <div>\n                  Fees: {method.fees.percentage ? `${method.fees.percentage}%` : ''}\n                  {method.fees.fixed ? ` + ${formatAmount(method.fees.fixed, method.fees.currency)}` : ''}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {availablePaymentMethods.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <CreditCardIcon className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n            <p>No payment methods available for {selectedCurrency} in {customerCountry}</p>\n            <p className=\"text-sm mt-2\">Please try a different currency or contact support.</p>\n          </div>\n        )}\n      </div>\n\n      {/* Compliance Information */}\n      <div className=\"bg-gray-50 rounded-lg p-4\">\n        <div className=\"flex items-start\">\n          <ScaleIcon className=\"w-5 h-5 text-gray-400 mt-0.5 mr-2\" />\n          <div className=\"text-sm text-gray-600\">\n            <div className=\"font-medium mb-1\">Compliance & Security</div>\n            <ul className=\"space-y-1\">\n              <li>• PCI DSS Level 1 compliant payment processing</li>\n              <li>• 3D Secure authentication for enhanced security</li>\n              <li>• Local tax calculations and compliance reporting</li>\n              <li>• Currency conversion rates updated every 5 minutes</li>\n              <li>• Strong customer authentication (SCA) compliance</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default InternationalPaymentProcessor","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/payments/PaymentMethodsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":54,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":54,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1346,1346],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1346,1346],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":73,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":73,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1837,1837],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1837,1837],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":82,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":82,"endColumn":14,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2073,2073],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2073,2073],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":95,"column":9,"nodeType":"JSXOpeningElement","endLine":98,"endColumn":11},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":95,"column":9,"nodeType":"JSXOpeningElement","endLine":98,"endColumn":11},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":173,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":173,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5996,5998],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":173,"column":93,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":173,"endColumn":95,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6036,6038],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":199,"column":41,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":199,"endColumn":76},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":208,"column":41,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":208,"endColumn":72}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport {\n  XMarkIcon,\n  CreditCardIcon,\n  PlusIcon,\n  CheckIcon,\n  ArrowLeftIcon,\n} from '@heroicons/react/24/outline'\nimport { toast } from 'react-hot-toast'\nimport { clsx } from 'clsx'\n\nimport { logger } from '../../utils/logger'\nimport {\n  useGetOrganizationPaymentMethodsQuery,\n  useSetDefaultPaymentMethodMutation,\n  useDetachPaymentMethodMutation,\n} from '../../store/api/paymentApi'\nimport LoadingSpinner from '../ui/LoadingSpinner'\n\nimport AddPaymentMethodForm from './AddPaymentMethodForm'\n\n\ninterface PaymentMethodsModalProps {\n  isOpen: boolean\n  onClose: () => void\n  organizationId: string\n}\n\nconst PaymentMethodsModal: React.FC<PaymentMethodsModalProps> = ({\n  isOpen,\n  onClose,\n  organizationId,\n}) => {\n  const [showAddForm, setShowAddForm] = useState(false)\n  const {\n    data: paymentMethods,\n    isLoading,\n    refetch,\n  } = useGetOrganizationPaymentMethodsQuery(organizationId, {\n    skip: !isOpen,\n  })\n\n  const [setDefaultPaymentMethod] = useSetDefaultPaymentMethodMutation()\n  const [detachPaymentMethod] = useDetachPaymentMethodMutation()\n\n  const handleSetDefault = async (paymentMethodId: string) => {\n    try {\n      await setDefaultPaymentMethod({\n        paymentMethodId,\n        organizationId,\n      }).unwrap()\n\n      toast.success('Default payment method updated')\n      refetch()\n    } catch (error) {\n      logger.error('Failed to set default payment method:', error)\n      toast.error('Failed to update default payment method')\n    }\n  }\n\n  const handleRemove = async (paymentMethodId: string) => {\n    if (!confirm('Are you sure you want to remove this payment method?')) {\n      return\n    }\n\n    try {\n      await detachPaymentMethod({\n        paymentMethodId,\n        organizationId,\n      }).unwrap()\n\n      toast.success('Payment method removed')\n      refetch()\n    } catch (error) {\n      logger.error('Failed to remove payment method:', error)\n      toast.error('Failed to remove payment method')\n    }\n  }\n\n  const handleAddPaymentMethodSuccess = () => {\n    setShowAddForm(false)\n    refetch()\n  }\n\n  const handleCloseModal = () => {\n    setShowAddForm(false)\n    onClose()\n  }\n\n  if (!isOpen) {return null}\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        <div\n          className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n          onClick={handleCloseModal}\n        />\n\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\">\n          &#8203;\n        </span>\n\n        <div className=\"relative inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full sm:p-6\">\n          <div className=\"absolute top-0 right-0 pt-4 pr-4\">\n            <button\n              type=\"button\"\n              className=\"bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n              onClick={handleCloseModal}\n            >\n              <XMarkIcon className=\"h-6 w-6\" />\n            </button>\n          </div>\n\n          <div className=\"sm:flex sm:items-start\">\n            <div className=\"w-full mt-3 text-center sm:mt-0 sm:text-left\">\n              {showAddForm ? (\n                <div>\n                  <div className=\"flex items-center mb-4\">\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowAddForm(false)}\n                      className=\"mr-3 p-1 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n                    >\n                      <ArrowLeftIcon className=\"h-5 w-5 text-gray-600\" />\n                    </button>\n                    <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                      Add Payment Method\n                    </h3>\n                  </div>\n                  <AddPaymentMethodForm\n                    organizationId={organizationId}\n                    onSuccess={handleAddPaymentMethodSuccess}\n                    onCancel={() => setShowAddForm(false)}\n                  />\n                </div>\n              ) : (\n                <>\n                  <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                    Payment Methods\n                  </h3>\n                  <div className=\"mt-2\">\n                    <p className=\"text-sm text-gray-500\">\n                      Manage your payment methods for subscriptions and purchases.\n                    </p>\n                  </div>\n\n                  <div className=\"mt-6\">\n                {isLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <LoadingSpinner size=\"lg\" />\n                  </div>\n                ) : paymentMethods && paymentMethods.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {paymentMethods.map(method => (\n                      <div\n                        key={method.id}\n                        className={clsx(\n                          'border rounded-lg p-4',\n                          method.isDefault\n                            ? 'border-primary-500 bg-primary-50'\n                            : 'border-gray-200'\n                        )}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"flex-shrink-0\">\n                              <CreditCardIcon className=\"h-6 w-6 text-gray-400\" />\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">\n                                {method.type === 'CARD'\n                                  ? `${method.brand || 'Card'} ending in ••••${method.last4 || '****'}`\n                                  : method.type.replace('_', ' ').toLowerCase()\n                                }\n                              </p>\n                              {method.type === 'CARD' && method.brand && method.last4 && (\n                                <p className=\"text-sm text-gray-500\">\n                                  {method.brand} ••••{method.last4}\n                                  {method.expiryMonth && method.expiryYear && (\n                                    <span> (Expires {method.expiryMonth}/{method.expiryYear})</span>\n                                  )}\n                                </p>\n                              )}\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                Added {new Date(method.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-center space-x-2\">\n                            {method.isDefault ? (\n                              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800\">\n                                <CheckIcon className=\"mr-1 h-3 w-3\" />\n                                Default\n                              </span>\n                            ) : (\n                              <button\n                                onClick={() => handleSetDefault(method.id)}\n                                className=\"text-sm text-primary-600 hover:text-primary-500\"\n                              >\n                                Set as default\n                              </button>\n                            )}\n\n                            {!method.isDefault && (\n                              <button\n                                onClick={() => handleRemove(method.id)}\n                                className=\"text-sm text-red-600 hover:text-red-500\"\n                              >\n                                Remove\n                              </button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <CreditCardIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n                    <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n                      No payment methods\n                    </h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">\n                      Add a payment method to start making payments.\n                    </p>\n                  </div>\n                )}\n\n                    <div className=\"mt-6\">\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowAddForm(true)}\n                        className=\"w-full inline-flex justify-center items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n                      >\n                        <PlusIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n                        Add Payment Method\n                      </button>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PaymentMethodsModal\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/performance/PerformanceDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkPerformanceAlerts'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [refreshInterval, performanceTracking, checkPerformanceAlerts]","fix":{"range":[2536,2574],"text":"[refreshInterval, performanceTracking, checkPerformanceAlerts]"}}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":211,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":211,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6867,6869],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":347,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":347,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12672,12674],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Performance Monitoring Dashboard\n *\n * Comprehensive performance monitoring interface showing:\n * - Core Web Vitals in real-time\n * - Cache performance metrics\n * - Bundle loading analysis\n * - User journey performance\n * - Memory usage tracking\n * - Network performance\n */\n\nimport React, { useState, useEffect, useMemo } from 'react'\nimport {\n  ChartBarIcon,\n  ClockIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline'\nimport { format } from 'date-fns'\nimport { clsx } from 'clsx'\n\nimport { usePerformanceTracking } from '../../utils/performance'\nimport { useCacheAnalytics } from '../../store/middleware/cacheEnhancer'\n\n// Types for performance dashboard\ninterface PerformanceMetricCard {\n  title: string\n  value: string | number\n  unit?: string\n  trend?: 'up' | 'down' | 'stable'\n  status: 'good' | 'warning' | 'critical'\n  description: string\n  threshold?: { good: number; warning: number }\n}\n\ninterface PerformanceAlert {\n  id: string\n  type: 'error' | 'warning' | 'info'\n  message: string\n  timestamp: number\n  metric?: string\n}\n\n// Web Vitals scoring thresholds\nconst WEB_VITALS_THRESHOLDS = {\n  lcp: { good: 2500, warning: 4000 },      // Largest Contentful Paint\n  fid: { good: 100, warning: 300 },        // First Input Delay\n  cls: { good: 0.1, warning: 0.25 },       // Cumulative Layout Shift\n  fcp: { good: 1800, warning: 3000 },      // First Contentful Paint\n  ttfb: { good: 800, warning: 1800 },      // Time to First Byte\n}\n\nconst PerformanceDashboard: React.FC = () => {\n  const [alerts, setAlerts] = useState<PerformanceAlert[]>([])\n  const [isVisible, setIsVisible] = useState(false)\n  const [refreshInterval, setRefreshInterval] = useState(5000)\n\n  const performanceTracking = usePerformanceTracking()\n  const cacheAnalytics = useCacheAnalytics()\n\n  // Real-time metrics state\n  const [webVitals, setWebVitals] = useState(performanceTracking.getWebVitals())\n  const [memoryInfo, setMemoryInfo] = useState<{\n    used: number\n    total: number\n    limit: number\n    usagePercent: number\n  } | null>(null)\n  const [networkInfo, setNetworkInfo] = useState<{\n    effectiveType: string\n    downlink: number\n    rtt: number\n    saveData: boolean\n  } | null>(null)\n\n  // Update metrics periodically\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWebVitals(performanceTracking.getWebVitals())\n      updateMemoryInfo()\n      updateNetworkInfo()\n      checkPerformanceAlerts()\n    }, refreshInterval)\n\n    return () => clearInterval(interval)\n  }, [refreshInterval, performanceTracking])\n\n  const updateMemoryInfo = () => {\n    if ('memory' in performance) {\n      const memory = (performance as { memory: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }).memory\n      setMemoryInfo({\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n        usagePercent: (memory.usedJSHeapSize / memory.totalJSHeapSize) * 100\n      })\n    }\n  }\n\n  const updateNetworkInfo = () => {\n    if ('connection' in navigator) {\n      const connection = (navigator as { connection: { effectiveType: string; downlink: number; rtt: number; saveData: boolean } }).connection\n      setNetworkInfo({\n        effectiveType: connection.effectiveType,\n        downlink: connection.downlink,\n        rtt: connection.rtt,\n        saveData: connection.saveData\n      })\n    }\n  }\n\n  const checkPerformanceAlerts = () => {\n    const newAlerts: PerformanceAlert[] = []\n    const now = Date.now()\n\n    // Check Web Vitals\n    if (webVitals.lcp && webVitals.lcp > WEB_VITALS_THRESHOLDS.lcp.warning) {\n      newAlerts.push({\n        id: `lcp-${now}`,\n        type: 'warning',\n        message: `LCP is ${webVitals.lcp.toFixed(0)}ms (target: <2.5s)`,\n        timestamp: now,\n        metric: 'lcp'\n      })\n    }\n\n    if (webVitals.cls && webVitals.cls > WEB_VITALS_THRESHOLDS.cls.warning) {\n      newAlerts.push({\n        id: `cls-${now}`,\n        type: 'error',\n        message: `High CLS detected: ${webVitals.cls.toFixed(3)}`,\n        timestamp: now,\n        metric: 'cls'\n      })\n    }\n\n    // Check cache performance\n    if (cacheAnalytics.hitRate < 0.5) {\n      newAlerts.push({\n        id: `cache-${now}`,\n        type: 'warning',\n        message: `Low cache hit rate: ${(cacheAnalytics.hitRate * 100).toFixed(1)}%`,\n        timestamp: now,\n        metric: 'cache'\n      })\n    }\n\n    // Check memory usage\n    if (memoryInfo && memoryInfo.usagePercent > 80) {\n      newAlerts.push({\n        id: `memory-${now}`,\n        type: 'error',\n        message: `High memory usage: ${memoryInfo.usagePercent.toFixed(1)}%`,\n        timestamp: now,\n        metric: 'memory'\n      })\n    }\n\n    setAlerts(prev => [...newAlerts, ...prev.slice(0, 9)]) // Keep last 10 alerts\n  }\n\n  // Calculate performance metrics for cards\n  const performanceMetrics = useMemo((): PerformanceMetricCard[] => {\n    const getStatus = (value: number, thresholds: { good: number; warning: number }): 'good' | 'warning' | 'critical' => {\n      if (value <= thresholds.good) return 'good'\n      if (value <= thresholds.warning) return 'warning'\n      return 'critical'\n    }\n\n    return [\n      {\n        title: 'LCP',\n        value: webVitals.lcp ? (webVitals.lcp / 1000).toFixed(2) : 'N/A',\n        unit: 's',\n        status: webVitals.lcp ? getStatus(webVitals.lcp, WEB_VITALS_THRESHOLDS.lcp) : 'good',\n        description: 'Largest Contentful Paint - loading performance',\n        threshold: WEB_VITALS_THRESHOLDS.lcp\n      },\n      {\n        title: 'FID',\n        value: webVitals.fid ? webVitals.fid.toFixed(0) : 'N/A',\n        unit: 'ms',\n        status: webVitals.fid ? getStatus(webVitals.fid, WEB_VITALS_THRESHOLDS.fid) : 'good',\n        description: 'First Input Delay - interactivity',\n        threshold: WEB_VITALS_THRESHOLDS.fid\n      },\n      {\n        title: 'CLS',\n        value: webVitals.cls ? webVitals.cls.toFixed(3) : 'N/A',\n        status: webVitals.cls ? getStatus(webVitals.cls, WEB_VITALS_THRESHOLDS.cls) : 'good',\n        description: 'Cumulative Layout Shift - visual stability',\n        threshold: WEB_VITALS_THRESHOLDS.cls\n      },\n      {\n        title: 'Cache Hit Rate',\n        value: (cacheAnalytics.hitRate * 100).toFixed(1),\n        unit: '%',\n        status: cacheAnalytics.hitRate >= 0.7 ? 'good' : cacheAnalytics.hitRate >= 0.5 ? 'warning' : 'critical',\n        description: 'API cache effectiveness',\n      },\n      {\n        title: 'Memory Usage',\n        value: memoryInfo ? memoryInfo.usagePercent.toFixed(1) : 'N/A',\n        unit: '%',\n        status: memoryInfo ? (memoryInfo.usagePercent < 60 ? 'good' : memoryInfo.usagePercent < 80 ? 'warning' : 'critical') : 'good',\n        description: 'JavaScript heap memory usage',\n      },\n      {\n        title: 'Network',\n        value: networkInfo?.effectiveType || 'N/A',\n        status: networkInfo?.effectiveType === '4g' ? 'good' : networkInfo?.effectiveType === '3g' ? 'warning' : 'critical',\n        description: 'Connection quality',\n      }\n    ]\n  }, [webVitals, cacheAnalytics, memoryInfo, networkInfo])\n\n  if (!isVisible) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <button\n          onClick={() => setIsVisible(true)}\n          className=\"bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition-colors\"\n          title=\"Show Performance Dashboard\"\n        >\n          <ChartBarIcon className=\"w-6 h-6\" />\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <ChartBarIcon className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900\">Performance Dashboard</h2>\n              <p className=\"text-sm text-gray-500\">Real-time performance monitoring</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <select\n              value={refreshInterval}\n              onChange={(e) => setRefreshInterval(Number(e.target.value))}\n              className=\"text-sm border border-gray-300 rounded px-2 py-1\"\n            >\n              <option value={1000}>1s</option>\n              <option value={5000}>5s</option>\n              <option value={10000}>10s</option>\n              <option value={30000}>30s</option>\n            </select>\n            <button\n              onClick={() => setIsVisible(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n\n        {/* Alerts */}\n        {alerts.length > 0 && (\n          <div className=\"p-6 border-b border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Performance Alerts</h3>\n            <div className=\"space-y-2\">\n              {alerts.slice(0, 3).map((alert) => (\n                <div\n                  key={alert.id}\n                  className={clsx(\n                    'flex items-center space-x-3 p-3 rounded-lg',\n                    alert.type === 'error' && 'bg-red-50 border border-red-200',\n                    alert.type === 'warning' && 'bg-yellow-50 border border-yellow-200',\n                    alert.type === 'info' && 'bg-blue-50 border border-blue-200'\n                  )}\n                >\n                  <ExclamationTriangleIcon\n                    className={clsx(\n                      'w-5 h-5',\n                      alert.type === 'error' && 'text-red-500',\n                      alert.type === 'warning' && 'text-yellow-500',\n                      alert.type === 'info' && 'text-blue-500'\n                    )}\n                  />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900\">{alert.message}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {format(alert.timestamp, 'HH:mm:ss')}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Metrics Grid */}\n        <div className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance Metrics</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {performanceMetrics.map((metric) => (\n              <PerformanceMetricCard key={metric.title} metric={metric} />\n            ))}\n          </div>\n        </div>\n\n        {/* Cache Details */}\n        <div className=\"p-6 border-t border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Cache Performance</h3>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Overall Statistics</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Hit Rate:</span>\n                  <span className=\"font-medium\">{(cacheAnalytics.hitRate * 100).toFixed(1)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Tracked Endpoints:</span>\n                  <span className=\"font-medium\">{cacheAnalytics.metrics?.length || 0}</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Recommendations</h4>\n              <div className=\"space-y-1\">\n                {cacheAnalytics.recommendations?.slice(0, 3).map((rec, index) => (\n                  <p key={index} className=\"text-xs text-gray-600\">{rec}</p>\n                )) || <p className=\"text-xs text-gray-500\">No recommendations</p>}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* System Info */}\n        <div className=\"p-6 border-t border-gray-200 bg-gray-50\">\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n            <div>\n              <p className=\"text-gray-600\">User Agent:</p>\n              <p className=\"font-medium text-xs\">{navigator.userAgent.split(' ')[0]}</p>\n            </div>\n            <div>\n              <p className=\"text-gray-600\">Connection:</p>\n              <p className=\"font-medium\">{networkInfo?.effectiveType || 'Unknown'}</p>\n            </div>\n            <div>\n              <p className=\"text-gray-600\">Memory Limit:</p>\n              <p className=\"font-medium\">\n                {memoryInfo ? `${(memoryInfo.limit / 1024 / 1024 / 1024).toFixed(1)}GB` : 'N/A'}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-gray-600\">Last Updated:</p>\n              <p className=\"font-medium\">{format(Date.now(), 'HH:mm:ss')}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Individual metric card component\nconst PerformanceMetricCard: React.FC<{ metric: PerformanceMetricCard }> = ({ metric }) => {\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'good':\n        return <CheckCircleIcon className=\"w-5 h-5 text-green-500\" />\n      case 'warning':\n        return <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-500\" />\n      case 'critical':\n        return <ExclamationTriangleIcon className=\"w-5 h-5 text-red-500\" />\n      default:\n        return <ClockIcon className=\"w-5 h-5 text-gray-400\" />\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'good':\n        return 'border-green-200 bg-green-50'\n      case 'warning':\n        return 'border-yellow-200 bg-yellow-50'\n      case 'critical':\n        return 'border-red-200 bg-red-50'\n      default:\n        return 'border-gray-200 bg-gray-50'\n    }\n  }\n\n  return (\n    <div className={clsx('p-4 rounded-lg border-2', getStatusColor(metric.status))}>\n      <div className=\"flex items-center justify-between mb-2\">\n        <h4 className=\"font-medium text-gray-900\">{metric.title}</h4>\n        {getStatusIcon(metric.status)}\n      </div>\n      <div className=\"mb-2\">\n        <span className=\"text-2xl font-bold text-gray-900\">\n          {metric.value}\n        </span>\n        {metric.unit && (\n          <span className=\"text-sm text-gray-500 ml-1\">{metric.unit}</span>\n        )}\n      </div>\n      <p className=\"text-xs text-gray-600\">{metric.description}</p>\n      {metric.threshold && (\n        <div className=\"mt-2 text-xs text-gray-500\">\n          Target: &lt;{metric.threshold.good}{metric.unit} • Warning: &gt;{metric.threshold.warning}{metric.unit}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default PerformanceDashboard\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/subscription/AdvancedSubscriptionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CalendarDaysIcon' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowTrendingDownIcon' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addDays' is defined but never used.","line":26,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addMonths' is defined but never used.","line":26,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingCard' is defined but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":31,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'organizationId' is defined but never used.","line":116,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":121,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used.","line":121,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":345,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":345,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10185,10187],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":354,"column":88,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":354,"endColumn":90,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10655,10657],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":356,"column":91,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":356,"endColumn":93,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10807,10809],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":367,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":367,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11231,11233],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":374,"column":87,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":374,"endColumn":89,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11574,11576],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":374,"column":127,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":374,"endColumn":129,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11614,11616],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":376,"column":90,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":376,"endColumn":92,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11729,11731],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":376,"column":130,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":376,"endColumn":132,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11769,11771],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":392,"column":86,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":392,"endColumn":88,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12423,12425],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":392,"column":125,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":392,"endColumn":127,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12462,12464],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":394,"column":89,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":394,"endColumn":91,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12576,12578],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":394,"column":128,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":394,"endColumn":130,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12615,12617],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced Subscription Management System\n *\n * Enterprise-grade subscription management with:\n * - Subscription lifecycle management\n * - Billing cycle customization\n * - Prorations and upgrades/downgrades\n * - Usage-based billing\n * - Subscription analytics\n * - Automated renewals and dunning management\n */\n\nimport React, { useState, useMemo } from 'react'\nimport {\n  CreditCardIcon,\n  CalendarDaysIcon,\n  ChartBarIcon,\n  CogIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  BanknotesIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n} from '@heroicons/react/24/outline'\nimport { format, addDays, addMonths } from 'date-fns'\nimport { clsx } from 'clsx'\nimport { toast } from 'react-hot-toast'\n\nimport { Button } from '../ui/button'\nimport { LoadingCard, LoadingSpinner } from '../ui/LoadingStates'\nimport { logger } from '../../utils/logger'\n\n// Types for advanced subscription management\ninterface SubscriptionPlan {\n  id: string\n  name: string\n  description: string\n  pricing: {\n    basePrice: number\n    currency: string\n    billingCycle: 'monthly' | 'yearly' | 'quarterly'\n    setupFee?: number\n    trialDays?: number\n  }\n  features: string[]\n  limits: {\n    users?: number\n    apiCalls?: number\n    storage?: number // in GB\n    customFields?: number\n  }\n  usageBased?: {\n    meteringUnit: string\n    price: number\n    includedQuantity: number\n    overage: {\n      price: number\n      tiers: Array<{ from: number; to: number; price: number }>\n    }\n  }\n  isPopular: boolean\n  isEnterprise: boolean\n}\n\ninterface Subscription {\n  id: string\n  planId: string\n  plan: SubscriptionPlan\n  status: 'active' | 'trialing' | 'past_due' | 'canceled' | 'unpaid' | 'paused'\n  currentPeriodStart: string\n  currentPeriodEnd: string\n  trialStart?: string\n  trialEnd?: string\n  canceledAt?: string\n  quantity: number\n  usage?: {\n    users: number\n    apiCalls: number\n    storage: number\n    customFields: number\n  }\n  billing: {\n    nextBillingDate: string\n    lastPaymentDate?: string\n    amount: number\n    currency: string\n    paymentMethod?: {\n      type: 'card' | 'bank_account'\n      last4: string\n      brand?: string\n    }\n  }\n  discounts: Array<{\n    id: string\n    name: string\n    type: 'percentage' | 'fixed'\n    amount: number\n    validUntil?: string\n  }>\n  analytics: {\n    monthlyRecurringRevenue: number\n    annualRecurringRevenue: number\n    churnRisk: 'low' | 'medium' | 'high'\n    usageGrowth: number\n    costPerUser: number\n  }\n}\n\ninterface AdvancedSubscriptionManagerProps {\n  organizationId: string\n  className?: string\n}\n\nconst AdvancedSubscriptionManager: React.FC<AdvancedSubscriptionManagerProps> = ({\n  organizationId,\n  className,\n}) => {\n  const [activeTab, setActiveTab] = useState<'overview' | 'billing' | 'usage' | 'analytics' | 'settings'>('overview')\n  const [showPlanSelector, setShowPlanSelector] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Mock data - in real app, this would come from API\n  const subscription: Subscription = {\n    id: 'sub_123',\n    planId: 'plan_pro',\n    plan: {\n      id: 'plan_pro',\n      name: 'Professional',\n      description: 'Perfect for growing teams',\n      pricing: {\n        basePrice: 49.99,\n        currency: 'USD',\n        billingCycle: 'monthly',\n        trialDays: 14,\n      },\n      features: [\n        'Unlimited users',\n        '10,000 API calls/month',\n        '100GB storage',\n        'Priority support',\n        'Advanced analytics',\n      ],\n      limits: {\n        users: -1, // unlimited\n        apiCalls: 10000,\n        storage: 100,\n      },\n      usageBased: {\n        meteringUnit: 'API calls',\n        price: 0.001,\n        includedQuantity: 10000,\n        overage: {\n          price: 0.001,\n          tiers: [\n            { from: 0, to: 50000, price: 0.001 },\n            { from: 50000, to: 100000, price: 0.0008 },\n          ],\n        },\n      },\n      isPopular: true,\n      isEnterprise: false,\n    },\n    status: 'active',\n    currentPeriodStart: '2024-01-01T00:00:00Z',\n    currentPeriodEnd: '2024-02-01T00:00:00Z',\n    quantity: 1,\n    usage: {\n      users: 8,\n      apiCalls: 7500,\n      storage: 45.2,\n      customFields: 12,\n    },\n    billing: {\n      nextBillingDate: '2024-02-01T00:00:00Z',\n      lastPaymentDate: '2024-01-01T00:00:00Z',\n      amount: 49.99,\n      currency: 'USD',\n      paymentMethod: {\n        type: 'card',\n        last4: '4242',\n        brand: 'Visa',\n      },\n    },\n    discounts: [\n      {\n        id: 'discount_1',\n        name: 'Early Bird 20%',\n        type: 'percentage',\n        amount: 20,\n        validUntil: '2024-03-01T00:00:00Z',\n      },\n    ],\n    analytics: {\n      monthlyRecurringRevenue: 39.99, // after discount\n      annualRecurringRevenue: 479.88,\n      churnRisk: 'low',\n      usageGrowth: 15.4,\n      costPerUser: 5.0,\n    },\n  }\n\n  const availablePlans: SubscriptionPlan[] = [\n    {\n      id: 'plan_starter',\n      name: 'Starter',\n      description: 'Perfect for small teams',\n      pricing: {\n        basePrice: 19.99,\n        currency: 'USD',\n        billingCycle: 'monthly',\n        trialDays: 7,\n      },\n      features: ['Up to 5 users', '1,000 API calls/month', '10GB storage'],\n      limits: { users: 5, apiCalls: 1000, storage: 10 },\n      isPopular: false,\n      isEnterprise: false,\n    },\n    subscription.plan, // Current plan\n    {\n      id: 'plan_enterprise',\n      name: 'Enterprise',\n      description: 'For large organizations',\n      pricing: {\n        basePrice: 199.99,\n        currency: 'USD',\n        billingCycle: 'monthly',\n        setupFee: 499.99,\n      },\n      features: [\n        'Unlimited everything',\n        'Custom integrations',\n        'Dedicated support',\n        'SLA guarantee',\n      ],\n      limits: {},\n      isPopular: false,\n      isEnterprise: true,\n    },\n  ]\n\n  const getStatusBadge = (status: Subscription['status']) => {\n    const statusConfig = {\n      active: { color: 'bg-green-100 text-green-800', icon: CheckCircleIcon, label: 'Active' },\n      trialing: { color: 'bg-blue-100 text-blue-800', icon: ClockIcon, label: 'Trial' },\n      past_due: { color: 'bg-yellow-100 text-yellow-800', icon: ExclamationTriangleIcon, label: 'Past Due' },\n      canceled: { color: 'bg-gray-100 text-gray-800', icon: ExclamationTriangleIcon, label: 'Canceled' },\n      unpaid: { color: 'bg-red-100 text-red-800', icon: ExclamationTriangleIcon, label: 'Unpaid' },\n      paused: { color: 'bg-gray-100 text-gray-800', icon: ClockIcon, label: 'Paused' },\n    }\n\n    const config = statusConfig[status]\n    const IconComponent = config.icon\n\n    return (\n      <span className={clsx('inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium', config.color)}>\n        <IconComponent className=\"w-3 h-3 mr-1\" />\n        {config.label}\n      </span>\n    )\n  }\n\n  const calculateUsagePercentage = (used: number, limit: number) => {\n    if (limit === -1) return 0 // Unlimited\n    return Math.min((used / limit) * 100, 100)\n  }\n\n  const getUsageColor = (percentage: number) => {\n    if (percentage >= 90) return 'text-red-600 bg-red-100'\n    if (percentage >= 75) return 'text-yellow-600 bg-yellow-100'\n    return 'text-green-600 bg-green-100'\n  }\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Subscription Status */}\n      <div className=\"bg-white shadow rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Current Subscription</h3>\n            <div className=\"ml-3\">\n              {getStatusBadge(subscription.status)}\n            </div>\n          </div>\n          <Button onClick={() => setShowPlanSelector(true)} size=\"sm\">\n            Change Plan\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {subscription.plan.name}\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              ${subscription.billing.amount}/{subscription.plan.pricing.billingCycle}\n            </div>\n          </div>\n\n          <div>\n            <div className=\"text-sm font-medium text-gray-700\">Next Billing</div>\n            <div className=\"text-lg text-gray-900\">\n              {format(new Date(subscription.billing.nextBillingDate), 'MMM d, yyyy')}\n            </div>\n          </div>\n\n          <div>\n            <div className=\"text-sm font-medium text-gray-700\">Payment Method</div>\n            <div className=\"text-lg text-gray-900\">\n              {subscription.billing.paymentMethod?.brand} ****{subscription.billing.paymentMethod?.last4}\n            </div>\n          </div>\n        </div>\n\n        {subscription.discounts.length > 0 && (\n          <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <CheckCircleIcon className=\"w-5 h-5 text-green-400 mr-2\" />\n              <div>\n                <div className=\"text-sm font-medium text-green-800\">\n                  Active Discount: {subscription.discounts[0].name}\n                </div>\n                <div className=\"text-sm text-green-700\">\n                  {subscription.discounts[0].amount}% off until {format(new Date(subscription.discounts[0].validUntil!), 'MMM d, yyyy')}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Usage Overview */}\n      <div className=\"bg-white shadow rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Usage This Period</h3>\n          <ChartBarIcon className=\"w-5 h-5 text-gray-400\" />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {subscription.plan.limits.users !== undefined && (\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Users</span>\n                <span className=\"text-sm text-gray-500\">\n                  {subscription.usage?.users || 0}\n                  {subscription.plan.limits.users === -1 ? '' : `/${subscription.plan.limits.users}`}\n                </span>\n              </div>\n              {subscription.plan.limits.users !== -1 && (\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div\n                    className={clsx(\n                      'h-2 rounded-full',\n                      getUsageColor(calculateUsagePercentage(subscription.usage?.users || 0, subscription.plan.limits.users))\n                    )}\n                    style={{ width: `${calculateUsagePercentage(subscription.usage?.users || 0, subscription.plan.limits.users)}%` }}\n                  />\n                </div>\n              )}\n            </div>\n          )}\n\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">API Calls</span>\n              <span className=\"text-sm text-gray-500\">\n                {subscription.usage?.apiCalls.toLocaleString() || 0}/{subscription.plan.limits.apiCalls?.toLocaleString()}\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div\n                className={clsx(\n                  'h-2 rounded-full',\n                  getUsageColor(calculateUsagePercentage(subscription.usage?.apiCalls || 0, subscription.plan.limits.apiCalls || 0))\n                )}\n                style={{ width: `${calculateUsagePercentage(subscription.usage?.apiCalls || 0, subscription.plan.limits.apiCalls || 0)}%` }}\n              />\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">Storage</span>\n              <span className=\"text-sm text-gray-500\">\n                {subscription.usage?.storage}GB/{subscription.plan.limits.storage}GB\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div\n                className={clsx(\n                  'h-2 rounded-full',\n                  getUsageColor(calculateUsagePercentage(subscription.usage?.storage || 0, subscription.plan.limits.storage || 0))\n                )}\n                style={{ width: `${calculateUsagePercentage(subscription.usage?.storage || 0, subscription.plan.limits.storage || 0)}%` }}\n              />\n            </div>\n          </div>\n\n          <div className=\"md:col-span-2 lg:col-span-1\">\n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {Math.ceil((new Date(subscription.currentPeriodEnd).getTime() - Date.now()) / (1000 * 60 * 60 * 24))}\n              </div>\n              <div className=\"text-sm text-blue-700\">Days Remaining</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Analytics Summary */}\n      <div className=\"bg-white shadow rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Subscription Analytics</h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              ${subscription.analytics.monthlyRecurringRevenue.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-gray-500\">MRR</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              ${subscription.analytics.annualRecurringRevenue.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-gray-500\">ARR</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center\">\n              <ArrowTrendingUpIcon className=\"w-5 h-5 text-green-500 mr-1\" />\n              <span className=\"text-2xl font-bold text-green-600\">\n                +{subscription.analytics.usageGrowth.toFixed(1)}%\n              </span>\n            </div>\n            <div className=\"text-sm text-gray-500\">Usage Growth</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className={clsx(\n              'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium mb-1',\n              subscription.analytics.churnRisk === 'low' ? 'bg-green-100 text-green-800' :\n              subscription.analytics.churnRisk === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n              'bg-red-100 text-red-800'\n            )}>\n              {subscription.analytics.churnRisk.toUpperCase()} RISK\n            </div>\n            <div className=\"text-sm text-gray-500\">Churn Risk</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'overview':\n        return renderOverview()\n      case 'billing':\n        return <div className=\"p-8 text-center text-gray-500\">Billing management coming soon</div>\n      case 'usage':\n        return <div className=\"p-8 text-center text-gray-500\">Detailed usage analytics coming soon</div>\n      case 'analytics':\n        return <div className=\"p-8 text-center text-gray-500\">Advanced analytics dashboard coming soon</div>\n      case 'settings':\n        return <div className=\"p-8 text-center text-gray-500\">Subscription settings coming soon</div>\n      default:\n        return renderOverview()\n    }\n  }\n\n  return (\n    <div className={clsx('space-y-6', className)}>\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {[\n            { key: 'overview', label: 'Overview', icon: ChartBarIcon },\n            { key: 'billing', label: 'Billing', icon: CreditCardIcon },\n            { key: 'usage', label: 'Usage', icon: BanknotesIcon },\n            { key: 'analytics', label: 'Analytics', icon: ArrowTrendingUpIcon },\n            { key: 'settings', label: 'Settings', icon: CogIcon },\n          ].map(({ key, label, icon: Icon }) => (\n            <button\n              key={key}\n              onClick={() => setActiveTab(key as typeof activeTab)}\n              className={clsx(\n                'group inline-flex items-center py-2 px-1 border-b-2 font-medium text-sm',\n                activeTab === key\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              )}\n            >\n              <Icon className=\"w-5 h-5 mr-2\" />\n              {label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {renderTabContent()}\n\n      {/* Plan Selector Modal */}\n      {showPlanSelector && (\n        <div className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Choose Your Plan</h3>\n                <button\n                  onClick={() => setShowPlanSelector(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  ✕\n                </button>\n              </div>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {availablePlans.map((plan) => (\n                  <div\n                    key={plan.id}\n                    className={clsx(\n                      'border-2 rounded-lg p-6',\n                      plan.id === subscription.planId\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    )}\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h4 className=\"text-xl font-semibold text-gray-900\">{plan.name}</h4>\n                      {plan.isPopular && (\n                        <span className=\"bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                          Popular\n                        </span>\n                      )}\n                    </div>\n\n                    <div className=\"mb-4\">\n                      <div className=\"text-3xl font-bold text-gray-900\">\n                        ${plan.pricing.basePrice}\n                        <span className=\"text-base font-normal text-gray-500\">\n                          /{plan.pricing.billingCycle}\n                        </span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-gray-600 mb-4\">{plan.description}</p>\n\n                    <ul className=\"space-y-2 mb-6\">\n                      {plan.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center text-sm\">\n                          <CheckCircleIcon className=\"w-4 h-4 text-green-500 mr-2\" />\n                          {feature}\n                        </li>\n                      ))}\n                    </ul>\n\n                    <Button\n                      className=\"w-full\"\n                      variant={plan.id === subscription.planId ? 'outline' : 'primary'}\n                      disabled={plan.id === subscription.planId}\n                    >\n                      {plan.id === subscription.planId ? 'Current Plan' : 'Select Plan'}\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default AdvancedSubscriptionManager","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/subscription/UpgradePlanModal.tsx","messages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":83,"column":9,"nodeType":"JSXOpeningElement","endLine":86,"endColumn":11},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":83,"column":9,"nodeType":"JSXOpeningElement","endLine":86,"endColumn":11},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":128,"column":25,"nodeType":"JSXOpeningElement","endLine":141,"endColumn":26},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":128,"column":25,"nodeType":"JSXOpeningElement","endLine":141,"endColumn":26},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":187,"column":56,"nodeType":"Identifier","messageId":"invalidType","endLine":187,"endColumn":61},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":208,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":208,"endColumn":52}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { XMarkIcon, CheckIcon } from '@heroicons/react/24/outline'\nimport { toast } from 'react-hot-toast'\nimport { clsx } from 'clsx'\n\nimport { logger } from '../../utils/logger'\nimport {\n  useGetAvailablePlansQuery,\n  useCreateSubscriptionMutation,\n  useChangeSubscriptionPlanMutation,\n} from '../../store/api/subscriptionApi'\nimport LoadingSpinner from '../ui/LoadingSpinner'\nimport { parseApiError } from '../../utils/apiError'\n\n\ninterface UpgradePlanModalProps {\n  isOpen: boolean\n  onClose: () => void\n  currentPlanId?: string\n  organizationId?: string\n  subscriptionId?: string\n}\n\nconst UpgradePlanModal: React.FC<UpgradePlanModalProps> = ({\n  isOpen,\n  onClose,\n  currentPlanId,\n  organizationId,\n  subscriptionId,\n}) => {\n  const [selectedPlanId, setSelectedPlanId] = useState<string | null>(null)\n  const { data: plans, isLoading } = useGetAvailablePlansQuery(undefined, {\n    skip: !isOpen,\n  })\n\n  const [createSubscription, { isLoading: isCreating }] =\n    useCreateSubscriptionMutation()\n  const [changeSubscriptionPlan, { isLoading: isChanging }] =\n    useChangeSubscriptionPlanMutation()\n\n  const handlePlanSelection = async () => {\n    if (!selectedPlanId || !organizationId) {return}\n\n    try {\n      if (subscriptionId) {\n        // Change existing subscription\n        await changeSubscriptionPlan({\n          subscriptionId,\n          organizationId,\n          newPlanId: selectedPlanId,\n          prorationBehavior: true,\n        }).unwrap()\n\n        toast.success('Subscription plan updated successfully')\n      } else {\n        // Create new subscription\n        await createSubscription({\n          organizationId,\n          planId: selectedPlanId,\n          trialEligible: true,\n        }).unwrap()\n\n        toast.success('Subscription created successfully')\n      }\n\n      onClose()\n    } catch (err) {\n      const parsed = parseApiError(err)\n      logger.error('Failed to update subscription:', parsed)\n      toast.error(parsed.message || 'Failed to update subscription')\n    }\n  }\n\n  if (!isOpen) {return null}\n\n  const sortedPlans = plans\n    ? [...plans].sort((a, b) => a.amount - b.amount)\n    : []\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        <div\n          className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n          onClick={onClose}\n        />\n\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\">\n          &#8203;\n        </span>\n\n        <div className=\"relative inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full sm:p-6\">\n          <div className=\"absolute top-0 right-0 pt-4 pr-4\">\n            <button\n              type=\"button\"\n              className=\"bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n              onClick={onClose}\n            >\n              <XMarkIcon className=\"h-6 w-6\" />\n            </button>\n          </div>\n\n          <div className=\"sm:flex sm:items-start\">\n            <div className=\"w-full mt-3 text-center sm:mt-0 sm:text-left\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                {subscriptionId ? 'Change Your Plan' : 'Choose a Plan'}\n              </h3>\n              <div className=\"mt-2\">\n                <p className=\"text-sm text-gray-500\">\n                  {subscriptionId\n                    ? 'Select a new plan for your subscription. Changes will take effect immediately.'\n                    : 'Select a plan to start your subscription.'}\n                </p>\n              </div>\n\n              {isLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <LoadingSpinner size=\"lg\" />\n                </div>\n              ) : (\n                <div className=\"mt-6\">\n                  <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n                    {sortedPlans.map(plan => {\n                      const isCurrentPlan = plan.id === currentPlanId\n                      const isSelected = plan.id === selectedPlanId\n\n                      return (\n                        <div\n                          key={plan.id}\n                          className={clsx(\n                            'relative rounded-lg border-2 p-6 cursor-pointer',\n                            isCurrentPlan\n                              ? 'border-gray-300 bg-gray-50'\n                              : isSelected\n                                ? 'border-primary-500 bg-primary-50'\n                                : 'border-gray-200 hover:border-gray-300'\n                          )}\n                          onClick={() =>\n                            !isCurrentPlan && setSelectedPlanId(plan.id)\n                          }\n                        >\n                          {isCurrentPlan && (\n                            <span className=\"absolute top-4 right-4 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-200 text-gray-800\">\n                              Current\n                            </span>\n                          )}\n\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className=\"text-lg font-medium text-gray-900\">\n                              {plan.name}\n                            </h4>\n                            {isSelected && (\n                              <CheckIcon className=\"h-5 w-5 text-primary-600\" />\n                            )}\n                          </div>\n\n                          <p className=\"mt-2 text-sm text-gray-500\">\n                            {plan.description}\n                          </p>\n\n                          <div className=\"mt-4\">\n                            <span className=\"text-3xl font-bold text-gray-900\">\n                              ${plan.amount.toFixed(0)}\n                            </span>\n                            <span className=\"text-gray-500\">\n                              /{plan.interval.toLowerCase()}\n                            </span>\n                          </div>\n\n                          {plan.trialDays && plan.trialDays > 0 && (\n                            <p className=\"mt-2 text-sm text-green-600\">\n                              {plan.trialDays} day free trial\n                            </p>\n                          )}\n\n                          {plan.features &&\n                            Object.keys(plan.features).length > 0 && (\n                              <ul className=\"mt-4 space-y-2\">\n                                {Object.entries(plan.features)\n                                  .slice(0, 3)\n                                  .map(([key, value]) => (\n                                    <li key={key} className=\"flex items-start\">\n                                      <CheckIcon className=\"flex-shrink-0 h-4 w-4 text-green-500 mt-0.5\" />\n                                      <span className=\"ml-2 text-sm text-gray-700\">\n                                        {typeof value === 'boolean'\n                                          ? key.replace(/_/g, ' ')\n                                          : `${key}: ${value}`}\n                                      </span>\n                                    </li>\n                                  ))}\n                              </ul>\n                            )}\n                        </div>\n                      )\n                    })}\n                  </div>\n\n                  <div className=\"mt-6 flex justify-end space-x-3\">\n                    <button\n                      type=\"button\"\n                      onClick={onClose}\n                      className=\"inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:text-sm\"\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={handlePlanSelection}\n                      disabled={\n                        !selectedPlanId ||\n                        selectedPlanId === currentPlanId ||\n                        isCreating ||\n                        isChanging\n                      }\n                      className=\"inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      {isCreating || isChanging ? (\n                        <>\n                          <LoadingSpinner\n                            size=\"sm\"\n                            className=\"mr-2\"\n                            color=\"white\"\n                          />\n                          Processing...\n                        </>\n                      ) : subscriptionId ? (\n                        'Change Plan'\n                      ) : (\n                        'Start Subscription'\n                      )}\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default UpgradePlanModal\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/tenants/TenantConfigurationManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TenantSettings' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TenantBranding' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TenantQuotas' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UpdateTenantRequest' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":22},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useGetTenantSettingsQuery\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":152,"column":7,"nodeType":"Identifier","endLine":152,"endColumn":32},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useGetTenantQuotasQuery\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":158,"column":7,"nodeType":"Identifier","endLine":158,"endColumn":30},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUpdateTenantSettingsMutation\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":160,"column":34,"nodeType":"Identifier","endLine":160,"endColumn":65},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUpdateTenantMutation\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":161,"column":26,"nodeType":"Identifier","endLine":161,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUpdateTenantQuotasMutation\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":162,"column":32,"nodeType":"Identifier","endLine":162,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4825,4828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4825,4828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useForm\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":204,"column":23,"nodeType":"Identifier","endLine":204,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":206,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":206,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5879,5881],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useForm\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":215,"column":24,"nodeType":"Identifier","endLine":215,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":217,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":217,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6194,6196],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useForm\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":242,"column":24,"nodeType":"Identifier","endLine":242,"endColumn":31},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useForm\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":259,"column":22,"nodeType":"Identifier","endLine":259,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":261,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":273,"endColumn":6},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7299,7301],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":277,"column":3,"nodeType":"Identifier","endLine":277,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":284,"column":3,"nodeType":"Identifier","endLine":284,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":290,"column":3,"nodeType":"Identifier","endLine":290,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":301,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8491,8494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8491,8494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":306,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":306,"endColumn":34},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":309,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":309,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[8692,8692],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[8692,8692],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":318,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8919,8922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8919,8922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":323,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":323,"endColumn":35},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":326,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":326,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[9121,9121],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[9121,9121],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":335,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9349,9352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9349,9352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":340,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":340,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":351,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9744,9747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9744,9747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":356,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":356,"endColumn":21},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":359,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":359,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[9928,9928],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[9928,9928],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":372,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":372,"endColumn":71},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":387,"column":17,"nodeType":"JSXOpeningElement","endLine":387,"endColumn":81},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":393,"column":17,"nodeType":"JSXOpeningElement","endLine":393,"endColumn":76},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":425,"column":17,"nodeType":"JSXOpeningElement","endLine":425,"endColumn":81},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":431,"column":17,"nodeType":"JSXOpeningElement","endLine":431,"endColumn":76},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":465,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":465,"endColumn":73},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":471,"column":19,"nodeType":"JSXOpeningElement","endLine":471,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":499,"column":31,"nodeType":"TSAsExpression","messageId":"anyAssignment","endLine":499,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":499,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":499,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15750,15753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15750,15753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":504,"column":38,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":504,"endColumn":49},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":524,"column":19,"nodeType":"JSXOpeningElement","endLine":524,"endColumn":78},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":544,"column":19,"nodeType":"JSXOpeningElement","endLine":544,"endColumn":78},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":579,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":579,"endColumn":73},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":582,"column":17,"nodeType":"JSXOpeningElement","endLine":582,"endColumn":76},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":599,"column":17,"nodeType":"JSXOpeningElement","endLine":599,"endColumn":76},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":616,"column":17,"nodeType":"JSXOpeningElement","endLine":616,"endColumn":76},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":634,"column":17,"nodeType":"JSXOpeningElement","endLine":634,"endColumn":76},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":667,"column":15,"nodeType":"JSXOpeningElement","endLine":667,"endColumn":79},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":686,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":686,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":701,"column":29,"nodeType":"TSAsExpression","messageId":"anyAssignment","endLine":701,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":701,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":701,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24123,24126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24123,24126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":720,"column":29,"nodeType":"TSAsExpression","messageId":"anyAssignment","endLine":720,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":720,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":720,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25026,25029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25026,25029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":55,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tenant Configuration Manager\n *\n * Comprehensive tenant configuration interface supporting:\n * - General tenant settings and preferences\n * - Security and compliance configuration\n * - Branding and customization options\n * - Integration settings and API configuration\n * - Billing and subscription management\n * - Resource quotas and limits management\n */\n\nimport React, { useState, useEffect } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport {\n  CogIcon,\n  ShieldCheckIcon,\n  PaintBrushIcon,\n  CreditCardIcon,\n  ChartBarIcon,\n  LinkIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  InformationCircleIcon,\n} from '@heroicons/react/24/outline'\n\nimport { useTenant } from './TenantProvider'\n\nimport {\n  useGetTenantSettingsQuery,\n  useUpdateTenantSettingsMutation,\n  useUpdateTenantMutation,\n  useGetTenantQuotasQuery,\n  useUpdateTenantQuotasMutation,\n} from '@/store/api/tenantApi'\nimport type {\n  TenantSettings,\n  TenantBranding,\n  TenantQuotas,\n  UpdateTenantRequest,\n} from '@/types/multitenancy'\nimport { TenantBrandingSchema } from '@/types/multitenancy'\n\n// Icons\n\ntype ConfigurationTab = 'general' | 'security' | 'branding' | 'integrations' | 'billing' | 'quotas'\n\n// Form schemas\nconst GeneralSettingsSchema = z.object({\n  allowUserRegistration: z.boolean(),\n  defaultUserRole: z.string(),\n  emailVerificationRequired: z.boolean(),\n  userInviteExpirationDays: z.number().min(1).max(365),\n})\n\nconst SecuritySettingsSchema = z.object({\n  passwordPolicy: z.object({\n    minLength: z.number().min(8).max(128),\n    requireUppercase: z.boolean(),\n    requireLowercase: z.boolean(),\n    requireNumbers: z.boolean(),\n    requireSpecialChars: z.boolean(),\n    preventReuse: z.number().min(0).max(24),\n    expirationDays: z.number().min(1).max(365).optional(),\n  }),\n  sessionSettings: z.object({\n    timeoutMinutes: z.number().min(5).max(1440),\n    maxConcurrentSessions: z.number().min(1).max(50),\n    requireReauthForSensitive: z.boolean(),\n  }),\n  auditSettings: z.object({\n    enabled: z.boolean(),\n    retentionDays: z.number().min(1).max(2555), // 7 years max\n    logLevel: z.enum(['basic', 'detailed', 'comprehensive']),\n    realTimeAlerts: z.boolean(),\n  }),\n})\n\nconst BrandingSettingsSchema = TenantBrandingSchema\n\nconst QuotaUpdateSchema = z.object({\n  users: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  organizations: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  storage: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  apiCalls: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  bandwidth: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  customDomains: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  ssoConnections: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  webhooks: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  auditRetention: z.number().min(1).max(2555),\n  concurrentSessions: z.object({\n    limit: z.number().min(-1),\n    softLimit: z.number().min(0).optional(),\n  }),\n  rateLimit: z.number().min(1),\n})\n\ninterface TenantConfigurationManagerProps {\n  className?: string\n}\n\nconst TenantConfigurationManager: React.FC<TenantConfigurationManagerProps> = ({\n  className = '',\n}) => {\n  const { tenant, tenantContext } = useTenant()\n  const [activeTab, setActiveTab] = useState<ConfigurationTab>('general')\n  const [isSaving, setIsSaving] = useState(false)\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle')\n\n  if (!tenant || !tenantContext) {\n    return (\n      <div className=\"text-center py-12\">\n        <ExclamationTriangleIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n        <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">No Tenant Context</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">\n          Tenant configuration requires a valid tenant context.\n        </p>\n      </div>\n    )\n  }\n\n  const {\n    data: tenantSettings,\n    isLoading: isLoadingSettings,\n    refetch: refetchSettings,\n  } = useGetTenantSettingsQuery({ tenantId: tenant.id })\n\n  const {\n    data: tenantQuotas,\n    isLoading: isLoadingQuotas,\n    refetch: refetchQuotas,\n  } = useGetTenantQuotasQuery({ tenantId: tenant.id })\n\n  const [updateTenantSettings] = useUpdateTenantSettingsMutation()\n  const [updateTenant] = useUpdateTenantMutation()\n  const [updateTenantQuotas] = useUpdateTenantQuotasMutation()\n\n  const tabs: Array<{ key: ConfigurationTab; label: string; icon: any; description: string }> = [\n    {\n      key: 'general',\n      label: 'General',\n      icon: CogIcon,\n      description: 'Basic tenant settings and preferences',\n    },\n    {\n      key: 'security',\n      label: 'Security',\n      icon: ShieldCheckIcon,\n      description: 'Password policies and security settings',\n    },\n    {\n      key: 'branding',\n      label: 'Branding',\n      icon: PaintBrushIcon,\n      description: 'Visual customization and branding',\n    },\n    {\n      key: 'integrations',\n      label: 'Integrations',\n      icon: LinkIcon,\n      description: 'Third-party integrations and APIs',\n    },\n    {\n      key: 'billing',\n      label: 'Billing',\n      icon: CreditCardIcon,\n      description: 'Billing and subscription settings',\n    },\n    {\n      key: 'quotas',\n      label: 'Quotas',\n      icon: ChartBarIcon,\n      description: 'Resource limits and usage quotas',\n    },\n  ]\n\n  // General settings form\n  const generalForm = useForm({\n    resolver: zodResolver(GeneralSettingsSchema),\n    defaultValues: tenantSettings?.general || {\n      allowUserRegistration: false,\n      defaultUserRole: 'user',\n      emailVerificationRequired: true,\n      userInviteExpirationDays: 7,\n    },\n  })\n\n  // Security settings form\n  const securityForm = useForm({\n    resolver: zodResolver(SecuritySettingsSchema),\n    defaultValues: tenantSettings?.security || {\n      passwordPolicy: {\n        minLength: 12,\n        requireUppercase: true,\n        requireLowercase: true,\n        requireNumbers: true,\n        requireSpecialChars: true,\n        preventReuse: 5,\n        expirationDays: 90,\n      },\n      sessionSettings: {\n        timeoutMinutes: 30,\n        maxConcurrentSessions: 5,\n        requireReauthForSensitive: true,\n      },\n      auditSettings: {\n        enabled: true,\n        retentionDays: 365,\n        logLevel: 'detailed' as const,\n        realTimeAlerts: false,\n      },\n    },\n  })\n\n  // Branding form\n  const brandingForm = useForm({\n    resolver: zodResolver(BrandingSettingsSchema),\n    defaultValues: tenant.branding || {\n      primaryColor: '#3B82F6',\n      secondaryColor: '#1E40AF',\n      logoUrl: '',\n      faviconUrl: '',\n      customCss: '',\n      hideProviderBranding: false,\n      customFooter: '',\n      customEmailTemplate: '',\n      theme: 'light' as const,\n      fontFamily: '',\n    },\n  })\n\n  // Quotas form\n  const quotasForm = useForm({\n    resolver: zodResolver(QuotaUpdateSchema),\n    defaultValues: tenantQuotas?.quotas || {\n      users: { limit: 100, softLimit: 80 },\n      organizations: { limit: 10, softLimit: 8 },\n      storage: { limit: 50, softLimit: 40 },\n      apiCalls: { limit: 10000, softLimit: 8000 },\n      bandwidth: { limit: 100, softLimit: 80 },\n      customDomains: { limit: 1, softLimit: 1 },\n      ssoConnections: { limit: 2, softLimit: 2 },\n      webhooks: { limit: 5, softLimit: 4 },\n      auditRetention: 365,\n      concurrentSessions: { limit: 100, softLimit: 80 },\n      rateLimit: 100,\n    },\n  })\n\n  // Update form defaults when data loads\n  useEffect(() => {\n    if (tenantSettings) {\n      generalForm.reset(tenantSettings.general)\n      securityForm.reset(tenantSettings.security)\n    }\n  }, [tenantSettings, generalForm, securityForm])\n\n  useEffect(() => {\n    if (tenant.branding) {\n      brandingForm.reset(tenant.branding)\n    }\n  }, [tenant.branding, brandingForm])\n\n  useEffect(() => {\n    if (tenantQuotas) {\n      quotasForm.reset(tenantQuotas.quotas)\n    }\n  }, [tenantQuotas, quotasForm])\n\n  const showSaveStatus = (status: 'success' | 'error') => {\n    setSaveStatus(status)\n    setTimeout(() => setSaveStatus('idle'), 3000)\n  }\n\n  const handleSaveGeneral = async (data: any) => {\n    try {\n      setIsSaving(true)\n      await updateTenantSettings({\n        tenantId: tenant.id,\n        settings: { general: data },\n      }).unwrap()\n      showSaveStatus('success')\n      refetchSettings()\n    } catch (error) {\n      console.error('Failed to save general settings:', error)\n      showSaveStatus('error')\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handleSaveSecurity = async (data: any) => {\n    try {\n      setIsSaving(true)\n      await updateTenantSettings({\n        tenantId: tenant.id,\n        settings: { security: data },\n      }).unwrap()\n      showSaveStatus('success')\n      refetchSettings()\n    } catch (error) {\n      console.error('Failed to save security settings:', error)\n      showSaveStatus('error')\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handleSaveBranding = async (data: any) => {\n    try {\n      setIsSaving(true)\n      await updateTenant({\n        tenantId: tenant.id,\n        updates: { branding: data },\n      }).unwrap()\n      showSaveStatus('success')\n    } catch (error) {\n      console.error('Failed to save branding settings:', error)\n      showSaveStatus('error')\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handleSaveQuotas = async (data: any) => {\n    try {\n      setIsSaving(true)\n      await updateTenantQuotas({\n        tenantId: tenant.id,\n        quotas: data,\n      }).unwrap()\n      showSaveStatus('success')\n      refetchQuotas()\n    } catch (error) {\n      console.error('Failed to save quotas:', error)\n      showSaveStatus('error')\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'general':\n        return (\n          <form onSubmit={generalForm.handleSubmit(handleSaveGeneral)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-6\">\n              <div className=\"flex items-center\">\n                <Controller\n                  name=\"allowUserRegistration\"\n                  control={generalForm.control}\n                  render={({ field }) => (\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                    />\n                  )}\n                />\n                <label className=\"ml-3 block text-sm font-medium text-gray-700\">\n                  Allow User Registration\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Default User Role\n                </label>\n                <Controller\n                  name=\"defaultUserRole\"\n                  control={generalForm.control}\n                  render={({ field }) => (\n                    <select\n                      {...field}\n                      className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    >\n                      <option value=\"user\">User</option>\n                      <option value=\"member\">Member</option>\n                      <option value=\"viewer\">Viewer</option>\n                    </select>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex items-center\">\n                <Controller\n                  name=\"emailVerificationRequired\"\n                  control={generalForm.control}\n                  render={({ field }) => (\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                    />\n                  )}\n                />\n                <label className=\"ml-3 block text-sm font-medium text-gray-700\">\n                  Require Email Verification\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  User Invite Expiration (Days)\n                </label>\n                <Controller\n                  name=\"userInviteExpirationDays\"\n                  control={generalForm.control}\n                  render={({ field }) => (\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"365\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    />\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <button\n                type=\"submit\"\n                disabled={isSaving}\n                className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n              >\n                {isSaving ? 'Saving...' : 'Save General Settings'}\n              </button>\n            </div>\n          </form>\n        )\n\n      case 'security':\n        return (\n          <form onSubmit={securityForm.handleSubmit(handleSaveSecurity)} className=\"space-y-8\">\n            {/* Password Policy */}\n            <div>\n              <h4 className=\"text-lg font-medium text-gray-900 mb-4\">Password Policy</h4>\n              <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">\n                    Minimum Length\n                  </label>\n                  <Controller\n                    name=\"passwordPolicy.minLength\"\n                    control={securityForm.control}\n                    render={({ field }) => (\n                      <input\n                        type=\"number\"\n                        min=\"8\"\n                        max=\"128\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                      />\n                    )}\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  {[\n                    { key: 'requireUppercase', label: 'Require Uppercase' },\n                    { key: 'requireLowercase', label: 'Require Lowercase' },\n                    { key: 'requireNumbers', label: 'Require Numbers' },\n                    { key: 'requireSpecialChars', label: 'Require Special Characters' },\n                  ].map(({ key, label }) => (\n                    <div key={key} className=\"flex items-center\">\n                      <Controller\n                        name={`passwordPolicy.${key}` as any}\n                        control={securityForm.control}\n                        render={({ field }) => (\n                          <input\n                            type=\"checkbox\"\n                            checked={field.value}\n                            onChange={field.onChange}\n                            className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                          />\n                        )}\n                      />\n                      <label className=\"ml-3 block text-sm text-gray-700\">\n                        {label}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Session Settings */}\n            <div>\n              <h4 className=\"text-lg font-medium text-gray-900 mb-4\">Session Settings</h4>\n              <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">\n                    Session Timeout (Minutes)\n                  </label>\n                  <Controller\n                    name=\"sessionSettings.timeoutMinutes\"\n                    control={securityForm.control}\n                    render={({ field }) => (\n                      <input\n                        type=\"number\"\n                        min=\"5\"\n                        max=\"1440\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                      />\n                    )}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">\n                    Max Concurrent Sessions\n                  </label>\n                  <Controller\n                    name=\"sessionSettings.maxConcurrentSessions\"\n                    control={securityForm.control}\n                    render={({ field }) => (\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"50\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <button\n                type=\"submit\"\n                disabled={isSaving}\n                className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n              >\n                {isSaving ? 'Saving...' : 'Save Security Settings'}\n              </button>\n            </div>\n          </form>\n        )\n\n      case 'branding':\n        return (\n          <form onSubmit={brandingForm.handleSubmit(handleSaveBranding)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Primary Color\n                </label>\n                <Controller\n                  name=\"primaryColor\"\n                  control={brandingForm.control}\n                  render={({ field }) => (\n                    <input\n                      type=\"color\"\n                      {...field}\n                      className=\"mt-1 block w-full h-10 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    />\n                  )}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Secondary Color\n                </label>\n                <Controller\n                  name=\"secondaryColor\"\n                  control={brandingForm.control}\n                  render={({ field }) => (\n                    <input\n                      type=\"color\"\n                      {...field}\n                      className=\"mt-1 block w-full h-10 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    />\n                  )}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Logo URL\n                </label>\n                <Controller\n                  name=\"logoUrl\"\n                  control={brandingForm.control}\n                  render={({ field }) => (\n                    <input\n                      type=\"url\"\n                      {...field}\n                      className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                      placeholder=\"https://example.com/logo.png\"\n                    />\n                  )}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Theme\n                </label>\n                <Controller\n                  name=\"theme\"\n                  control={brandingForm.control}\n                  render={({ field }) => (\n                    <select\n                      {...field}\n                      className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    >\n                      <option value=\"light\">Light</option>\n                      <option value=\"dark\">Dark</option>\n                      <option value=\"auto\">Auto</option>\n                    </select>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center\">\n              <Controller\n                name=\"hideProviderBranding\"\n                control={brandingForm.control}\n                render={({ field }) => (\n                  <input\n                    type=\"checkbox\"\n                    checked={field.value}\n                    onChange={field.onChange}\n                    className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                  />\n                )}\n              />\n              <label className=\"ml-3 block text-sm font-medium text-gray-700\">\n                Hide Provider Branding\n              </label>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <button\n                type=\"submit\"\n                disabled={isSaving}\n                className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n              >\n                {isSaving ? 'Saving...' : 'Save Branding Settings'}\n              </button>\n            </div>\n          </form>\n        )\n\n      case 'quotas':\n        return (\n          <form onSubmit={quotasForm.handleSubmit(handleSaveQuotas)} className=\"space-y-6\">\n            <div className=\"space-y-6\">\n              {[\n                { key: 'users', label: 'Users' },\n                { key: 'organizations', label: 'Organizations' },\n                { key: 'storage', label: 'Storage (GB)' },\n                { key: 'apiCalls', label: 'API Calls (per month)' },\n                { key: 'bandwidth', label: 'Bandwidth (GB per month)' },\n              ].map(({ key, label }) => (\n                <div key={key} className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">\n                      {label} - Hard Limit\n                    </label>\n                    <Controller\n                      name={`${key}.limit` as any}\n                      control={quotasForm.control}\n                      render={({ field }) => (\n                        <input\n                          type=\"number\"\n                          min=\"-1\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                          placeholder=\"-1 for unlimited\"\n                        />\n                      )}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">\n                      {label} - Warning Threshold\n                    </label>\n                    <Controller\n                      name={`${key}.softLimit` as any}\n                      control={quotasForm.control}\n                      render={({ field }) => (\n                        <input\n                          type=\"number\"\n                          min=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                          className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                        />\n                      )}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex justify-end\">\n              <button\n                type=\"submit\"\n                disabled={isSaving}\n                className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n              >\n                {isSaving ? 'Saving...' : 'Save Quota Settings'}\n              </button>\n            </div>\n          </form>\n        )\n\n      default:\n        return (\n          <div className=\"text-center py-12\">\n            <InformationCircleIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">Coming Soon</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              This configuration section is under development.\n            </p>\n          </div>\n        )\n    }\n  }\n\n  if (isLoadingSettings || isLoadingQuotas) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto\"></div>\n        <p className=\"mt-4 text-sm text-gray-500\">Loading tenant configuration...</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"border-b border-gray-200 pb-5\">\n        <h3 className=\"text-2xl font-semibold leading-6 text-gray-900\">\n          Tenant Configuration\n        </h3>\n        <p className=\"mt-2 text-sm text-gray-700\">\n          Manage your tenant settings, security policies, branding, and resource quotas.\n        </p>\n      </div>\n\n      {/* Save Status */}\n      {saveStatus === 'success' && (\n        <div className=\"rounded-md bg-green-50 p-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <CheckCircleIcon className=\"h-5 w-5 text-green-400\" />\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-green-800\">\n                Settings saved successfully!\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {saveStatus === 'error' && (\n        <div className=\"rounded-md bg-red-50 p-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <ExclamationTriangleIcon className=\"h-5 w-5 text-red-400\" />\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-red-800\">\n                Failed to save settings. Please try again.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"lg:grid lg:grid-cols-12 lg:gap-x-5\">\n        {/* Sidebar Navigation */}\n        <aside className=\"py-6 px-2 sm:px-6 lg:py-0 lg:px-0 lg:col-span-3\">\n          <nav className=\"space-y-1\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.key}\n                onClick={() => setActiveTab(tab.key)}\n                className={`group rounded-md px-3 py-2 flex items-center text-sm font-medium w-full text-left ${\n                  activeTab === tab.key\n                    ? 'bg-gray-50 text-indigo-700 hover:text-indigo-700 hover:bg-gray-50'\n                    : 'text-gray-900 hover:text-gray-900 hover:bg-gray-50'\n                }`}\n              >\n                <tab.icon\n                  className={`flex-shrink-0 -ml-1 mr-3 h-6 w-6 ${\n                    activeTab === tab.key\n                      ? 'text-indigo-500 group-hover:text-indigo-500'\n                      : 'text-gray-400 group-hover:text-gray-500'\n                  }`}\n                />\n                <span className=\"truncate\">{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </aside>\n\n        {/* Main Content */}\n        <div className=\"space-y-6 sm:px-6 lg:px-0 lg:col-span-9\">\n          <div className=\"bg-white shadow sm:rounded-md\">\n            <div className=\"px-4 py-5 sm:p-6\">\n              <div className=\"mb-6\">\n                <h4 className=\"text-lg font-medium text-gray-900\">\n                  {tabs.find(tab => tab.key === activeTab)?.label}\n                </h4>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  {tabs.find(tab => tab.key === activeTab)?.description}\n                </p>\n              </div>\n\n              {renderTabContent()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TenantConfigurationManager","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/tenants/TenantManagementDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FunnelIcon' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EllipsisVerticalIcon' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChartBarIcon' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CogIcon' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createTenantId' is defined but never used.","line":51,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an error typed value.","line":62,"column":11,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":62,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showCreateModal' is assigned a value but never used.","line":64,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":25},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":99,"column":17,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":99,"endColumn":36,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[2821,2822],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":107,"column":17,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":107,"endColumn":36,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[3029,3030],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'tenants' logical expression could make the dependencies of useMemo Hook (at line 162) change on every render. To fix this, wrap the initialization of 'tenants' in its own useMemo() Hook.","line":123,"column":9,"nodeType":"VariableDeclarator","endLine":123,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":123,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":123,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3517,3519],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":124,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":124,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3569,3571],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":127,"column":23,"nodeType":"Identifier","endLine":127,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCreateTenant' is assigned a value but never used.","line":164,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":27},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":168,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":168,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4464,4464],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4464,4464],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleUpdateTenant' is assigned a value but never used.","line":174,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":27},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":184,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":184,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4848,4848],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4848,4848],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":197,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":197,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5196,5196],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5196,5196],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":209,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":209,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5542,5542],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5542,5542],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":218,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":218,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5777,5777],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5777,5777],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":444,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":444,"endColumn":57},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":573,"column":43,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":573,"endColumn":82},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":581,"column":43,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":581,"endColumn":81},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":589,"column":41,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":589,"endColumn":78}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tenant Management Dashboard\n *\n * Comprehensive multi-tenant administration interface supporting:\n * - Tenant creation, configuration, and lifecycle management\n * - Hierarchical tenant relationships and organization\n * - Real-time tenant analytics and performance monitoring\n * - Cross-tenant reporting and administrative operations\n * - Tenant-specific branding and customization settings\n */\n\nimport React, { useState, useMemo } from 'react'\nimport {\n  PlusIcon,\n  MagnifyingGlassIcon,\n  FunnelIcon,\n  EllipsisVerticalIcon,\n  BuildingOfficeIcon,\n  UsersIcon,\n  ChartBarIcon,\n  CogIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  PauseIcon,\n  PlayIcon,\n  TrashIcon,\n  PencilIcon,\n  EyeIcon,\n} from '@heroicons/react/24/outline'\n\nimport {\n  useListTenantsQuery,\n  useCreateTenantMutation,\n  useUpdateTenantMutation,\n  useDeleteTenantMutation,\n  useSuspendTenantMutation,\n  useActivateTenantMutation,\n  useGetTenantAnalyticsQuery,\n  useGetTenantHierarchyQuery,\n} from '@/store/api/tenantApi'\nimport { useMultiTenantAdmin } from '@/hooks/useTenantContext'\nimport type {\n  Tenant,\n  TenantId,\n  TenantStatus,\n  TenantTier,\n  CreateTenantRequest,\n  UpdateTenantRequest,\n} from '@/types/multitenancy'\nimport { createTenantId } from '@/types/multitenancy'\n\n// Icons for better UI\n\ninterface TenantManagementDashboardProps {\n  className?: string\n}\n\nconst TenantManagementDashboard: React.FC<TenantManagementDashboardProps> = ({\n  className = '',\n}) => {\n  const { isMultiTenantAdmin } = useMultiTenantAdmin()\n  const [selectedTenant, setSelectedTenant] = useState<Tenant | null>(null)\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [showEditModal, setShowEditModal] = useState(false)\n  const [filters, setFilters] = useState({\n    status: '' as TenantStatus | '',\n    tier: '' as TenantTier | '',\n    search: '',\n  })\n  const [currentPage, setCurrentPage] = useState(1)\n  const [selectedTenants, setSelectedTenants] = useState<Set<TenantId>>(new Set())\n\n  // API hooks\n  const {\n    data: tenantsResponse,\n    isLoading: isLoadingTenants,\n    error: tenantsError,\n    refetch: refetchTenants,\n  } = useListTenantsQuery({\n    page: currentPage,\n    pageSize: 20,\n    ...(filters.status && { status: filters.status }),\n    ...(filters.tier && { tier: filters.tier }),\n    ...(filters.search && { search: filters.search }),\n    sortBy: 'createdAt',\n    sortOrder: 'desc',\n  })\n\n  const [createTenant] = useCreateTenantMutation()\n  const [updateTenant] = useUpdateTenantMutation()\n  const [deleteTenant] = useDeleteTenantMutation()\n  const [suspendTenant] = useSuspendTenantMutation()\n  const [activateTenant] = useActivateTenantMutation()\n\n  // Analytics for selected tenant\n  const { data: tenantAnalytics } = useGetTenantAnalyticsQuery(\n    {\n      tenantId: selectedTenant?.id!,\n      period: 'month',\n    },\n    { skip: !selectedTenant }\n  )\n\n  // Tenant hierarchy for selected tenant\n  const { data: tenantHierarchy } = useGetTenantHierarchyQuery(\n    { tenantId: selectedTenant?.id! },\n    { skip: !selectedTenant }\n  )\n\n  if (!isMultiTenantAdmin) {\n    return (\n      <div className=\"text-center py-12\">\n        <ExclamationTriangleIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n        <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">Access Restricted</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">\n          You don't have permission to access tenant management.\n        </p>\n      </div>\n    )\n  }\n\n  const tenants = tenantsResponse?.tenants || []\n  const totalTenants = tenantsResponse?.total || 0\n\n  // Tenant statistics\n  const tenantStats = useMemo(() => {\n    const stats = {\n      total: totalTenants,\n      active: 0,\n      suspended: 0,\n      trial: 0,\n      pending: 0,\n      byTier: {\n        starter: 0,\n        professional: 0,\n        enterprise: 0,\n        white_label: 0,\n      },\n    }\n\n    tenants.forEach(tenant => {\n      switch (tenant.status) {\n        case 'active':\n          stats.active++\n          break\n        case 'suspended':\n          stats.suspended++\n          break\n        case 'trial':\n          stats.trial++\n          break\n        case 'pending_setup':\n          stats.pending++\n          break\n      }\n\n      stats.byTier[tenant.tier]++\n    })\n\n    return stats\n  }, [tenants, totalTenants])\n\n  const handleCreateTenant = async (data: CreateTenantRequest) => {\n    try {\n      await createTenant(data).unwrap()\n      setShowCreateModal(false)\n      refetchTenants()\n    } catch (error) {\n      console.error('Failed to create tenant:', error)\n    }\n  }\n\n  const handleUpdateTenant = async (updates: UpdateTenantRequest) => {\n    if (!selectedTenant) return\n\n    try {\n      await updateTenant({\n        tenantId: selectedTenant.id,\n        updates,\n      }).unwrap()\n      setShowEditModal(false)\n      setSelectedTenant(null)\n      refetchTenants()\n    } catch (error) {\n      console.error('Failed to update tenant:', error)\n    }\n  }\n\n  const handleDeleteTenant = async (tenantId: TenantId) => {\n    if (!confirm('Are you sure you want to delete this tenant? This action cannot be undone.')) {\n      return\n    }\n\n    try {\n      await deleteTenant({ tenantId }).unwrap()\n      refetchTenants()\n    } catch (error) {\n      console.error('Failed to delete tenant:', error)\n    }\n  }\n\n  const handleSuspendTenant = async (tenantId: TenantId) => {\n    const reason = prompt('Please provide a reason for suspending this tenant:')\n    if (!reason) return\n\n    try {\n      await suspendTenant({ tenantId, reason }).unwrap()\n      refetchTenants()\n    } catch (error) {\n      console.error('Failed to suspend tenant:', error)\n    }\n  }\n\n  const handleActivateTenant = async (tenantId: TenantId) => {\n    try {\n      await activateTenant({ tenantId }).unwrap()\n      refetchTenants()\n    } catch (error) {\n      console.error('Failed to activate tenant:', error)\n    }\n  }\n\n  const getStatusColor = (status: TenantStatus) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800'\n      case 'suspended':\n        return 'bg-red-100 text-red-800'\n      case 'trial':\n        return 'bg-blue-100 text-blue-800'\n      case 'pending_setup':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'archived':\n        return 'bg-gray-100 text-gray-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getTierBadge = (tier: TenantTier) => {\n    const colors = {\n      starter: 'bg-gray-100 text-gray-800',\n      professional: 'bg-blue-100 text-blue-800',\n      enterprise: 'bg-purple-100 text-purple-800',\n      white_label: 'bg-indigo-100 text-indigo-800',\n    }\n\n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colors[tier]}`}>\n        {tier.replace('_', ' ')}\n      </span>\n    )\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold leading-6 text-gray-900\">\n            Tenant Management\n          </h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Manage all tenants, their settings, and monitor their performance across the platform.\n          </p>\n        </div>\n        <div className=\"mt-4 sm:ml-16 sm:mt-0 sm:flex-none\">\n          <button\n            type=\"button\"\n            onClick={() => setShowCreateModal(true)}\n            className=\"block rounded-md bg-indigo-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n          >\n            <PlusIcon className=\"h-5 w-5 inline mr-2\" />\n            Create Tenant\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <BuildingOfficeIcon className=\"h-6 w-6 text-gray-400\" />\n              </div>\n              <div className=\"ml-5 w-0 flex-1\">\n                <dl>\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">Total Tenants</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">{tenantStats.total}</dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <CheckCircleIcon className=\"h-6 w-6 text-green-400\" />\n              </div>\n              <div className=\"ml-5 w-0 flex-1\">\n                <dl>\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">Active Tenants</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">{tenantStats.active}</dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <XCircleIcon className=\"h-6 w-6 text-red-400\" />\n              </div>\n              <div className=\"ml-5 w-0 flex-1\">\n                <dl>\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">Suspended</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">{tenantStats.suspended}</dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <UsersIcon className=\"h-6 w-6 text-blue-400\" />\n              </div>\n              <div className=\"ml-5 w-0 flex-1\">\n                <dl>\n                  <dt className=\"text-sm font-medium text-gray-500 truncate\">Trial Tenants</dt>\n                  <dd className=\"text-lg font-medium text-gray-900\">{tenantStats.trial}</dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"bg-white shadow rounded-lg\">\n        <div className=\"px-4 py-5 sm:p-6\">\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-4\">\n            <div>\n              <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700\">\n                Search\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  type=\"text\"\n                  name=\"search\"\n                  id=\"search\"\n                  value={filters.search}\n                  onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n                  className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                  placeholder=\"Search tenants...\"\n                />\n                <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n                  <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"status-filter\" className=\"block text-sm font-medium text-gray-700\">\n                Status\n              </label>\n              <select\n                id=\"status-filter\"\n                name=\"status-filter\"\n                value={filters.status}\n                onChange={(e) => setFilters({ ...filters, status: e.target.value as TenantStatus | '' })}\n                className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n              >\n                <option value=\"\">All Statuses</option>\n                <option value=\"active\">Active</option>\n                <option value=\"suspended\">Suspended</option>\n                <option value=\"trial\">Trial</option>\n                <option value=\"pending_setup\">Pending Setup</option>\n                <option value=\"archived\">Archived</option>\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"tier-filter\" className=\"block text-sm font-medium text-gray-700\">\n                Tier\n              </label>\n              <select\n                id=\"tier-filter\"\n                name=\"tier-filter\"\n                value={filters.tier}\n                onChange={(e) => setFilters({ ...filters, tier: e.target.value as TenantTier | '' })}\n                className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n              >\n                <option value=\"\">All Tiers</option>\n                <option value=\"starter\">Starter</option>\n                <option value=\"professional\">Professional</option>\n                <option value=\"enterprise\">Enterprise</option>\n                <option value=\"white_label\">White Label</option>\n              </select>\n            </div>\n\n            <div className=\"flex items-end\">\n              <button\n                type=\"button\"\n                onClick={() => setFilters({ status: '', tier: '', search: '' })}\n                className=\"w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n              >\n                Clear Filters\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tenants Table */}\n      <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n        <div className=\"px-4 py-5 sm:p-6\">\n          <div className=\"flow-root\">\n            <div className=\"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n              <div className=\"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\">\n                {isLoadingTenants ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto\"></div>\n                    <p className=\"mt-4 text-sm text-gray-500\">Loading tenants...</p>\n                  </div>\n                ) : tenantsError ? (\n                  <div className=\"text-center py-12\">\n                    <ExclamationTriangleIcon className=\"mx-auto h-12 w-12 text-red-400\" />\n                    <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">Error Loading Tenants</h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">\n                      There was an error loading the tenants list.\n                    </p>\n                    <div className=\"mt-6\">\n                      <button\n                        type=\"button\"\n                        onClick={() => refetchTenants()}\n                        className=\"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500\"\n                      >\n                        Try Again\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <table className=\"min-w-full divide-y divide-gray-300\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                            checked={selectedTenants.size === tenants.length}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                setSelectedTenants(new Set(tenants.map(t => t.id)))\n                              } else {\n                                setSelectedTenants(new Set())\n                              }\n                            }}\n                          />\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Tenant\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Tier\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Created\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Last Active\n                        </th>\n                        <th scope=\"col\" className=\"relative px-6 py-3\">\n                          <span className=\"sr-only\">Actions</span>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {tenants.map((tenant) => (\n                        <tr key={tenant.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                              checked={selectedTenants.has(tenant.id)}\n                              onChange={(e) => {\n                                const newSelected = new Set(selectedTenants)\n                                if (e.target.checked) {\n                                  newSelected.add(tenant.id)\n                                } else {\n                                  newSelected.delete(tenant.id)\n                                }\n                                setSelectedTenants(newSelected)\n                              }}\n                            />\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"flex-shrink-0 h-10 w-10\">\n                                {tenant.branding?.logoUrl ? (\n                                  <img\n                                    className=\"h-10 w-10 rounded-lg object-cover\"\n                                    src={tenant.branding.logoUrl}\n                                    alt={`${tenant.name} logo`}\n                                  />\n                                ) : (\n                                  <div className=\"h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center\">\n                                    <BuildingOfficeIcon className=\"h-6 w-6 text-gray-400\" />\n                                  </div>\n                                )}\n                              </div>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {tenant.displayName}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {tenant.slug}\n                                  {tenant.customDomain && (\n                                    <span className=\"ml-2 text-blue-600\">\n                                      • {tenant.customDomain}\n                                    </span>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(tenant.status)}`}>\n                              {tenant.status.replace('_', ' ')}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {getTierBadge(tenant.tier)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {new Date(tenant.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {tenant.lastActiveAt ? new Date(tenant.lastActiveAt).toLocaleDateString() : 'Never'}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              <button\n                                onClick={() => setSelectedTenant(tenant)}\n                                className=\"text-indigo-600 hover:text-indigo-900\"\n                                title=\"View Details\"\n                              >\n                                <EyeIcon className=\"h-5 w-5\" />\n                              </button>\n                              <button\n                                onClick={() => {\n                                  setSelectedTenant(tenant)\n                                  setShowEditModal(true)\n                                }}\n                                className=\"text-gray-600 hover:text-gray-900\"\n                                title=\"Edit Tenant\"\n                              >\n                                <PencilIcon className=\"h-5 w-5\" />\n                              </button>\n                              {tenant.status === 'suspended' ? (\n                                <button\n                                  onClick={() => handleActivateTenant(tenant.id)}\n                                  className=\"text-green-600 hover:text-green-900\"\n                                  title=\"Activate Tenant\"\n                                >\n                                  <PlayIcon className=\"h-5 w-5\" />\n                                </button>\n                              ) : (\n                                <button\n                                  onClick={() => handleSuspendTenant(tenant.id)}\n                                  className=\"text-yellow-600 hover:text-yellow-900\"\n                                  title=\"Suspend Tenant\"\n                                >\n                                  <PauseIcon className=\"h-5 w-5\" />\n                                </button>\n                              )}\n                              <button\n                                onClick={() => handleDeleteTenant(tenant.id)}\n                                className=\"text-red-600 hover:text-red-900\"\n                                title=\"Delete Tenant\"\n                              >\n                                <TrashIcon className=\"h-5 w-5\" />\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Pagination */}\n          {tenantsResponse && tenantsResponse.total > 20 && (\n            <div className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\">\n              <div className=\"flex-1 flex justify-between sm:hidden\">\n                <button\n                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                  disabled={currentPage === 1}\n                  className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50\"\n                >\n                  Previous\n                </button>\n                <button\n                  onClick={() => setCurrentPage(currentPage + 1)}\n                  disabled={!tenantsResponse.hasNext}\n                  className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50\"\n                >\n                  Next\n                </button>\n              </div>\n              <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-700\">\n                    Showing{' '}\n                    <span className=\"font-medium\">{(currentPage - 1) * 20 + 1}</span> to{' '}\n                    <span className=\"font-medium\">\n                      {Math.min(currentPage * 20, tenantsResponse.total)}\n                    </span>{' '}\n                    of <span className=\"font-medium\">{tenantsResponse.total}</span> results\n                  </p>\n                </div>\n                <div>\n                  <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\">\n                    <button\n                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                      disabled={currentPage === 1}\n                      className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50\"\n                    >\n                      Previous\n                    </button>\n                    <button\n                      onClick={() => setCurrentPage(currentPage + 1)}\n                      disabled={!tenantsResponse.hasNext}\n                      className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50\"\n                    >\n                      Next\n                    </button>\n                  </nav>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Tenant Details Panel */}\n      {selectedTenant && !showEditModal && (\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <div className=\"px-4 py-5 sm:p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                {selectedTenant.displayName} Details\n              </h3>\n              <button\n                onClick={() => setSelectedTenant(null)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <XCircleIcon className=\"h-6 w-6\" />\n              </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\n              {/* Basic Information */}\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 mb-4\">Basic Information</h4>\n                <dl className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <dt className=\"text-sm text-gray-500\">ID:</dt>\n                    <dd className=\"text-sm text-gray-900\">{selectedTenant.id}</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"text-sm text-gray-500\">Slug:</dt>\n                    <dd className=\"text-sm text-gray-900\">{selectedTenant.slug}</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"text-sm text-gray-500\">Status:</dt>\n                    <dd>\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(selectedTenant.status)}`}>\n                        {selectedTenant.status.replace('_', ' ')}\n                      </span>\n                    </dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"text-sm text-gray-500\">Tier:</dt>\n                    <dd>{getTierBadge(selectedTenant.tier)}</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"text-sm text-gray-500\">Region:</dt>\n                    <dd className=\"text-sm text-gray-900\">{selectedTenant.region}</dd>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <dt className=\"text-sm text-gray-500\">Timezone:</dt>\n                    <dd className=\"text-sm text-gray-900\">{selectedTenant.timezone}</dd>\n                  </div>\n                </dl>\n              </div>\n\n              {/* Resource Usage */}\n              {tenantAnalytics && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-900 mb-4\">Usage Statistics</h4>\n                  <dl className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <dt className=\"text-sm text-gray-500\">Active Users:</dt>\n                      <dd className=\"text-sm text-gray-900\">{tenantAnalytics.usage.activeUsers}</dd>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <dt className=\"text-sm text-gray-500\">Total Sessions:</dt>\n                      <dd className=\"text-sm text-gray-900\">{tenantAnalytics.usage.totalSessions.toLocaleString()}</dd>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <dt className=\"text-sm text-gray-500\">API Calls:</dt>\n                      <dd className=\"text-sm text-gray-900\">{tenantAnalytics.usage.apiCalls.toLocaleString()}</dd>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <dt className=\"text-sm text-gray-500\">Storage Used:</dt>\n                      <dd className=\"text-sm text-gray-900\">{(tenantAnalytics.usage.storageUsed / 1024).toFixed(2)} GB</dd>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <dt className=\"text-sm text-gray-500\">Monthly Revenue:</dt>\n                      <dd className=\"text-sm text-gray-900\">${tenantAnalytics.business.revenue.toFixed(2)}</dd>\n                    </div>\n                  </dl>\n                </div>\n              )}\n            </div>\n\n            {/* Tenant Hierarchy */}\n            {tenantHierarchy && (\n              <div className=\"mt-6\">\n                <h4 className=\"text-sm font-medium text-gray-900 mb-4\">Tenant Hierarchy</h4>\n                <div className=\"space-y-2\">\n                  {tenantHierarchy.ancestors.length > 0 && (\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Parent Tenants:</p>\n                      <div className=\"flex flex-wrap gap-2 mt-1\">\n                        {tenantHierarchy.ancestors.map(ancestor => (\n                          <span\n                            key={ancestor.id}\n                            className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\"\n                          >\n                            {ancestor.displayName}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {tenantHierarchy.children.length > 0 && (\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Child Tenants:</p>\n                      <div className=\"flex flex-wrap gap-2 mt-1\">\n                        {tenantHierarchy.children.map(child => (\n                          <span\n                            key={child.id}\n                            className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\"\n                          >\n                            {child.displayName}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default TenantManagementDashboard","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/tenants/TenantProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[810,813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[810,813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1136,1139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1136,1139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1357,1360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1357,1360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1404,1407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1404,1407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1453,1456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1453,1456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1504,1507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1504,1507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1569,1572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1569,1572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":184,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":184,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5559,5561],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6505,6508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6505,6508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tenant' is assigned a value but never used.","line":276,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":291,"column":15,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":309,"endColumn":12,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7952,8666],"text":"fallbackLogo ?? (\n            <div className={`${logoClassName} bg-gray-200 rounded flex items-center justify-center`}>\n              <svg\n                className=\"h-4 w-4 text-gray-400\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n                />\n              </svg>\n            </div>\n          )"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":325,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8912,8915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8912,8915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":366,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":366,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":366,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":366,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .charAt on an `any` value.","line":366,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":366,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toUpperCase on an `any` value.","line":366,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":366,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":366,"column":50,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":366,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .slice on an `any` value.","line":366,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":366,"endColumn":65}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tenant Provider Component\n *\n * Provides tenant context throughout the React application with:\n * - Automatic tenant detection and resolution\n * - Tenant branding application and customization\n * - Cross-tenant routing and navigation utilities\n * - Tenant-aware component rendering and access control\n * - Real-time tenant settings and configuration management\n */\n\nimport React, { createContext, useContext, useEffect, ReactNode } from 'react'\n\nimport { useTenantContext } from '@/hooks/useTenantContext'\nimport type {\n  Tenant,\n  TenantContext,\n  TenantSettings,\n} from '@/types/multitenancy'\n\n// Create tenant context\ninterface TenantContextValue {\n  tenant: Tenant | null\n  tenantSettings: TenantSettings | null\n  tenantContext: TenantContext | null\n  isLoading: boolean\n  isError: boolean\n  error: any\n  resolutionSource: 'domain' | 'subdomain' | 'path' | 'user' | 'none'\n  isResolved: boolean\n\n  // Utilities\n  routing: {\n    generateTenantUrl: (path: string, tenantSlug?: string) => string\n    navigateToTenant: (tenantSlug: string, path?: string) => void\n    isTenantRoute: () => boolean\n    getCurrentTenantRoute: () => any\n  }\n  branding: {\n    applyBranding: () => void\n    getLogoUrl: () => string | undefined\n    getDisplayName: () => string\n    shouldHideProviderBranding: () => boolean\n  }\n  quotas: {\n    isQuotaExceeded: (quotaType: any) => boolean\n    getQuotaUsage: (quotaType: any) => number\n    isQuotaNearLimit: (quotaType: any) => boolean\n    getRemainingQuota: (quotaType: any) => number\n  }\n  features: {\n    isFeatureEnabled: (feature: any) => boolean\n    getEnabledFeatures: () => string[]\n    hasPremiumFeatures: () => boolean\n  }\n  refetch: () => void\n}\n\nconst TenantContextObj = createContext<TenantContextValue | null>(null)\n\ninterface TenantProviderProps {\n  children: ReactNode\n  enableBrandingAutoApply?: boolean\n  fallbackComponent?: ReactNode\n  loadingComponent?: ReactNode\n  errorComponent?: ReactNode\n}\n\n/**\n * Tenant Provider component that manages multi-tenant context\n */\nexport const TenantProvider: React.FC<TenantProviderProps> = ({\n  children,\n  enableBrandingAutoApply = true,\n  fallbackComponent,\n  loadingComponent,\n  errorComponent,\n}) => {\n  const tenantHookData = useTenantContext()\n\n  // Auto-apply branding when tenant changes\n  useEffect(() => {\n    if (enableBrandingAutoApply && tenantHookData.tenant) {\n      tenantHookData.branding.applyBranding()\n    }\n  }, [tenantHookData.tenant, tenantHookData.branding, enableBrandingAutoApply])\n\n  // Handle loading state\n  if (tenantHookData.isLoading) {\n    if (loadingComponent) {\n      return <>{loadingComponent}</>\n    }\n\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto\"></div>\n          <p className=\"mt-4 text-sm text-gray-600\">Loading tenant configuration...</p>\n        </div>\n      </div>\n    )\n  }\n\n  // Handle error state\n  if (tenantHookData.isError) {\n    if (errorComponent) {\n      return <>{errorComponent}</>\n    }\n\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100\">\n            <svg\n              className=\"h-6 w-6 text-red-600\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z\"\n              />\n            </svg>\n          </div>\n          <h3 className=\"mt-4 text-sm font-medium text-gray-900\">Tenant Configuration Error</h3>\n          <p className=\"mt-2 text-sm text-gray-500\">\n            Unable to load tenant configuration. Please try again.\n          </p>\n          <button\n            onClick={() => tenantHookData.refetch()}\n            className=\"mt-4 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  // Handle unresolved tenant (for routes that don't require tenant context)\n  if (!tenantHookData.isResolved) {\n    if (fallbackComponent) {\n      return <>{fallbackComponent}</>\n    }\n\n    // Continue without tenant context for public routes\n  }\n\n  return (\n    <TenantContextObj.Provider value={tenantHookData}>\n      {children}\n    </TenantContextObj.Provider>\n  )\n}\n\n/**\n * Hook to consume tenant context\n */\nexport const useTenant = (): TenantContextValue => {\n  const context = useContext(TenantContextObj)\n  if (!context) {\n    throw new Error('useTenant must be used within a TenantProvider')\n  }\n  return context\n}\n\n/**\n * Higher-order component for tenant-aware components\n */\nexport function withTenantContext<P extends object>(\n  Component: React.ComponentType<P>\n): React.ComponentType<P> {\n  const TenantAwareComponent: React.FC<P> = (props) => {\n    return (\n      <TenantProvider>\n        <Component {...props} />\n      </TenantProvider>\n    )\n  }\n\n  TenantAwareComponent.displayName = `withTenantContext(${Component.displayName || Component.name})`\n\n  return TenantAwareComponent\n}\n\n/**\n * Tenant Guard component for conditional rendering based on tenant context\n */\ninterface TenantGuardProps {\n  children: ReactNode\n  requireTenant?: boolean\n  allowedTiers?: string[]\n  requiredFeatures?: string[]\n  fallback?: ReactNode\n}\n\nexport const TenantGuard: React.FC<TenantGuardProps> = ({\n  children,\n  requireTenant = true,\n  allowedTiers = [],\n  requiredFeatures = [],\n  fallback = null,\n}) => {\n  const { tenant, tenantContext, features } = useTenant()\n\n  // Check if tenant is required\n  if (requireTenant && !tenant) {\n    return <>{fallback}</>\n  }\n\n  // Check allowed tiers\n  if (allowedTiers.length > 0 && tenantContext && !allowedTiers.includes(tenantContext.tier)) {\n    return <>{fallback}</>\n  }\n\n  // Check required features\n  if (requiredFeatures.length > 0) {\n    const hasAllFeatures = requiredFeatures.every(feature =>\n      features.isFeatureEnabled(feature as any)\n    )\n    if (!hasAllFeatures) {\n      return <>{fallback}</>\n    }\n  }\n\n  return <>{children}</>\n}\n\n/**\n * Tenant-aware link component\n */\ninterface TenantLinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  to: string\n  tenantSlug?: string\n  children: ReactNode\n}\n\nexport const TenantLink: React.FC<TenantLinkProps> = ({\n  to,\n  tenantSlug,\n  children,\n  ...anchorProps\n}) => {\n  const { routing } = useTenant()\n\n  const tenantAwareUrl = routing.generateTenantUrl(to, tenantSlug)\n\n  return (\n    <a href={tenantAwareUrl} {...anchorProps}>\n      {children}\n    </a>\n  )\n}\n\n/**\n * Tenant branding component that displays tenant-specific branding\n */\ninterface TenantBrandingProps {\n  showLogo?: boolean\n  showName?: boolean\n  logoClassName?: string\n  nameClassName?: string\n  fallbackLogo?: ReactNode\n}\n\nexport const TenantBranding: React.FC<TenantBrandingProps> = ({\n  showLogo = true,\n  showName = true,\n  logoClassName = 'h-8 w-auto',\n  nameClassName = 'text-xl font-semibold text-gray-900',\n  fallbackLogo,\n}) => {\n  const { branding, tenant } = useTenant()\n\n  const logoUrl = branding.getLogoUrl()\n  const displayName = branding.getDisplayName()\n\n  return (\n    <div className=\"flex items-center space-x-3\">\n      {showLogo && (\n        <div>\n          {logoUrl ? (\n            <img\n              className={logoClassName}\n              src={logoUrl}\n              alt={`${displayName} logo`}\n            />\n          ) : fallbackLogo ? (\n            fallbackLogo\n          ) : (\n            <div className={`${logoClassName} bg-gray-200 rounded flex items-center justify-center`}>\n              <svg\n                className=\"h-4 w-4 text-gray-400\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      )}\n      {showName && (\n        <h1 className={nameClassName}>\n          {displayName}\n        </h1>\n      )}\n    </div>\n  )\n}\n\n/**\n * Tenant quota indicator component\n */\ninterface TenantQuotaIndicatorProps {\n  quotaType: any // Would be keyof TenantContext['quotas']\n  showLabel?: boolean\n  showPercentage?: boolean\n  showRemaining?: boolean\n  className?: string\n  warningThreshold?: number\n  criticalThreshold?: number\n}\n\nexport const TenantQuotaIndicator: React.FC<TenantQuotaIndicatorProps> = ({\n  quotaType,\n  showLabel = true,\n  showPercentage = true,\n  showRemaining = false,\n  className = '',\n  warningThreshold = 80,\n  criticalThreshold = 95,\n}) => {\n  const { quotas } = useTenant()\n\n  const usage = quotas.getQuotaUsage(quotaType)\n  const remaining = quotas.getRemainingQuota(quotaType)\n  const isExceeded = quotas.isQuotaExceeded(quotaType)\n\n  const getProgressColor = () => {\n    if (isExceeded || usage >= criticalThreshold) return 'bg-red-600'\n    if (usage >= warningThreshold) return 'bg-yellow-500'\n    return 'bg-green-600'\n  }\n\n  const getBackgroundColor = () => {\n    if (isExceeded || usage >= criticalThreshold) return 'bg-red-100'\n    if (usage >= warningThreshold) return 'bg-yellow-100'\n    return 'bg-green-100'\n  }\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {showLabel && (\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"font-medium text-gray-700\">\n            {quotaType.charAt(0).toUpperCase() + quotaType.slice(1)} Usage\n          </span>\n          {showPercentage && (\n            <span className={`font-medium ${\n              isExceeded ? 'text-red-600' :\n              usage >= warningThreshold ? 'text-yellow-600' :\n              'text-gray-600'\n            }`}>\n              {usage.toFixed(1)}%\n            </span>\n          )}\n        </div>\n      )}\n\n      <div className={`w-full ${getBackgroundColor()} rounded-full h-2`}>\n        <div\n          className={`h-2 rounded-full transition-all duration-300 ${getProgressColor()}`}\n          style={{ width: `${Math.min(usage, 100)}%` }}\n        />\n      </div>\n\n      {showRemaining && remaining !== Infinity && (\n        <p className=\"text-xs text-gray-500\">\n          {remaining.toLocaleString()} remaining\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default TenantProvider","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/AutoSaveComponents.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AutoSaveStatus' is defined but never used.","line":6,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":10,"column":1,"nodeType":"Identifier","messageId":"unsafeCall","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":11,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":12,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":17,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":17,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":19,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":19,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":19,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveClass on an `error` typed value.","line":20,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":23,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":30,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":30,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":33,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":33,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":45,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":45,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":45,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":46,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":46,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":46,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":46,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":49,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":49,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":49,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalled on an `error` typed value.","line":49,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":52,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":57,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":57,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":57,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":57,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":57,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":61,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":61,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":62,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":62,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":67,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":67,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":70,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":75,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":75,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":75,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":75,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":75,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":78,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":89,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":89,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":89,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":89,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":92,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":92,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":92,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalled on an `error` typed value.","line":92,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":95,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":95,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":95,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":99,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":110,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":110,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":110,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":110,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":110,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":113,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":113,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalled on an `error` typed value.","line":113,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":43}],"suppressedMessages":[],"errorCount":57,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { vi } from 'vitest'\nimport { format } from 'date-fns'\n\nimport type { AutoSaveStatus } from '../../hooks/useAutoSave'\n\nimport { AutoSaveIndicator, UnsavedChangesWarning } from './AutoSaveComponents'\n\ndescribe('AutoSaveComponents', () => {\n  describe('AutoSaveIndicator', () => {\n    it('shows saving state with spinner', () => {\n      render(\n        <AutoSaveIndicator status=\"saving\" />\n      )\n\n      expect(screen.getByText('Saving...')).toBeInTheDocument()\n      const icon = screen.getByText('Saving...').previousElementSibling as HTMLElement | null\n      expect(icon).not.toBeNull()\n      expect(icon).toHaveClass('animate-spin')\n    })\n\n    it('shows saved state with timestamp', () => {\n      const lastSaved = new Date('2024-01-01T12:00:00Z')\n      render(\n        <AutoSaveIndicator status=\"saved\" lastSaved={lastSaved} />\n      )\n\n      const expectedText = `Saved ${format(lastSaved, 'h:mm a')}`\n      expect(screen.getByText(expectedText)).toBeInTheDocument()\n    })\n\n    it('shows error state with retry button', () => {\n      const mockRetry = vi.fn()\n      const error = new Error('Save failed')\n\n      render(\n        <AutoSaveIndicator\n          status=\"error\"\n          error={error}\n          onRetry={mockRetry}\n        />\n      )\n\n      expect(screen.getByText('Save failed')).toBeInTheDocument()\n      expect(screen.getByText('retry')).toBeInTheDocument()\n\n      screen.getByText('retry').click()\n      expect(mockRetry).toHaveBeenCalled()\n    })\n\n    it('shows idle state by default', () => {\n      render(\n        <AutoSaveIndicator status=\"idle\" />\n      )\n\n      expect(screen.getByText('Draft saved')).toBeInTheDocument()\n    })\n  })\n\n  describe('UnsavedChangesWarning', () => {\n    it('renders nothing when there are no unsaved changes', () => {\n      render(\n        <UnsavedChangesWarning hasUnsavedChanges={false} />\n      )\n\n      expect(screen.queryByText(/unsaved changes/)).not.toBeInTheDocument()\n    })\n\n    it('shows warning when there are unsaved changes', () => {\n      render(\n        <UnsavedChangesWarning hasUnsavedChanges={true} />\n      )\n\n      expect(screen.getByText(/You have unsaved changes/)).toBeInTheDocument()\n    })\n\n    it('shows save now button when onSave is provided', async () => {\n      const mockSave = vi.fn().mockResolvedValue(undefined)\n\n      render(\n        <UnsavedChangesWarning\n          hasUnsavedChanges={true}\n          onSave={mockSave}\n        />\n      )\n\n      const saveButton = screen.getByText('Save now')\n      expect(saveButton).toBeInTheDocument()\n\n      saveButton.click()\n      expect(mockSave).toHaveBeenCalled()\n\n      await waitFor(() => {\n        expect(saveButton).not.toBeDisabled()\n      })\n    })\n\n    it('shows discard button when onDiscard is provided', () => {\n      const mockDiscard = vi.fn()\n\n      render(\n        <UnsavedChangesWarning\n          hasUnsavedChanges={true}\n          onDiscard={mockDiscard}\n        />\n      )\n\n      const discardButton = screen.getByText('Discard changes')\n      expect(discardButton).toBeInTheDocument()\n\n      discardButton.click()\n      expect(mockDiscard).toHaveBeenCalled()\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/AutoSaveComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":142,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":142,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport { format } from 'date-fns'\nimport {\n  CloudIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ArrowPathIcon,\n  ClockIcon,\n} from '@heroicons/react/24/outline'\nimport { clsx } from 'clsx'\n\nimport type { AutoSaveStatus } from '../../hooks/useAutoSave'\n\ninterface AutoSaveIndicatorProps {\n  status: AutoSaveStatus\n  lastSaved?: Date | null\n  error?: Error | null\n  onRetry?: () => void\n  className?: string\n}\n\nexport const AutoSaveIndicator: React.FC<AutoSaveIndicatorProps> = ({\n  status,\n  lastSaved,\n  error,\n  onRetry,\n  className,\n}) => {\n  const getStatusConfig = () => {\n    switch (status) {\n      case 'saving':\n        return {\n          icon: ArrowPathIcon,\n          text: 'Saving...',\n          color: 'text-blue-500',\n          bgColor: 'bg-blue-50',\n          animate: 'animate-spin',\n        }\n      case 'saved':\n        return {\n          icon: CheckCircleIcon,\n          text: lastSaved ? `Saved ${format(lastSaved, 'h:mm a')}` : 'Saved',\n          color: 'text-green-500',\n          bgColor: 'bg-green-50',\n        }\n      case 'error':\n        return {\n          icon: ExclamationTriangleIcon,\n          text: 'Save failed',\n          color: 'text-red-500',\n          bgColor: 'bg-red-50',\n        }\n      default:\n        return {\n          icon: CloudIcon,\n          text: 'Draft saved',\n          color: 'text-gray-400',\n          bgColor: 'bg-gray-50',\n        }\n    }\n  }\n\n  const config = getStatusConfig()\n  const Icon = config.icon\n\n  return (\n    <div\n      className={clsx(\n        'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium',\n        config.bgColor,\n        config.color,\n        className\n      )}\n    >\n      <Icon className={clsx('h-3 w-3 mr-1.5', config.animate)} />\n      <span>{config.text}</span>\n      {status === 'error' && onRetry && (\n        <button\n          onClick={onRetry}\n          className=\"ml-1.5 text-red-600 hover:text-red-800 underline\"\n        >\n          retry\n        </button>\n      )}\n      {error && (\n        <div className=\"ml-1.5 text-xs text-red-400\" title={error.message}>\n          ({error.message.substring(0, 20)}...)\n        </div>\n      )}\n    </div>\n  )\n}\n\ninterface UnsavedChangesWarningProps {\n  hasUnsavedChanges: boolean\n  onSave?: () => Promise<void>\n  onDiscard?: () => void\n  className?: string\n}\n\nexport const UnsavedChangesWarning: React.FC<UnsavedChangesWarningProps> = ({\n  hasUnsavedChanges,\n  onSave,\n  onDiscard,\n  className,\n}) => {\n  const [isSaving, setIsSaving] = React.useState(false)\n\n  const handleSave = async () => {\n    if (!onSave) return\n\n    setIsSaving(true)\n    try {\n      await onSave()\n    } catch (error) {\n      console.error('Manual save failed:', error)\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  if (!hasUnsavedChanges) {\n    return null\n  }\n\n  return (\n    <div\n      className={clsx(\n        'bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4',\n        className\n      )}\n    >\n      <div className=\"flex items-start\">\n        <ClockIcon className=\"h-4 w-4 text-yellow-600 mt-0.5 mr-2 flex-shrink-0\" />\n        <div className=\"flex-1\">\n          <p className=\"text-sm text-yellow-700\">\n            You have unsaved changes that haven't been auto-saved yet.\n          </p>\n          <div className=\"mt-2 flex space-x-2\">\n            {onSave && (\n              <button\n                onClick={handleSave}\n                disabled={isSaving}\n                className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded hover:bg-yellow-200 disabled:opacity-50 transition-colors\"\n              >\n                {isSaving ? 'Saving...' : 'Save now'}\n              </button>\n            )}\n            {onDiscard && (\n              <button\n                onClick={onDiscard}\n                className=\"text-xs text-yellow-700 hover:text-yellow-900 underline\"\n              >\n                Discard changes\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface AutoSaveBadgeProps {\n  status: AutoSaveStatus\n  className?: string\n}\n\nexport const AutoSaveBadge: React.FC<AutoSaveBadgeProps> = ({\n  status,\n  className,\n}) => {\n  if (status === 'idle') return null\n\n  const getStatusConfig = () => {\n    switch (status) {\n      case 'saving':\n        return {\n          text: 'Saving',\n          color: 'bg-blue-100 text-blue-800',\n          pulse: true,\n        }\n      case 'saved':\n        return {\n          text: 'Saved',\n          color: 'bg-green-100 text-green-800',\n        }\n      case 'error':\n        return {\n          text: 'Error',\n          color: 'bg-red-100 text-red-800',\n        }\n      default:\n        return {\n          text: 'Draft',\n          color: 'bg-gray-100 text-gray-800',\n        }\n    }\n  }\n\n  const config = getStatusConfig()\n\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium',\n        config.color,\n        config.pulse && 'animate-pulse',\n        className\n      )}\n    >\n      {config.text}\n    </span>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/Button.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/Card.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/ErrorBoundary.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":52,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":52,"endColumn":59,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[1442,1442],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":55,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":55,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":145,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":145,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'errorBoundary' is assigned a value but never used.","line":145,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of a(n) `any` typed value.","line":145,"column":29,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":145,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4589,4592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4589,4592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":157,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":157,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of a(n) `any` typed value.","line":157,"column":29,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":157,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4909,4912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4909,4912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .state on an `any` value.","line":159,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":33}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport { describe, it, expect, vi, beforeEach } from 'vitest'\nimport type { ReactNode } from 'react'\n\nimport ErrorBoundary from './ErrorBoundary'\n\n// Mock logger\nvi.mock('../../utils/logger', () => ({\n  logger: {\n    error: vi.fn(),\n  }\n}))\n\n// Mock import.meta.env\nconst mockEnv = vi.hoisted(() => ({\n  DEV: true\n}))\nvi.mock('import.meta.env', () => mockEnv)\n\n// Mock ExclamationTriangleIcon\nvi.mock('@heroicons/react/24/outline', () => ({\n  ExclamationTriangleIcon: ({ className }: { className?: string }) => (\n    <div data-testid=\"exclamation-icon\" className={className} />\n  )\n}))\n\n// Mock window.location.reload\nconst mockReload = vi.fn()\nObject.defineProperty(window, 'location', {\n  value: { reload: mockReload },\n  writable: true\n})\n\n// Component that throws an error for testing\nconst ThrowError = ({ shouldThrow = false }: { shouldThrow?: boolean }) => {\n  if (shouldThrow) {\n    throw new Error('Test error message')\n  }\n  return <div data-testid=\"child-component\">Child component</div>\n}\n\nconst renderBoundary = (children: ReactNode) =>\n  render(<ErrorBoundary>{children}</ErrorBoundary>)\n\nconst renderThrowingBoundary = () =>\n  renderBoundary(<ThrowError shouldThrow />)\n\ndescribe('ErrorBoundary', () => {\n  beforeEach(() => {\n    vi.clearAllMocks()\n    // Suppress console.error for cleaner test output\n    vi.spyOn(console, 'error').mockImplementation(() => {})\n  })\n\n  afterEach(() => {\n    vi.restoreAllMocks()\n  })\n\n  describe('when no error occurs', () => {\n    it('should render children normally', () => {\n      renderBoundary(<div data-testid=\"child\">Normal child content</div>)\n\n      expect(screen.getByTestId('child')).toBeInTheDocument()\n      expect(screen.queryByText('Something went wrong')).not.toBeInTheDocument()\n    })\n\n    it('should render multiple children', () => {\n      renderBoundary(\n        <>\n          <div data-testid=\"child-1\">Child 1</div>\n          <div data-testid=\"child-2\">Child 2</div>\n        </>\n      )\n\n      expect(screen.getByTestId('child-1')).toBeInTheDocument()\n      expect(screen.getByTestId('child-2')).toBeInTheDocument()\n    })\n  })\n\n  describe('when an error occurs', () => {\n    it('should catch error and display error UI', () => {\n      renderThrowingBoundary()\n\n      expect(screen.getByText('Something went wrong')).toBeInTheDocument()\n      expect(screen.getByText(/We're sorry, but something unexpected happened/)).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: 'Refresh Page' })).toBeInTheDocument()\n      expect(screen.getByTestId('exclamation-icon')).toBeInTheDocument()\n      expect(screen.queryByTestId('child-component')).not.toBeInTheDocument()\n    })\n\n    it('should log error details to console', () => {\n      renderThrowingBoundary()\n\n      expect(console.error).toHaveBeenCalledWith(\n        'ErrorBoundary caught an error:',\n        expect.any(Error),\n        expect.any(Object)\n      )\n    })\n\n    it('should handle reload button click', () => {\n      renderThrowingBoundary()\n\n      const reloadButton = screen.getByRole('button', { name: 'Refresh Page' })\n      fireEvent.click(reloadButton)\n\n      expect(mockReload).toHaveBeenCalledTimes(1)\n    })\n\n    it('should apply correct CSS classes for error UI', () => {\n      renderThrowingBoundary()\n\n      const errorContainer = screen.getByText('Something went wrong').closest('.max-w-md')\n      expect(errorContainer).toHaveClass('max-w-md', 'w-full', 'bg-white', 'shadow-lg', 'rounded-lg', 'p-6')\n\n      const reloadButton = screen.getByRole('button', { name: 'Refresh Page' })\n      expect(reloadButton).toHaveClass('text-white', 'bg-red-600', 'focus:outline-none', 'focus:ring-2', 'focus:ring-offset-2')\n    })\n  })\n\n  describe('development mode error details', () => {\n    beforeEach(() => {\n      mockEnv.DEV = true\n    })\n\n    it('should show error UI in development mode', () => {\n      renderThrowingBoundary()\n\n      expect(screen.getByText('Something went wrong')).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: 'Refresh Page' })).toBeInTheDocument()\n    })\n\n    it('should not show error details in production mode', () => {\n      // Set up production environment before rendering\n      vi.stubGlobal('import.meta', { env: { DEV: false } })\n\n      renderThrowingBoundary()\n\n      expect(screen.queryByText('Error Details (Development)')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('error boundary lifecycle', () => {\n    it('should handle getDerivedStateFromError', () => {\n      const errorBoundary = new (ErrorBoundary as any)({})\n      const error = new Error('Test error')\n\n      const newState = ErrorBoundary.getDerivedStateFromError(error)\n\n      expect(newState).toEqual({\n        hasError: true,\n        error: error\n      })\n    })\n\n    it('should start with no error state', () => {\n      const errorBoundary = new (ErrorBoundary as any)({ children: null })\n\n      expect(errorBoundary.state).toEqual({\n        hasError: false\n      })\n    })\n  })\n\n  describe('error recovery', () => {\n    it('should show normal content after error is resolved', () => {\n      const { rerender } = renderThrowingBoundary()\n\n      // Error UI should be shown\n      expect(screen.getByText('Something went wrong')).toBeInTheDocument()\n\n      // Rerender with no error\n      rerender(<ErrorBoundary><ThrowError shouldThrow={false} /></ErrorBoundary>)\n\n      // Error UI should still be shown (ErrorBoundary doesn't recover automatically)\n      expect(screen.getByText('Something went wrong')).toBeInTheDocument()\n    })\n  })\n\n  describe('accessibility', () => {\n    it('should have proper ARIA attributes and semantic structure', () => {\n      renderThrowingBoundary()\n\n      const heading = screen.getByRole('heading', { name: 'Something went wrong' })\n      expect(heading).toBeInTheDocument()\n\n      const button = screen.getByRole('button', { name: 'Refresh Page' })\n      expect(button).toBeInTheDocument()\n    })\n\n    it('should have proper keyboard navigation support', () => {\n      renderThrowingBoundary()\n\n      const button = screen.getByRole('button', { name: 'Refresh Page' })\n      expect(button).toHaveClass('focus:outline-none', 'focus:ring-2', 'focus:ring-offset-2', 'focus:ring-red-500')\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/ErrorStates.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4389,4392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4389,4392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":171,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":171,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":171,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":171,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":171,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4739,4741],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport {\n  ExclamationTriangleIcon,\n  WifiIcon,\n  ServerIcon,\n  XCircleIcon,\n  ArrowPathIcon,\n  HomeIcon,\n} from '@heroicons/react/24/outline'\n\nimport { getCardClasses } from '../../lib/theme'\n\nimport { Button } from './button'\n\nexport interface ErrorStateProps {\n  title?: string\n  message?: string\n  action?: {\n    label: string\n    onClick: () => void\n  }\n  showRetry?: boolean\n  onRetry?: () => void\n  variant?: 'error' | 'network' | 'server' | 'not-found' | 'empty'\n}\n\nconst ErrorState: React.FC<ErrorStateProps> = ({\n  title = 'Something went wrong',\n  message = 'An unexpected error occurred. Please try again.',\n  action,\n  showRetry = true,\n  onRetry,\n  variant = 'error',\n}) => {\n  const getVariantConfig = () => {\n    switch (variant) {\n      case 'network':\n        return {\n          icon: WifiIcon,\n          iconColor: 'text-orange-600',\n          bgColor: 'bg-orange-100',\n          title: 'Network Error',\n          message: 'Unable to connect to the server. Please check your internet connection.',\n        }\n      case 'server':\n        return {\n          icon: ServerIcon,\n          iconColor: 'text-red-600',\n          bgColor: 'bg-red-100',\n          title: 'Server Error',\n          message: 'The server is currently unavailable. Please try again later.',\n        }\n      case 'not-found':\n        return {\n          icon: XCircleIcon,\n          iconColor: 'text-gray-600',\n          bgColor: 'bg-gray-100',\n          title: 'Not Found',\n          message: 'The requested resource could not be found.',\n        }\n      case 'empty':\n        return {\n          icon: ExclamationTriangleIcon,\n          iconColor: 'text-gray-500',\n          bgColor: 'bg-gray-100',\n          title: 'No Data',\n          message: 'No data available to display.',\n        }\n      default:\n        return {\n          icon: ExclamationTriangleIcon,\n          iconColor: 'text-red-600',\n          bgColor: 'bg-red-100',\n          title,\n          message,\n        }\n    }\n  }\n\n  const config = getVariantConfig()\n  const Icon = config.icon\n\n  return (\n    <div className={`${getCardClasses('subtle')} text-center py-12`}>\n      <div className={`inline-flex items-center justify-center w-16 h-16 ${config.bgColor} rounded-full mb-6`}>\n        <Icon className={`w-8 h-8 ${config.iconColor}`} />\n      </div>\n\n      <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n        {config.title}\n      </h3>\n\n      <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n        {config.message}\n      </p>\n\n      <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n        {showRetry && onRetry && (\n          <Button onClick={onRetry} variant=\"primary\" size=\"md\">\n            <ArrowPathIcon className=\"w-4 h-4 mr-2\" />\n            Try Again\n          </Button>\n        )}\n\n        {action && (\n          <Button onClick={action.onClick} variant=\"secondary\" size=\"md\">\n            {action.label}\n          </Button>\n        )}\n\n        {variant === 'not-found' && (\n          <Button onClick={() => window.location.href = '/'} variant=\"secondary\" size=\"md\">\n            <HomeIcon className=\"w-4 h-4 mr-2\" />\n            Go Home\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n}\n\n// Specific error state components\nexport const NetworkError: React.FC<Omit<ErrorStateProps, 'variant'>> = (props) => (\n  <ErrorState {...props} variant=\"network\" />\n)\n\nexport const ServerError: React.FC<Omit<ErrorStateProps, 'variant'>> = (props) => (\n  <ErrorState {...props} variant=\"server\" />\n)\n\nexport const NotFoundError: React.FC<Omit<ErrorStateProps, 'variant'>> = (props) => (\n  <ErrorState {...props} variant=\"not-found\" />\n)\n\nexport const EmptyState: React.FC<Omit<ErrorStateProps, 'variant'>> = (props) => (\n  <ErrorState {...props} variant=\"empty\" />\n)\n\n// API Error handler component\ninterface ApiErrorDisplayProps {\n  error: unknown\n  onRetry?: () => void\n  fallbackMessage?: string\n}\n\nexport const ApiErrorDisplay: React.FC<ApiErrorDisplayProps> = ({\n  error,\n  onRetry,\n  fallbackMessage = 'Failed to load data. Please try again.',\n}) => {\n  // Parse different error types\n  const getErrorDetails = () => {\n    if (!error) {\n      return { message: fallbackMessage, variant: 'error' as const }\n    }\n\n    // RTK Query error\n    if (typeof error === 'object' && 'status' in error) {\n      const rtqError = error as { status: number | string; data?: any }\n\n      switch (rtqError.status) {\n        case 404:\n          return { variant: 'not-found' as const }\n        case 500:\n        case 503:\n          return { variant: 'server' as const }\n        case 'FETCH_ERROR':\n          return { variant: 'network' as const }\n        default:\n          return {\n            message: rtqError.data?.message || fallbackMessage,\n            variant: 'error' as const\n          }\n      }\n    }\n\n    // Standard Error object\n    if (error instanceof Error) {\n      return { message: error.message, variant: 'error' as const }\n    }\n\n    return { message: fallbackMessage, variant: 'error' as const }\n  }\n\n  const errorDetails = getErrorDetails()\n\n  return (\n    <ErrorState\n      {...errorDetails}\n      onRetry={onRetry}\n      showRetry={!!onRetry}\n    />\n  )\n}\n\nexport default ErrorState","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/FeedbackSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'removeNotification'.","line":38,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'removeNotification'"},"fix":{"range":[1044,1044],"text":" /* empty */ "},"desc":"Add comment inside empty method 'removeNotification'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'updateNotification'.","line":39,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":39,"endColumn":31,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'updateNotification'"},"fix":{"range":[1076,1076],"text":" /* empty */ "},"desc":"Add comment inside empty method 'updateNotification'."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useNotifications\" is called in function \"createNotificationHelpers\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":243,"column":51,"nodeType":"Identifier","endLine":243,"endColumn":67}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n  XCircleIcon,\n  XMarkIcon,\n  ArrowPathIcon,\n} from '@heroicons/react/24/outline'\n// Animation replacements using CSS transitions\n\n// Enhanced notification types\nexport type NotificationVariant = 'success' | 'error' | 'warning' | 'info' | 'loading'\n\nexport interface NotificationData {\n  id: string\n  variant: NotificationVariant\n  title: string\n  message?: string\n  duration?: number\n  persistent?: boolean\n  actions?: Array<{\n    label: string\n    onClick: () => void\n    variant?: 'primary' | 'secondary'\n  }>\n}\n\n// Global notification context\nconst NotificationContext = React.createContext<{\n  notifications: NotificationData[]\n  addNotification: (notification: Omit<NotificationData, 'id'>) => string\n  removeNotification: (id: string) => void\n  updateNotification: (id: string, updates: Partial<NotificationData>) => void\n}>({\n  notifications: [],\n  addNotification: () => '',\n  removeNotification: () => {},\n  updateNotification: () => {},\n})\n\n// Notification provider component\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<NotificationData[]>([])\n\n  const addNotification = (notification: Omit<NotificationData, 'id'>): string => {\n    const id = Math.random().toString(36).substr(2, 9)\n    const newNotification: NotificationData = {\n      id,\n      duration: 5000, // 5 seconds default\n      ...notification,\n    }\n\n    setNotifications(prev => [...prev, newNotification])\n\n    // Auto-remove non-persistent notifications\n    if (!notification.persistent && notification.variant !== 'loading') {\n      setTimeout(() => {\n        removeNotification(id)\n      }, newNotification.duration)\n    }\n\n    return id\n  }\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id))\n  }\n\n  const updateNotification = (id: string, updates: Partial<NotificationData>) => {\n    setNotifications(prev =>\n      prev.map(n => n.id === id ? { ...n, ...updates } : n)\n    )\n  }\n\n  return (\n    <NotificationContext.Provider\n      value={{\n        notifications,\n        addNotification,\n        removeNotification,\n        updateNotification,\n      }}\n    >\n      {children}\n      <NotificationContainer />\n    </NotificationContext.Provider>\n  )\n}\n\n// Hook to use notifications\nexport const useNotifications = () => {\n  const context = React.useContext(NotificationContext)\n  if (!context) {\n    throw new Error('useNotifications must be used within NotificationProvider')\n  }\n  return context\n}\n\n// Individual notification component\nconst NotificationItem: React.FC<{\n  notification: NotificationData\n  onRemove: () => void\n}> = ({ notification, onRemove }) => {\n  const getVariantConfig = () => {\n    switch (notification.variant) {\n      case 'success':\n        return {\n          icon: CheckCircleIcon,\n          iconColor: 'text-green-600',\n          bgColor: 'bg-green-50',\n          borderColor: 'border-green-200',\n          titleColor: 'text-green-800',\n          messageColor: 'text-green-700',\n        }\n      case 'error':\n        return {\n          icon: XCircleIcon,\n          iconColor: 'text-red-600',\n          bgColor: 'bg-red-50',\n          borderColor: 'border-red-200',\n          titleColor: 'text-red-800',\n          messageColor: 'text-red-700',\n        }\n      case 'warning':\n        return {\n          icon: ExclamationTriangleIcon,\n          iconColor: 'text-yellow-600',\n          bgColor: 'bg-yellow-50',\n          borderColor: 'border-yellow-200',\n          titleColor: 'text-yellow-800',\n          messageColor: 'text-yellow-700',\n        }\n      case 'loading':\n        return {\n          icon: ArrowPathIcon,\n          iconColor: 'text-blue-600 animate-spin',\n          bgColor: 'bg-blue-50',\n          borderColor: 'border-blue-200',\n          titleColor: 'text-blue-800',\n          messageColor: 'text-blue-700',\n        }\n      default: // info\n        return {\n          icon: InformationCircleIcon,\n          iconColor: 'text-blue-600',\n          bgColor: 'bg-blue-50',\n          borderColor: 'border-blue-200',\n          titleColor: 'text-blue-800',\n          messageColor: 'text-blue-700',\n        }\n    }\n  }\n\n  const config = getVariantConfig()\n  const Icon = config.icon\n\n  return (\n    <div\n      className={`\n        max-w-sm w-full shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 transform transition-all duration-300 ease-in-out\n        ${config.bgColor} ${config.borderColor} border animate-slide-in-right\n      `}\n    >\n      <div className=\"p-4\">\n        <div className=\"flex items-start\">\n          <div className=\"flex-shrink-0\">\n            <Icon className={`h-6 w-6 ${config.iconColor}`} />\n          </div>\n\n          <div className=\"ml-3 w-0 flex-1\">\n            <p className={`text-sm font-medium ${config.titleColor}`}>\n              {notification.title}\n            </p>\n            {notification.message && (\n              <p className={`mt-1 text-sm ${config.messageColor}`}>\n                {notification.message}\n              </p>\n            )}\n\n            {notification.actions && (\n              <div className=\"mt-3 flex space-x-2\">\n                {notification.actions.map((action, index) => (\n                  <button\n                    key={index}\n                    onClick={action.onClick}\n                    className={`\n                      text-sm font-medium rounded-md px-3 py-1.5 transition-colors\n                      ${\n                        action.variant === 'primary'\n                          ? 'bg-white text-gray-900 hover:bg-gray-50 border border-gray-300'\n                          : 'text-gray-700 hover:text-gray-500'\n                      }\n                    `}\n                  >\n                    {action.label}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {!notification.persistent && notification.variant !== 'loading' && (\n            <div className=\"ml-4 flex-shrink-0 flex\">\n              <button\n                onClick={onRemove}\n                className={`\n                  inline-flex rounded-md p-1.5 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\n                  ${config.messageColor} hover:${config.titleColor}\n                `}\n              >\n                <XMarkIcon className=\"h-5 w-5\" />\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Notification container\nconst NotificationContainer: React.FC = () => {\n  const { notifications, removeNotification } = useNotifications()\n\n  return (\n    <div className=\"fixed inset-0 flex items-end justify-center px-4 py-6 pointer-events-none sm:p-6 sm:items-start sm:justify-end z-50\">\n      <div className=\"w-full flex flex-col items-center space-y-4 sm:items-end\">\n        {notifications.map(notification => (\n          <NotificationItem\n            key={notification.id}\n            notification={notification}\n            onRemove={() => removeNotification(notification.id)}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\n// Helper functions for common notification types\nexport const createNotificationHelpers = () => {\n  const { addNotification, updateNotification } = useNotifications()\n\n  const showSuccess = (title: string, message?: string) =>\n    addNotification({ variant: 'success', title, message })\n\n  const showError = (title: string, message?: string) =>\n    addNotification({ variant: 'error', title, message })\n\n  const showWarning = (title: string, message?: string) =>\n    addNotification({ variant: 'warning', title, message })\n\n  const showInfo = (title: string, message?: string) =>\n    addNotification({ variant: 'info', title, message })\n\n  const showLoading = (title: string, message?: string) =>\n    addNotification({ variant: 'loading', title, message, persistent: true })\n\n  const showActionable = (\n    title: string,\n    message: string,\n    actions: Array<{ label: string; onClick: () => void; variant?: 'primary' | 'secondary' }>\n  ) =>\n    addNotification({\n      variant: 'info',\n      title,\n      message,\n      actions,\n      persistent: true,\n    })\n\n  return {\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo,\n    showLoading,\n    showActionable,\n    updateNotification,\n  }\n}\n\n// Progress indicator component\ninterface ProgressIndicatorProps {\n  progress: number // 0-100\n  variant?: 'primary' | 'success' | 'warning' | 'error'\n  size?: 'sm' | 'md' | 'lg'\n  showPercentage?: boolean\n  label?: string\n}\n\nexport const ProgressIndicator: React.FC<ProgressIndicatorProps> = ({\n  progress,\n  variant = 'primary',\n  size = 'md',\n  showPercentage = true,\n  label,\n}) => {\n  const getVariantConfig = () => {\n    switch (variant) {\n      case 'success':\n        return 'bg-green-500'\n      case 'warning':\n        return 'bg-yellow-500'\n      case 'error':\n        return 'bg-red-500'\n      default:\n        return 'bg-blue-500'\n    }\n  }\n\n  const getSizeConfig = () => {\n    switch (size) {\n      case 'sm':\n        return 'h-1'\n      case 'lg':\n        return 'h-3'\n      default:\n        return 'h-2'\n    }\n  }\n\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <div className=\"flex justify-between text-sm text-gray-700 mb-1\">\n          <span>{label}</span>\n          {showPercentage && <span>{progress}%</span>}\n        </div>\n      )}\n      <div className={`w-full bg-gray-200 rounded-full ${getSizeConfig()}`}>\n        <div\n          className={`${getSizeConfig()} ${getVariantConfig()} rounded-full transition-all duration-500 ease-out`}\n          style={{ width: `${Math.min(100, Math.max(0, progress))}%` }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default NotificationProvider","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/InteractionPatterns.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EllipsisHorizontalIcon' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":119,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":119,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3226,3228],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":123,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":123,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3381,3383],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":248,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":248,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7722,7724],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":255,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":255,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7935,7937],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":304,"column":9,"nodeType":"JSXOpeningElement","endLine":307,"endColumn":11},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":304,"column":9,"nodeType":"JSXOpeningElement","endLine":307,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":341,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":341,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":446,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":446,"endColumn":34}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { clsx } from 'clsx'\nimport {\n  ChevronDownIcon,\n  MagnifyingGlassIcon,\n  XMarkIcon,\n  CheckIcon,\n  EllipsisHorizontalIcon,\n  ArrowUpIcon,\n} from '@heroicons/react/24/outline'\n\n/**\n * Enhanced Dropdown with search, multi-select, and keyboard navigation\n */\ninterface DropdownOption {\n  value: string\n  label: string\n  disabled?: boolean\n  icon?: React.ComponentType<{ className?: string }>\n}\n\ninterface EnhancedDropdownProps {\n  options: DropdownOption[]\n  value?: string | string[]\n  onChange: (value: string | string[]) => void\n  placeholder?: string\n  searchable?: boolean\n  multiSelect?: boolean\n  disabled?: boolean\n  className?: string\n  maxHeight?: string\n}\n\nexport const EnhancedDropdown: React.FC<EnhancedDropdownProps> = ({\n  options,\n  value,\n  onChange,\n  placeholder = 'Select an option',\n  searchable = false,\n  multiSelect = false,\n  disabled = false,\n  className,\n  maxHeight = 'max-h-60'\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n  const dropdownRef = useRef<HTMLDivElement>(null)\n  const searchRef = useRef<HTMLInputElement>(null)\n\n  const filteredOptions = options.filter(option =>\n    option.label.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const selectedValues = Array.isArray(value) ? value : value ? [value] : []\n\n  const handleToggle = () => {\n    if (disabled) return\n    setIsOpen(!isOpen)\n    if (!isOpen && searchable) {\n      setTimeout(() => searchRef.current?.focus(), 100)\n    }\n  }\n\n  const handleSelect = (optionValue: string) => {\n    if (multiSelect) {\n      const newValues = selectedValues.includes(optionValue)\n        ? selectedValues.filter(v => v !== optionValue)\n        : [...selectedValues, optionValue]\n      onChange(newValues)\n    } else {\n      onChange(optionValue)\n      setIsOpen(false)\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault()\n        setFocusedIndex(prev =>\n          prev < filteredOptions.length - 1 ? prev + 1 : 0\n        )\n        break\n      case 'ArrowUp':\n        e.preventDefault()\n        setFocusedIndex(prev =>\n          prev > 0 ? prev - 1 : filteredOptions.length - 1\n        )\n        break\n      case 'Enter':\n        e.preventDefault()\n        if (focusedIndex >= 0) {\n          handleSelect(filteredOptions[focusedIndex].value)\n        }\n        break\n      case 'Escape':\n        setIsOpen(false)\n        break\n    }\n  }\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [])\n\n  const getDisplayText = () => {\n    if (selectedValues.length === 0) return placeholder\n    if (multiSelect) {\n      if (selectedValues.length === 1) {\n        return options.find(opt => opt.value === selectedValues[0])?.label || selectedValues[0]\n      }\n      return `${selectedValues.length} selected`\n    }\n    return options.find(opt => opt.value === selectedValues[0])?.label || selectedValues[0]\n  }\n\n  return (\n    <div className={clsx('relative', className)} ref={dropdownRef}>\n      <button\n        type=\"button\"\n        onClick={handleToggle}\n        onKeyDown={handleKeyDown}\n        disabled={disabled}\n        className={clsx(\n          'w-full flex items-center justify-between px-3 py-2 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors',\n          disabled ? 'bg-gray-50 text-gray-400 cursor-not-allowed' : 'hover:border-gray-400',\n          isOpen ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-300'\n        )}\n      >\n        <span className={clsx(selectedValues.length === 0 && 'text-gray-500')}>\n          {getDisplayText()}\n        </span>\n        <ChevronDownIcon\n          className={clsx('h-4 w-4 transition-transform', isOpen && 'rotate-180')}\n        />\n      </button>\n\n      {isOpen && (\n        <div className={clsx(\n          'absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md shadow-lg',\n          maxHeight,\n          'overflow-auto'\n        )}>\n          {searchable && (\n            <div className=\"p-2 border-b border-gray-200\">\n              <div className=\"relative\">\n                <MagnifyingGlassIcon className=\"absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  ref={searchRef}\n                  type=\"text\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  placeholder=\"Search options...\"\n                  className=\"w-full pl-8 pr-3 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n          )}\n\n          <div className=\"py-1\">\n            {filteredOptions.length === 0 ? (\n              <div className=\"px-3 py-2 text-gray-500 text-sm\">\n                No options found\n              </div>\n            ) : (\n              filteredOptions.map((option, index) => {\n                const isSelected = selectedValues.includes(option.value)\n                const isFocused = index === focusedIndex\n\n                return (\n                  <button\n                    key={option.value}\n                    type=\"button\"\n                    onClick={() => !option.disabled && handleSelect(option.value)}\n                    disabled={option.disabled}\n                    className={clsx(\n                      'w-full px-3 py-2 text-left flex items-center justify-between transition-colors',\n                      option.disabled\n                        ? 'text-gray-400 cursor-not-allowed'\n                        : 'hover:bg-gray-100',\n                      isFocused && 'bg-blue-50',\n                      isSelected && 'bg-blue-100 text-blue-900'\n                    )}\n                  >\n                    <div className=\"flex items-center\">\n                      {option.icon && (\n                        <option.icon className=\"h-4 w-4 mr-2\" />\n                      )}\n                      <span>{option.label}</span>\n                    </div>\n                    {isSelected && multiSelect && (\n                      <CheckIcon className=\"h-4 w-4 text-blue-600\" />\n                    )}\n                  </button>\n                )\n              })\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n/**\n * Enhanced Command Palette for quick actions\n */\ninterface CommandPaletteItem {\n  id: string\n  title: string\n  subtitle?: string\n  action: () => void\n  icon?: React.ComponentType<{ className?: string }>\n  keywords?: string[]\n  group?: string\n}\n\ninterface CommandPaletteProps {\n  isOpen: boolean\n  onClose: () => void\n  items: CommandPaletteItem[]\n  placeholder?: string\n}\n\nexport const CommandPalette: React.FC<CommandPaletteProps> = ({\n  isOpen,\n  onClose,\n  items,\n  placeholder = 'Type a command or search...'\n}) => {\n  const [search, setSearch] = useState('')\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const filteredItems = items.filter(item => {\n    const searchLower = search.toLowerCase()\n    return (\n      item.title.toLowerCase().includes(searchLower) ||\n      item.subtitle?.toLowerCase().includes(searchLower) ||\n      item.keywords?.some(keyword => keyword.toLowerCase().includes(searchLower))\n    )\n  })\n\n  // Group filtered items\n  const groupedItems = filteredItems.reduce((acc, item) => {\n    const group = item.group || 'Other'\n    if (!acc[group]) acc[group] = []\n    acc[group].push(item)\n    return acc\n  }, {} as Record<string, CommandPaletteItem[]>)\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault()\n        setSelectedIndex(prev =>\n          prev < filteredItems.length - 1 ? prev + 1 : 0\n        )\n        break\n      case 'ArrowUp':\n        e.preventDefault()\n        setSelectedIndex(prev =>\n          prev > 0 ? prev - 1 : filteredItems.length - 1\n        )\n        break\n      case 'Enter':\n        e.preventDefault()\n        if (filteredItems[selectedIndex]) {\n          filteredItems[selectedIndex].action()\n          onClose()\n        }\n        break\n      case 'Escape':\n        onClose()\n        break\n    }\n  }\n\n  useEffect(() => {\n    setSelectedIndex(0)\n  }, [search])\n\n  useEffect(() => {\n    if (isOpen) {\n      inputRef.current?.focus()\n      setSearch('')\n    }\n  }, [isOpen])\n\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex min-h-screen items-start justify-center p-4 pt-16\">\n        <div\n          className=\"fixed inset-0 bg-gray-900 bg-opacity-50 transition-opacity\"\n          onClick={onClose}\n        />\n        <div className=\"relative w-full max-w-2xl bg-white rounded-lg shadow-xl\">\n          {/* Search Input */}\n          <div className=\"flex items-center px-4 py-3 border-b border-gray-200\">\n            <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder={placeholder}\n              className=\"flex-1 outline-none text-gray-900\"\n            />\n            <button\n              onClick={onClose}\n              className=\"ml-3 p-1 text-gray-400 hover:text-gray-600\"\n            >\n              <XMarkIcon className=\"h-4 w-4\" />\n            </button>\n          </div>\n\n          {/* Results */}\n          <div className=\"max-h-96 overflow-y-auto p-2\">\n            {filteredItems.length === 0 ? (\n              <div className=\"px-4 py-8 text-center text-gray-500\">\n                No results found for \"{search}\"\n              </div>\n            ) : (\n              Object.entries(groupedItems).map(([group, groupItems]) => (\n                <div key={group} className=\"mb-4\">\n                  <div className=\"px-2 py-1 text-xs font-semibold text-gray-500 uppercase tracking-wide\">\n                    {group}\n                  </div>\n                  {groupItems.map((item, index) => {\n                    const globalIndex = filteredItems.indexOf(item)\n                    const isSelected = globalIndex === selectedIndex\n\n                    return (\n                      <button\n                        key={item.id}\n                        onClick={() => {\n                          item.action()\n                          onClose()\n                        }}\n                        className={clsx(\n                          'w-full px-3 py-2 text-left rounded-md flex items-center transition-colors',\n                          isSelected\n                            ? 'bg-blue-100 text-blue-900'\n                            : 'hover:bg-gray-100'\n                        )}\n                      >\n                        {item.icon && (\n                          <item.icon className=\"h-5 w-5 mr-3 text-gray-400\" />\n                        )}\n                        <div>\n                          <div className=\"font-medium\">{item.title}</div>\n                          {item.subtitle && (\n                            <div className=\"text-sm text-gray-500\">\n                              {item.subtitle}\n                            </div>\n                          )}\n                        </div>\n                      </button>\n                    )\n                  })}\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Contextual Action Menu (Right-click menu)\n */\ninterface ContextMenuAction {\n  id: string\n  label: string\n  action: () => void\n  icon?: React.ComponentType<{ className?: string }>\n  disabled?: boolean\n  destructive?: boolean\n  divider?: boolean\n}\n\ninterface ContextMenuProps {\n  isOpen: boolean\n  position: { x: number; y: number }\n  onClose: () => void\n  actions: ContextMenuAction[]\n}\n\nexport const ContextMenu: React.FC<ContextMenuProps> = ({\n  isOpen,\n  position,\n  onClose,\n  actions\n}) => {\n  const menuRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        onClose()\n      }\n    }\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onClose()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside)\n      document.addEventListener('keydown', handleEscape)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n      document.removeEventListener('keydown', handleEscape)\n    }\n  }, [isOpen, onClose])\n\n  if (!isOpen) return null\n\n  return (\n    <div\n      ref={menuRef}\n      className=\"fixed z-50 bg-white border border-gray-200 rounded-md shadow-lg py-1 min-w-48\"\n      style={{\n        left: position.x,\n        top: position.y\n      }}\n    >\n      {actions.map((action, index) => (\n        <React.Fragment key={action.id}>\n          {action.divider ? (\n            <div className=\"border-t border-gray-200 my-1\" />\n          ) : (\n            <button\n              onClick={() => {\n                if (!action.disabled) {\n                  action.action()\n                  onClose()\n                }\n              }}\n              disabled={action.disabled}\n              className={clsx(\n                'w-full px-3 py-2 text-left flex items-center text-sm transition-colors',\n                action.disabled\n                  ? 'text-gray-400 cursor-not-allowed'\n                  : action.destructive\n                  ? 'text-red-600 hover:bg-red-50'\n                  : 'text-gray-900 hover:bg-gray-100'\n              )}\n            >\n              {action.icon && (\n                <action.icon className={clsx(\n                  'h-4 w-4 mr-3',\n                  action.destructive ? 'text-red-500' : 'text-gray-500'\n                )} />\n              )}\n              {action.label}\n            </button>\n          )}\n        </React.Fragment>\n      ))}\n    </div>\n  )\n}\n\n/**\n * Floating Action Button with expandable menu\n */\ninterface FloatingAction {\n  id: string\n  label: string\n  action: () => void\n  icon: React.ComponentType<{ className?: string }>\n}\n\ninterface FloatingActionButtonProps {\n  primaryAction: FloatingAction\n  secondaryActions?: FloatingAction[]\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'\n  className?: string\n}\n\nexport const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({\n  primaryAction,\n  secondaryActions = [],\n  position = 'bottom-right',\n  className\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const positionClasses = {\n    'bottom-right': 'bottom-6 right-6',\n    'bottom-left': 'bottom-6 left-6',\n    'top-right': 'top-6 right-6',\n    'top-left': 'top-6 left-6'\n  }\n\n  const handlePrimaryAction = () => {\n    if (secondaryActions.length > 0) {\n      setIsExpanded(!isExpanded)\n    } else {\n      primaryAction.action()\n    }\n  }\n\n  return (\n    <div className={clsx('fixed z-40', positionClasses[position], className)}>\n      {/* Secondary Actions */}\n      {isExpanded && secondaryActions.length > 0 && (\n        <div className=\"absolute bottom-16 right-0 space-y-2\">\n          {secondaryActions.map((action, index) => (\n            <div\n              key={action.id}\n              className=\"flex items-center animate-fade-in-up\"\n              style={{ animationDelay: `${index * 50}ms` }}\n            >\n              <span className=\"mr-3 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-90\">\n                {action.label}\n              </span>\n              <button\n                onClick={() => {\n                  action.action()\n                  setIsExpanded(false)\n                }}\n                className=\"w-12 h-12 bg-white border border-gray-300 rounded-full shadow-lg flex items-center justify-center hover:shadow-xl transition-shadow\"\n              >\n                <action.icon className=\"h-5 w-5 text-gray-600\" />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Primary Action Button */}\n      <button\n        onClick={handlePrimaryAction}\n        className={clsx(\n          'w-14 h-14 bg-blue-600 rounded-full shadow-lg flex items-center justify-center text-white hover:bg-blue-700 hover:shadow-xl transition-all',\n          isExpanded && 'rotate-45'\n        )}\n      >\n        <primaryAction.icon className=\"h-6 w-6\" />\n      </button>\n    </div>\n  )\n}\n\n/**\n * Scroll-to-top button that appears when scrolling\n */\nexport const ScrollToTop: React.FC<{ threshold?: number }> = ({ threshold = 400 }) => {\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsVisible(window.scrollY > threshold)\n    }\n\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [threshold])\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    })\n  }\n\n  if (!isVisible) return null\n\n  return (\n    <button\n      onClick={scrollToTop}\n      className=\"fixed bottom-6 right-20 z-30 w-12 h-12 bg-gray-900 bg-opacity-80 text-white rounded-full shadow-lg hover:bg-opacity-100 transition-opacity flex items-center justify-center\"\n      title=\"Scroll to top\"\n    >\n      <ArrowUpIcon className=\"h-5 w-5\" />\n    </button>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/LoadingSpinner.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/LoadingSpinner.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/LoadingStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/OptimisticComponents.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":13,"column":1,"nodeType":"Identifier","messageId":"unsafeCall","endLine":13,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":14,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":14,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":15,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":19,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":19,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":19,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveClass on an `error` typed value.","line":20,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":23,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":27,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":27,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":27,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":28,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":28,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":28,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":28,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveClass on an `error` typed value.","line":28,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":31,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":35,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":35,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":35,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":35,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":35,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":36,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":36,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveClass on an `error` typed value.","line":36,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":39,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":43,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":43,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":43,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":43,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":44,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":44,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":44,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveClass on an `error` typed value.","line":44,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":48,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":48,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":49,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":49,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":52,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":52,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":55,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":55,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":58,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":58,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":58,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":61,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":61,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":64,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":64,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":64,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":64,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":64,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":65,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":65,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":65,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":69,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":70,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":77,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":77,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":77,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":77,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":78,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":78,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":81,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":81,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":81,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":81,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveClass on an `error` typed value.","line":81,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":84,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":84,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":98,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":98,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":98,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":98,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":98,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":99,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":99,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":99,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":104,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":104,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":105,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":105,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":105,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":110,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":110,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":110,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalled on an `error` typed value.","line":110,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":110,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":111,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalled on an `error` typed value.","line":111,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":114,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":114,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":121,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":121,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":121,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":121,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":121,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":122,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":122,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":122,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":122,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":123,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":123,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":123,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":123,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":123,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":127,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":127,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":128,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":128,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":137,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":137,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":137,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":137,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":137,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":140,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":140,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":149,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":149,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":149,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":149,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":149,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":152,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":152,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":161,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":161,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":161,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":162,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":162,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":162,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":162,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":162,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":166,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":166,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":167,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":167,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":176,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":176,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":176,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":176,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":176,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":177,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":177,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":177,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":177,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":177,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":178,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":178,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":178,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":178,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":178,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":184,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":184,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":184,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":184,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveStyle on an `error` typed value.","line":184,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":185,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":185,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":185,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":185,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveStyle on an `error` typed value.","line":185,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":188,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":188,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":197,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":197,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":197,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":197,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":197,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":198,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":198,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":198,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":198,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":199,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":199,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":199,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":199,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":61}],"suppressedMessages":[],"errorCount":130,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { vi } from 'vitest'\n\nimport {\n  OptimisticIndicator,\n  OptimisticBadge,\n  OptimisticListItem,\n  OptimisticOverlay,\n  OptimisticProgress\n} from './OptimisticComponents'\n\ndescribe('OptimisticComponents', () => {\n  describe('OptimisticIndicator', () => {\n    it('shows pending status with spinner', () => {\n      render(<OptimisticIndicator status=\"pending\" />)\n\n      const icon = screen.getByTestId('optimistic-indicator-pending')\n      expect(icon).toBeInTheDocument()\n      expect(icon).toHaveClass('animate-spin')\n    })\n\n    it('shows confirmed status with check icon', () => {\n      render(<OptimisticIndicator status=\"confirmed\" />)\n\n      const icon = screen.getByTestId('optimistic-indicator-confirmed')\n      expect(icon).toBeInTheDocument()\n      expect(icon).toHaveClass('text-green-500')\n    })\n\n    it('shows failed status with warning icon', () => {\n      render(<OptimisticIndicator status=\"failed\" />)\n\n      const icon = screen.getByTestId('optimistic-indicator-failed')\n      expect(icon).toBeInTheDocument()\n      expect(icon).toHaveClass('text-red-500')\n    })\n\n    it('shows rolled back status with X icon', () => {\n      render(<OptimisticIndicator status=\"rolledBack\" />)\n\n      const icon = screen.getByTestId('optimistic-indicator-rolledBack')\n      expect(icon).toBeInTheDocument()\n      expect(icon).toHaveClass('text-gray-500')\n    })\n  })\n\n  describe('OptimisticBadge', () => {\n    it('shows pending badge with text', () => {\n      render(<OptimisticBadge status=\"pending\" showText={true} />)\n\n      expect(screen.getByText('Processing')).toBeInTheDocument()\n    })\n\n    it('shows confirmed badge', () => {\n      render(<OptimisticBadge status=\"confirmed\" />)\n\n      expect(screen.getByText('Saved')).toBeInTheDocument()\n    })\n\n    it('hides text when showText is false', () => {\n      render(<OptimisticBadge status=\"pending\" showText={false} />)\n\n      expect(screen.queryByText('Processing')).not.toBeInTheDocument()\n      expect(screen.getByTitle('Processing...')).toBeInTheDocument()\n    })\n  })\n\n  describe('OptimisticListItem', () => {\n    it('renders children with pending status styling', () => {\n      render(\n        <OptimisticListItem status=\"pending\">\n          <div>Test content</div>\n        </OptimisticListItem>\n      )\n\n      expect(screen.getByText('Test content')).toBeInTheDocument()\n      expect(screen.getByText('Processing')).toBeInTheDocument()\n\n      const container = screen.getByTestId('optimistic-list-item')\n      expect(container).toHaveClass('bg-blue-50', 'border-blue-200', 'opacity-75')\n    })\n\n    it('shows retry and cancel buttons for failed items', () => {\n      const mockRetry = vi.fn()\n      const mockCancel = vi.fn()\n\n      render(\n        <OptimisticListItem\n          status=\"failed\"\n          onRetry={mockRetry}\n          onCancel={mockCancel}\n        >\n          <div>Failed content</div>\n        </OptimisticListItem>\n      )\n\n      expect(screen.getByText('Failed content')).toBeInTheDocument()\n      expect(screen.getAllByText('Failed', { selector: 'span' })[0]).toBeInTheDocument()\n\n      const retryButton = screen.getByText('Retry')\n      const cancelButton = screen.getByText('Cancel')\n\n      expect(retryButton).toBeInTheDocument()\n      expect(cancelButton).toBeInTheDocument()\n\n      retryButton.click()\n      cancelButton.click()\n\n      expect(mockRetry).toHaveBeenCalled()\n      expect(mockCancel).toHaveBeenCalled()\n    })\n\n    it('does not show action buttons for confirmed items', () => {\n      render(\n        <OptimisticListItem status=\"confirmed\">\n          <div>Confirmed content</div>\n        </OptimisticListItem>\n      )\n\n      expect(screen.getByText('Confirmed content')).toBeInTheDocument()\n      expect(screen.queryByText('Retry')).not.toBeInTheDocument()\n      expect(screen.queryByText('Cancel')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('OptimisticOverlay', () => {\n    it('does not render when inactive', () => {\n      render(\n        <OptimisticOverlay\n          isActive={false}\n          pendingCount={0}\n          failedCount={0}\n        />\n      )\n\n      expect(screen.queryByText(/processing/)).not.toBeInTheDocument()\n    })\n\n    it('shows pending operations count', () => {\n      render(\n        <OptimisticOverlay\n          isActive={true}\n          pendingCount={3}\n          failedCount={0}\n        />\n      )\n\n      expect(screen.getByText('3 processing')).toBeInTheDocument()\n    })\n\n    it('shows failed operations count', () => {\n      render(\n        <OptimisticOverlay\n          isActive={true}\n          pendingCount={1}\n          failedCount={2}\n        />\n      )\n\n      expect(screen.getByText('1 processing')).toBeInTheDocument()\n      expect(screen.getByText('2 failed')).toBeInTheDocument()\n    })\n  })\n\n  describe('OptimisticProgress', () => {\n    it('shows progress with correct percentages', () => {\n      render(\n        <OptimisticProgress\n          total={10}\n          completed={6}\n          failed={2}\n        />\n      )\n\n      expect(screen.getByText('6 completed')).toBeInTheDocument()\n      expect(screen.getByText('2 pending')).toBeInTheDocument()\n      expect(screen.getByText('2 failed')).toBeInTheDocument()\n\n      // Check that progress bars have correct widths\n      const completedBar = screen.getByTestId('optimistic-progress-completed')\n      const failedBar = screen.getByTestId('optimistic-progress-failed')\n\n      expect(completedBar).toHaveStyle('width: 60%')\n      expect(failedBar).toHaveStyle('width: 20%')\n    })\n\n    it('handles zero total gracefully', () => {\n      render(\n        <OptimisticProgress\n          total={0}\n          completed={0}\n          failed={0}\n        />\n      )\n\n      expect(screen.getByText('0 completed')).toBeInTheDocument()\n      expect(screen.getByText('0 pending')).toBeInTheDocument()\n      expect(screen.getByText('0 failed')).toBeInTheDocument()\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/OptimisticComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OptimisticUpdate' is defined but never used.","line":10,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":186,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":186,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4267,4269],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport { clsx } from 'clsx'\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ArrowPathIcon,\n  XMarkIcon,\n} from '@heroicons/react/24/outline'\n\nimport type { OptimisticUpdate } from '../../hooks/useOptimisticUpdates'\n\ninterface OptimisticIndicatorProps {\n  status: 'pending' | 'confirmed' | 'failed' | 'rolledBack'\n  className?: string\n  size?: 'sm' | 'md' | 'lg'\n}\n\nexport const OptimisticIndicator: React.FC<OptimisticIndicatorProps> = ({\n  status,\n  className,\n  size = 'md'\n}) => {\n  const sizeClasses = {\n    sm: 'h-3 w-3',\n    md: 'h-4 w-4',\n    lg: 'h-5 w-5'\n  }\n\n  const getStatusConfig = () => {\n    switch (status) {\n      case 'pending':\n        return {\n          icon: ArrowPathIcon,\n          color: 'text-blue-500',\n          animate: 'animate-spin',\n          title: 'Processing...'\n        }\n      case 'confirmed':\n        return {\n          icon: CheckCircleIcon,\n          color: 'text-green-500',\n          title: 'Confirmed'\n        }\n      case 'failed':\n        return {\n          icon: ExclamationTriangleIcon,\n          color: 'text-red-500',\n          title: 'Failed'\n        }\n      case 'rolledBack':\n        return {\n          icon: XMarkIcon,\n          color: 'text-gray-500',\n          title: 'Rolled back'\n        }\n    }\n  }\n\n  const config = getStatusConfig()\n  const Icon = config.icon\n\n  return (\n    <Icon\n      className={clsx(\n        sizeClasses[size],\n        config.color,\n        config.animate,\n        className\n      )}\n      title={config.title}\n      data-testid={`optimistic-indicator-${status}`}\n    />\n  )\n}\n\ninterface OptimisticBadgeProps {\n  status: 'pending' | 'confirmed' | 'failed' | 'rolledBack'\n  className?: string\n  showText?: boolean\n}\n\nexport const OptimisticBadge: React.FC<OptimisticBadgeProps> = ({\n  status,\n  className,\n  showText = true\n}) => {\n  const getStatusConfig = () => {\n    switch (status) {\n      case 'pending':\n        return {\n          text: 'Processing',\n          bg: 'bg-blue-100',\n          textColor: 'text-blue-800',\n          border: 'border-blue-200'\n        }\n      case 'confirmed':\n        return {\n          text: 'Saved',\n          bg: 'bg-green-100',\n          textColor: 'text-green-800',\n          border: 'border-green-200'\n        }\n      case 'failed':\n        return {\n          text: 'Failed',\n          bg: 'bg-red-100',\n          textColor: 'text-red-800',\n          border: 'border-red-200'\n        }\n      case 'rolledBack':\n        return {\n          text: 'Reverted',\n          bg: 'bg-gray-100',\n          textColor: 'text-gray-800',\n          border: 'border-gray-200'\n        }\n    }\n  }\n\n  const config = getStatusConfig()\n\n  return (\n    <span\n      className={clsx(\n        'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border',\n        config.bg,\n        config.textColor,\n        config.border,\n        className\n      )}\n    >\n      <OptimisticIndicator status={status} size=\"sm\" className=\"mr-1.5\" />\n      {showText && config.text}\n    </span>\n  )\n}\n\ninterface OptimisticListItemProps {\n  children: React.ReactNode\n  status: 'pending' | 'confirmed' | 'failed' | 'rolledBack'\n  onRetry?: () => void\n  onCancel?: () => void\n  className?: string\n}\n\nexport const OptimisticListItem: React.FC<OptimisticListItemProps> = ({\n  children,\n  status,\n  onRetry,\n  onCancel,\n  className\n}) => {\n  const getItemClasses = () => {\n    switch (status) {\n      case 'pending':\n        return 'bg-blue-50 border-blue-200 opacity-75'\n      case 'confirmed':\n        return 'bg-white border-gray-200'\n      case 'failed':\n        return 'bg-red-50 border-red-200'\n      case 'rolledBack':\n        return 'bg-gray-50 border-gray-300 opacity-50'\n    }\n  }\n\n  return (\n    <div\n      className={clsx(\n        'relative border rounded-lg p-4 transition-all duration-200',\n        getItemClasses(),\n        className\n      )}\n      data-testid=\"optimistic-list-item\"\n    >\n      {/* Status indicator */}\n      <div className=\"absolute top-2 right-2\">\n        <OptimisticBadge status={status} />\n      </div>\n\n      {/* Content */}\n      <div className={clsx({ 'pr-20': status !== 'confirmed' })}>\n        {children}\n      </div>\n\n      {/* Action buttons for failed items */}\n      {status === 'failed' && (onRetry || onCancel) && (\n        <div className=\"absolute top-2 right-20 flex space-x-1\">\n          {onRetry && (\n            <button\n              onClick={onRetry}\n              className=\"text-xs text-red-600 hover:text-red-800 underline hover:no-underline\"\n              title=\"Retry operation\"\n            >\n              Retry\n            </button>\n          )}\n          {onCancel && (\n            <button\n              onClick={onCancel}\n              className=\"text-xs text-gray-600 hover:text-gray-800 underline hover:no-underline\"\n              title=\"Cancel operation\"\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\ninterface OptimisticOverlayProps {\n  isActive: boolean\n  pendingCount: number\n  failedCount: number\n  className?: string\n}\n\nexport const OptimisticOverlay: React.FC<OptimisticOverlayProps> = ({\n  isActive,\n  pendingCount,\n  failedCount,\n  className\n}) => {\n  if (!isActive) return null\n\n  return (\n    <div\n      className={clsx(\n        'fixed top-4 right-4 z-50 bg-white border border-gray-200 rounded-lg shadow-lg p-3',\n        className\n      )}\n    >\n      <div className=\"flex items-center space-x-3\">\n        {pendingCount > 0 && (\n          <div className=\"flex items-center text-blue-600\">\n            <ArrowPathIcon className=\"h-4 w-4 mr-1 animate-spin\" />\n            <span className=\"text-sm font-medium\">\n              {pendingCount} processing\n            </span>\n          </div>\n        )}\n\n        {failedCount > 0 && (\n          <div className=\"flex items-center text-red-600\">\n            <ExclamationTriangleIcon className=\"h-4 w-4 mr-1\" />\n            <span className=\"text-sm font-medium\">\n              {failedCount} failed\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\ninterface OptimisticProgressProps {\n  total: number\n  completed: number\n  failed: number\n  className?: string\n}\n\nexport const OptimisticProgress: React.FC<OptimisticProgressProps> = ({\n  total,\n  completed,\n  failed,\n  className\n}) => {\n  const completedPercentage = total > 0 ? (completed / total) * 100 : 0\n  const failedPercentage = total > 0 ? (failed / total) * 100 : 0\n\n  return (\n    <div className={clsx('w-full', className)}>\n      {/* Progress bar */}\n      <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n        <div\n          className=\"bg-green-500 h-full transition-all duration-300\"\n          style={{ width: `${completedPercentage}%` }}\n          data-testid=\"optimistic-progress-completed\"\n        />\n        <div\n          className=\"bg-red-500 h-full transition-all duration-300\"\n          style={{ width: `${failedPercentage}%`, marginTop: '-8px' }}\n          data-testid=\"optimistic-progress-failed\"\n        />\n      </div>\n\n      {/* Stats */}\n      <div className=\"flex justify-between items-center mt-2 text-xs text-gray-600\">\n        <span>{completed} completed</span>\n        <span>{total - completed - failed} pending</span>\n        <span className=\"text-red-600\">{failed} failed</span>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/SearchAndFilter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":38},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":235,"column":9,"nodeType":"JSXOpeningElement","endLine":238,"endColumn":11},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":235,"column":9,"nodeType":"JSXOpeningElement","endLine":238,"endColumn":11},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":349,"column":21,"nodeType":"JSXOpeningElement","endLine":349,"endColumn":73},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":358,"column":21,"nodeType":"JSXOpeningElement","endLine":358,"endColumn":73},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":395,"column":9,"nodeType":"JSXOpeningElement","endLine":398,"endColumn":11},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":395,"column":9,"nodeType":"JSXOpeningElement","endLine":398,"endColumn":11}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react'\nimport {\n  MagnifyingGlassIcon,\n  XMarkIcon,\n  FunnelIcon,\n  ChevronDownIcon,\n  CalendarDaysIcon,\n  CheckIcon,\n} from '@heroicons/react/24/outline'\nimport { clsx } from 'clsx'\n\nimport { useDebounce } from '../../utils/performance'\n\n// Search component with debounced input\ninterface SearchBoxProps {\n  placeholder?: string\n  value: string\n  onChange: (value: string) => void\n  onClear?: () => void\n  debounceMs?: number\n  className?: string\n  size?: 'sm' | 'md' | 'lg'\n}\n\nexport const SearchBox: React.FC<SearchBoxProps> = ({\n  placeholder = 'Search...',\n  value,\n  onChange,\n  onClear,\n  debounceMs = 300,\n  className = '',\n  size = 'md',\n}) => {\n  const [localValue, setLocalValue] = useState(value)\n  const debouncedValue = useDebounce(localValue, debounceMs)\n\n  // Update parent when debounced value changes\n  React.useEffect(() => {\n    onChange(debouncedValue)\n  }, [debouncedValue, onChange])\n\n  // Sync with external value changes\n  React.useEffect(() => {\n    setLocalValue(value)\n  }, [value])\n\n  const handleClear = () => {\n    setLocalValue('')\n    onClear?.()\n  }\n\n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-sm',\n    lg: 'px-6 py-3 text-base',\n  }\n\n  return (\n    <div className={clsx('relative', className)}>\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <MagnifyingGlassIcon className=\"h-4 w-4 text-gray-400\" />\n        </div>\n        <input\n          type=\"text\"\n          value={localValue}\n          onChange={(e) => setLocalValue(e.target.value)}\n          placeholder={placeholder}\n          className={clsx(\n            'block w-full pl-10 pr-10 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500',\n            sizeClasses[size]\n          )}\n        />\n        {localValue && (\n          <button\n            type=\"button\"\n            onClick={handleClear}\n            className=\"absolute inset-y-0 right-0 pr-3 flex items-center hover:text-gray-600\"\n          >\n            <XMarkIcon className=\"h-4 w-4 text-gray-400\" />\n          </button>\n        )}\n      </div>\n      {debouncedValue !== localValue && (\n        <div className=\"absolute top-full left-0 mt-1 text-xs text-gray-500\">\n          Searching...\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Results counter component\ninterface ResultsCounterProps {\n  total: number\n  query?: string\n  filtered?: number\n  className?: string\n}\n\nexport const ResultsCounter: React.FC<ResultsCounterProps> = ({\n  total,\n  query,\n  filtered,\n  className = '',\n}) => {\n  if (query && filtered !== undefined) {\n    return (\n      <div className={clsx('text-sm text-gray-600', className)}>\n        {filtered === 0 ? (\n          <span className=\"text-red-600\">\n            No matches for \"<strong>{query}</strong>\"\n          </span>\n        ) : (\n          <span>\n            <strong>{filtered}</strong> results found\n            {query && (\n              <span> for \"<strong>{query}</strong>\"</span>\n            )}\n            <span className=\"text-gray-400\"> ({total} total)</span>\n          </span>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className={clsx('text-sm text-gray-600', className)}>\n      <strong>{total}</strong> {total === 1 ? 'item' : 'items'}\n    </div>\n  )\n}\n\n// Filter dropdown component\ninterface FilterOption {\n  label: string\n  value: string\n  count?: number\n}\n\ninterface FilterDropdownProps {\n  label: string\n  options: FilterOption[]\n  selectedValues: string[]\n  onChange: (values: string[]) => void\n  placeholder?: string\n  className?: string\n  maxHeight?: string\n}\n\nexport const FilterDropdown: React.FC<FilterDropdownProps> = ({\n  label,\n  options,\n  selectedValues,\n  onChange,\n  placeholder = 'All',\n  className = '',\n  maxHeight = 'max-h-60',\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleToggle = (value: string) => {\n    const newValues = selectedValues.includes(value)\n      ? selectedValues.filter(v => v !== value)\n      : [...selectedValues, value]\n    onChange(newValues)\n  }\n\n  const displayText = selectedValues.length === 0\n    ? placeholder\n    : selectedValues.length === 1\n    ? options.find(opt => opt.value === selectedValues[0])?.label\n    : `${selectedValues.length} selected`\n\n  return (\n    <div className={clsx('relative inline-block text-left', className)}>\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"inline-flex justify-between items-center w-full px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n      >\n        <div className=\"flex items-center\">\n          <FunnelIcon className=\"h-4 w-4 mr-2 text-gray-400\" />\n          <span>{label}:</span>\n          <span className=\"ml-1 font-normal\">{displayText}</span>\n        </div>\n        <ChevronDownIcon className={clsx(\n          'h-4 w-4 text-gray-400 transition-transform',\n          isOpen && 'rotate-180'\n        )} />\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute right-0 z-10 mt-2 w-56 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5\">\n          <div className={clsx('py-1 overflow-y-auto', maxHeight)}>\n            {options.map((option) => (\n              <button\n                key={option.value}\n                type=\"button\"\n                onClick={() => handleToggle(option.value)}\n                className=\"w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n              >\n                <div className=\"flex items-center flex-1\">\n                  <div className={clsx(\n                    'w-4 h-4 mr-3 border border-gray-300 rounded flex items-center justify-center',\n                    selectedValues.includes(option.value) && 'bg-primary-600 border-primary-600'\n                  )}>\n                    {selectedValues.includes(option.value) && (\n                      <CheckIcon className=\"h-3 w-3 text-white\" />\n                    )}\n                  </div>\n                  <span className=\"flex-1 text-left\">{option.label}</span>\n                  {option.count !== undefined && (\n                    <span className=\"text-xs text-gray-400\">({option.count})</span>\n                  )}\n                </div>\n              </button>\n            ))}\n          </div>\n          {selectedValues.length > 0 && (\n            <div className=\"border-t border-gray-200 py-2 px-4\">\n              <button\n                type=\"button\"\n                onClick={() => onChange([])}\n                className=\"text-sm text-primary-600 hover:text-primary-500\"\n              >\n                Clear all\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-5\"\n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </div>\n  )\n}\n\n// Date range filter component\ninterface DateRangeFilterProps {\n  startDate: string\n  endDate: string\n  onChange: (startDate: string, endDate: string) => void\n  label?: string\n  className?: string\n}\n\nexport const DateRangeFilter: React.FC<DateRangeFilterProps> = ({\n  startDate,\n  endDate,\n  onChange,\n  label = 'Date Range',\n  className = '',\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const formatDate = (date: string) => {\n    if (!date) return ''\n    return new Date(date).toLocaleDateString()\n  }\n\n  const displayText = startDate || endDate\n    ? `${formatDate(startDate)} - ${formatDate(endDate)}`\n    : 'All dates'\n\n  const presetRanges = [\n    {\n      label: 'Last 7 days',\n      getValue: () => {\n        const end = new Date()\n        const start = new Date()\n        start.setDate(start.getDate() - 7)\n        return { start: start.toISOString().split('T')[0], end: end.toISOString().split('T')[0] }\n      }\n    },\n    {\n      label: 'Last 30 days',\n      getValue: () => {\n        const end = new Date()\n        const start = new Date()\n        start.setDate(start.getDate() - 30)\n        return { start: start.toISOString().split('T')[0], end: end.toISOString().split('T')[0] }\n      }\n    },\n    {\n      label: 'Last 3 months',\n      getValue: () => {\n        const end = new Date()\n        const start = new Date()\n        start.setMonth(start.getMonth() - 3)\n        return { start: start.toISOString().split('T')[0], end: end.toISOString().split('T')[0] }\n      }\n    }\n  ]\n\n  return (\n    <div className={clsx('relative inline-block text-left', className)}>\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"inline-flex justify-between items-center w-full px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n      >\n        <div className=\"flex items-center\">\n          <CalendarDaysIcon className=\"h-4 w-4 mr-2 text-gray-400\" />\n          <span>{label}:</span>\n          <span className=\"ml-1 font-normal truncate max-w-32\">{displayText}</span>\n        </div>\n        <ChevronDownIcon className={clsx(\n          'h-4 w-4 text-gray-400 transition-transform ml-2',\n          isOpen && 'rotate-180'\n        )} />\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute right-0 z-10 mt-2 w-80 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5\">\n          <div className=\"p-4\">\n            <div className=\"space-y-4\">\n              {/* Preset ranges */}\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Quick Select</h4>\n                <div className=\"space-y-1\">\n                  {presetRanges.map((preset) => (\n                    <button\n                      key={preset.label}\n                      type=\"button\"\n                      onClick={() => {\n                        const range = preset.getValue()\n                        onChange(range.start, range.end)\n                        setIsOpen(false)\n                      }}\n                      className=\"block w-full text-left px-2 py-1 text-sm text-gray-700 hover:bg-gray-100 rounded\"\n                    >\n                      {preset.label}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Custom range */}\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Custom Range</h4>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">From</label>\n                    <input\n                      type=\"date\"\n                      value={startDate}\n                      onChange={(e) => onChange(e.target.value, endDate)}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-primary-500 focus:border-primary-500\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">To</label>\n                    <input\n                      type=\"date\"\n                      value={endDate}\n                      onChange={(e) => onChange(startDate, e.target.value)}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-primary-500 focus:border-primary-500\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex justify-between pt-2 border-t border-gray-200\">\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    onChange('', '')\n                    setIsOpen(false)\n                  }}\n                  className=\"text-sm text-gray-500 hover:text-gray-700\"\n                >\n                  Clear\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-sm text-primary-600 hover:text-primary-500\"\n                >\n                  Done\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-5\"\n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </div>\n  )\n}\n\n// Combined search and filter bar\ninterface SearchAndFilterBarProps {\n  searchValue: string\n  onSearchChange: (value: string) => void\n  searchPlaceholder?: string\n  filters?: React.ReactNode\n  resultsCount?: React.ReactNode\n  className?: string\n}\n\nexport const SearchAndFilterBar: React.FC<SearchAndFilterBarProps> = ({\n  searchValue,\n  onSearchChange,\n  searchPlaceholder = 'Search...',\n  filters,\n  resultsCount,\n  className = '',\n}) => {\n  return (\n    <div className={clsx('space-y-4', className)}>\n      {/* Search and filters row */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"flex-1 max-w-md\">\n          <SearchBox\n            value={searchValue}\n            onChange={onSearchChange}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {filters && (\n          <div className=\"flex flex-wrap gap-2\">\n            {filters}\n          </div>\n        )}\n      </div>\n\n      {/* Results counter */}\n      {resultsCount && (\n        <div className=\"flex justify-between items-center\">\n          {resultsCount}\n        </div>\n      )}\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/StatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/button.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":58,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":58,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2258,2260],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { COLOR, ACCENT_COLOR } from \"@/lib/theme\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-60 disabled:cursor-not-allowed\",\n  {\n    variants: {\n      variant: {\n        // Primary button using global COLOR theme\n        default: `bg-[${COLOR}] text-white hover:bg-[${COLOR}]/90 focus:ring-[${COLOR}]/20 shadow-sm hover:shadow-md`,\n\n        // Accent button using global ACCENT_COLOR\n        accent: `bg-[${ACCENT_COLOR}] text-white hover:bg-[${ACCENT_COLOR}]/90 focus:ring-[${ACCENT_COLOR}]/20 shadow-sm hover:shadow-md`,\n\n        // Destructive actions\n        destructive: \"bg-error-600 text-white hover:bg-error-700 focus:ring-error-200 shadow-sm hover:shadow-md\",\n\n        // Outline variant using theme colors\n        outline: `border border-[${COLOR}] text-[${COLOR}] hover:bg-[${COLOR}] hover:text-white focus:ring-[${COLOR}]/20`,\n\n        // Secondary button\n        secondary: \"bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-200\",\n\n        // Ghost button\n        ghost: \"text-gray-700 hover:bg-gray-100 focus:ring-gray-200\",\n\n        // Link variant\n        link: `text-[${COLOR}] hover:text-[${ACCENT_COLOR}] hover:underline focus:ring-[${COLOR}]/20 p-0 h-auto font-medium`,\n      },\n      size: {\n        sm: \"h-8 px-3 text-sm rounded-lg\",\n        default: \"h-10 px-4 text-sm rounded-lg\",\n        lg: \"h-12 px-6 text-base rounded-xl\",\n        icon: \"h-10 w-10 rounded-lg\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, isLoading, children, disabled, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    const isDisabled = disabled || isLoading\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={isDisabled}\n        {...props}\n      >\n        {isLoading && (\n          <svg\n            className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            />\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            />\n          </svg>\n        )}\n        {children}\n      </Comp>\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/components/ui/card.tsx","messages":[{"ruleId":"jsx-a11y/heading-has-content","severity":2,"message":"Headings must have content and the content must be accessible by a screen reader.","line":43,"column":3,"nodeType":"JSXOpeningElement","endLine":47,"endColumn":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    variant?: \"default\" | \"glass\" | \"glass-subtle\"\n  }\n>(({ className, variant = \"default\", ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border text-card-foreground shadow\",\n      {\n        \"bg-card\": variant === \"default\",\n        \"backdrop-blur-xl bg-white/85 border-gray-200/50 shadow-xl\": variant === \"glass\",\n        \"backdrop-blur-sm bg-white/60 border-white/30 shadow-lg\": variant === \"glass-subtle\",\n      },\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/examples/ValidationExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":9,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Payment' is defined but never used.","line":10,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getUser' has no 'await' expression.","line":23,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":23,"endColumn":16,"suggestions":[{"messageId":"removeAsync","fix":{"range":[646,689],"text":"getUser(id: string): unknown"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getPayments' has no 'await' expression.","line":41,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":41,"endColumn":20,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1117,1176],"text":"getPayments(organizationId: string): unknown"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'createPayment' has no 'await' expression.","line":83,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":83,"endColumn":22,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2247,2321],"text":"createPayment(request: CreatePaymentIntentRequest): unknown"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":90,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":90,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currency on an `error` typed value.","line":91,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":92,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":92,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `error` typed value.","line":92,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":92,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":92,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2633,2635],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":93,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .metadata on an `error` typed value.","line":93,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":93,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":93,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2677,2679],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":151,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":69},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":177,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":177,"endColumn":36},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":211,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":211,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ZodType<CreatePaymentIntentRequest, unknown, $ZodTypeInternals<CreatePaymentIntentRequest, unknown>>`.","line":230,"column":5,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":230,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":234,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":234,"endColumn":72},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":288,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":288,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":295,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":295,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8506,8508],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":326,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":326,"endColumn":73},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":352,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":352,"endColumn":36},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":408,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":408,"endColumn":36}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { z } from 'zod';\n\nimport { useValidatedQuery, useValidatedMutation } from '@/hooks/useValidatedApi';\nimport {\n  UserSchema,\n  PaymentSchema,\n  CreatePaymentIntentRequestSchema,\n  type User,\n  type Payment,\n  type CreatePaymentIntentRequest\n} from '@/types/api';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\n\n/**\n * Comprehensive example demonstrating runtime type validation with API calls\n */\n\n// Mock API functions for demonstration\nconst mockApiClient = {\n  async getUser(id: string): Promise<unknown> {\n    // Simulate API response - could be invalid in real scenarios\n    return {\n      success: true,\n      data: {\n        id: id,\n        email: 'user@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'USER',\n        emailVerified: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      },\n      timestamp: new Date().toISOString(),\n    };\n  },\n\n  async getPayments(organizationId: string): Promise<unknown> {\n    return {\n      success: true,\n      data: {\n        items: [\n          {\n            id: crypto.randomUUID(),\n            amount: 1999,\n            currency: 'USD',\n            status: 'COMPLETED',\n            paymentMethodId: 'pm_123',\n            customerId: 'cus_123',\n            organizationId,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            paidAt: new Date().toISOString(),\n          },\n          {\n            id: crypto.randomUUID(),\n            amount: 4999,\n            currency: 'USD',\n            status: 'PENDING',\n            paymentMethodId: 'pm_456',\n            customerId: 'cus_123',\n            organizationId,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n          },\n        ],\n        pagination: {\n          page: 0,\n          size: 10,\n          totalElements: 2,\n          totalPages: 1,\n          hasNext: false,\n          hasPrevious: false,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    };\n  },\n\n  async createPayment(request: CreatePaymentIntentRequest): Promise<unknown> {\n    return {\n      success: true,\n      data: {\n        id: crypto.randomUUID(),\n        clientSecret: 'pi_test_' + Math.random().toString(36).substr(2, 9),\n        status: 'requires_payment_method',\n        amount: request.amount,\n        currency: request.currency,\n        description: request.description || null,\n        metadata: request.metadata || null,\n      },\n      timestamp: new Date().toISOString(),\n    };\n  },\n};\n\n// Response schemas that wrap our data schemas\nconst UserResponseSchema = z.object({\n  success: z.literal(true),\n  data: UserSchema,\n  timestamp: z.string().datetime(),\n});\n\nconst PaymentsResponseSchema = z.object({\n  success: z.literal(true),\n  data: z.object({\n    items: z.array(PaymentSchema),\n    pagination: z.object({\n      page: z.number().nonnegative(),\n      size: z.number().positive(),\n      totalElements: z.number().nonnegative(),\n      totalPages: z.number().nonnegative(),\n      hasNext: z.boolean(),\n      hasPrevious: z.boolean(),\n    }),\n  }),\n  timestamp: z.string().datetime(),\n});\n\nconst PaymentIntentResponseSchema = z.object({\n  success: z.literal(true),\n  data: z.object({\n    id: z.string(),\n    clientSecret: z.string(),\n    status: z.string(),\n    amount: z.number().positive(),\n    currency: z.string().length(3),\n    description: z.string().nullable(),\n    metadata: z.record(z.string()).nullable(),\n  }),\n  timestamp: z.string().datetime(),\n});\n\n// Example component using validated queries\nconst UserProfile: React.FC<{ userId: string }> = ({ userId }) => {\n  const {\n    data: userResponse,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useValidatedQuery(\n    `user-${userId}`,\n    () => mockApiClient.getUser(userId),\n    UserResponseSchema,\n    {\n      onSuccess: (data) => {\n        console.log('✅ User data validated successfully:', data.data);\n      },\n      onError: (error) => {\n        console.error('❌ User query failed:', error.message);\n      },\n    }\n  );\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <LoadingSpinner className=\"mr-2\" />\n          Loading user profile...\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isError) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-red-600 mb-4\">\n            Error loading user: {error?.message}\n          </div>\n          <Button onClick={refetch} variant=\"outline\">\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!userResponse) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-gray-500\">No user data available</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const user = userResponse.data;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>User Profile</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2\">\n          <div><strong>ID:</strong> {user.id}</div>\n          <div><strong>Email:</strong> {user.email}</div>\n          <div><strong>Name:</strong> {user.firstName} {user.lastName}</div>\n          <div><strong>Role:</strong> {user.role}</div>\n          <div><strong>Email Verified:</strong> {user.emailVerified ? 'Yes' : 'No'}</div>\n          <div><strong>Created:</strong> {new Date(user.createdAt).toLocaleDateString()}</div>\n        </div>\n        <Button onClick={refetch} variant=\"outline\" className=\"mt-4\">\n          Refresh\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Example component using validated mutations\nconst PaymentCreator: React.FC<{ organizationId: string }> = ({ organizationId }) => {\n  const {\n    data: paymentIntentResponse,\n    isLoading,\n    isError,\n    error,\n    mutate: createPayment,\n    reset,\n  } = useValidatedMutation(\n    (request: CreatePaymentIntentRequest) => mockApiClient.createPayment(request),\n    CreatePaymentIntentRequestSchema,\n    PaymentIntentResponseSchema,\n    {\n      onSuccess: (data) => {\n        console.log('✅ Payment intent created successfully:', data.data);\n      },\n      onError: (error) => {\n        console.error('❌ Payment creation failed:', error.message);\n      },\n    }\n  );\n\n  const handleCreatePayment = async () => {\n    try {\n      await createPayment({\n        organizationId,\n        amount: 2999, // $29.99 in cents\n        currency: 'USD',\n        description: 'Example payment',\n        metadata: {\n          source: 'validation-example',\n          timestamp: new Date().toISOString(),\n        },\n      });\n    } catch (error) {\n      // Error is already handled by the mutation hook\n      console.log('Payment creation error caught in component:', error);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Create Payment Intent</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {paymentIntentResponse && (\n            <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n              <h4 className=\"font-semibold text-green-800 mb-2\">Payment Intent Created</h4>\n              <div className=\"space-y-1 text-sm text-green-700\">\n                <div><strong>ID:</strong> {paymentIntentResponse.data.id}</div>\n                <div><strong>Amount:</strong> ${(paymentIntentResponse.data.amount / 100).toFixed(2)}</div>\n                <div><strong>Status:</strong> {paymentIntentResponse.data.status}</div>\n                <div><strong>Client Secret:</strong> {paymentIntentResponse.data.clientSecret.substring(0, 20)}...</div>\n              </div>\n            </div>\n          )}\n\n          {isError && (\n            <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <h4 className=\"font-semibold text-red-800 mb-2\">Error</h4>\n              <div className=\"text-sm text-red-700\">{error?.message}</div>\n            </div>\n          )}\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={handleCreatePayment}\n              loading={isLoading}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Creating...' : 'Create Payment Intent'}\n            </Button>\n\n            {(paymentIntentResponse || isError) && (\n              <Button\n                onClick={reset}\n                variant=\"outline\"\n                disabled={isLoading}\n              >\n                Reset\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Example component showing payment list with validation\nconst PaymentList: React.FC<{ organizationId: string }> = ({ organizationId }) => {\n  const {\n    data: paymentsResponse,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useValidatedQuery(\n    `payments-${organizationId}`,\n    () => mockApiClient.getPayments(organizationId),\n    PaymentsResponseSchema,\n    {\n      staleTime: 60000, // 1 minute\n      onSuccess: (data) => {\n        console.log('✅ Payments data validated successfully:', data.data);\n      },\n      onError: (error) => {\n        console.error('❌ Payments query failed:', error.message);\n      },\n    }\n  );\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <LoadingSpinner className=\"mr-2\" />\n          Loading payments...\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isError) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-red-600 mb-4\">\n            Error loading payments: {error?.message}\n          </div>\n          <Button onClick={refetch} variant=\"outline\">\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!paymentsResponse) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-gray-500\">No payment data available</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const { items: payments, pagination } = paymentsResponse.data;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Payment History ({pagination.totalElements} total)</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {payments.map((payment) => (\n            <div\n              key={payment.id}\n              className=\"p-4 border border-gray-200 rounded-lg\"\n            >\n              <div className=\"flex justify-between items-start mb-2\">\n                <div className=\"font-semibold\">\n                  ${(payment.amount / 100).toFixed(2)} {payment.currency}\n                </div>\n                <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n                  payment.status === 'COMPLETED'\n                    ? 'bg-green-100 text-green-800'\n                    : payment.status === 'PENDING'\n                    ? 'bg-yellow-100 text-yellow-800'\n                    : 'bg-red-100 text-red-800'\n                }`}>\n                  {payment.status}\n                </div>\n              </div>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <div><strong>ID:</strong> {payment.id}</div>\n                <div><strong>Created:</strong> {new Date(payment.createdAt).toLocaleString()}</div>\n                {payment.paidAt && (\n                  <div><strong>Paid:</strong> {new Date(payment.paidAt).toLocaleString()}</div>\n                )}\n              </div>\n            </div>\n          ))}\n\n          <Button onClick={refetch} variant=\"outline\" className=\"w-full\">\n            Refresh Payments\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main example component\nexport const ValidationExample: React.FC = () => {\n  const exampleUserId = 'user-123';\n  const exampleOrganizationId = 'org-456';\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-4\">Runtime API Validation Example</h1>\n        <p className=\"text-gray-600\">\n          This example demonstrates runtime type validation for API responses using Zod schemas.\n          All API calls are automatically validated, with proper error handling and retry logic.\n        </p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <UserProfile userId={exampleUserId} />\n        <PaymentCreator organizationId={exampleOrganizationId} />\n      </div>\n\n      <PaymentList organizationId={exampleOrganizationId} />\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Validation Features</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">✅ Implemented Features</h4>\n              <ul className=\"text-sm space-y-1 text-gray-600\">\n                <li>• Runtime type validation with Zod</li>\n                <li>• Automatic error handling and retry logic</li>\n                <li>• Request and response validation</li>\n                <li>• User-friendly error messages</li>\n                <li>• Caching with staleness control</li>\n                <li>• Loading and error states</li>\n                <li>• Optimistic updates for mutations</li>\n                <li>• Type-safe API hooks</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">🔧 Technical Details</h4>\n              <ul className=\"text-sm space-y-1 text-gray-600\">\n                <li>• Comprehensive Zod schemas for all API types</li>\n                <li>• RTK Query integration with validation</li>\n                <li>• Custom hooks for validated queries/mutations</li>\n                <li>• Error mapping with severity levels</li>\n                <li>• Performance monitoring and benchmarking</li>\n                <li>• Mock data generation for testing</li>\n                <li>• Development mode validation logging</li>\n                <li>• Production error reporting integration</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useAccessibility.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":186,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useRef, useState } from 'react'\n\n/**\n * Hook for managing focus trap within a container (useful for modals, dropdowns)\n */\nexport const useFocusTrap = (isActive: boolean = false) => {\n  const containerRef = useRef<HTMLElement>(null)\n\n  useEffect(() => {\n    if (!isActive || !containerRef.current) return\n\n    const container = containerRef.current\n    const focusableElements = container.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    )\n\n    const firstElement = focusableElements[0] as HTMLElement\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement\n\n    const handleTabKey = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return\n\n      if (e.shiftKey) {\n        if (document.activeElement === firstElement) {\n          e.preventDefault()\n          lastElement?.focus()\n        }\n      } else {\n        if (document.activeElement === lastElement) {\n          e.preventDefault()\n          firstElement?.focus()\n        }\n      }\n    }\n\n    // Focus first element when trap activates\n    firstElement?.focus()\n\n    document.addEventListener('keydown', handleTabKey)\n    return () => document.removeEventListener('keydown', handleTabKey)\n  }, [isActive])\n\n  return containerRef\n}\n\n/**\n * Hook for managing keyboard navigation in lists/grids\n */\nexport const useKeyboardNavigation = <T extends HTMLElement = HTMLElement>(\n  options: {\n    direction?: 'horizontal' | 'vertical' | 'grid'\n    loop?: boolean\n    onSelect?: (index: number) => void\n    disabled?: boolean\n  } = {}\n) => {\n  const { direction = 'vertical', loop = true, onSelect, disabled = false } = options\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n  const containerRef = useRef<T>(null)\n  const itemsRef = useRef<HTMLElement[]>([])\n\n  const updateFocusableItems = useCallback(() => {\n    if (!containerRef.current) return\n\n    const focusableElements = Array.from(\n      containerRef.current.querySelectorAll(\n        '[data-keyboard-nav]:not([disabled]):not([aria-disabled=\"true\"])'\n      )\n    ) as HTMLElement[]\n\n    itemsRef.current = focusableElements\n  }, [])\n\n  const moveFocus = useCallback((newIndex: number) => {\n    if (!itemsRef.current.length) return\n\n    let targetIndex = newIndex\n\n    if (loop) {\n      if (targetIndex < 0) targetIndex = itemsRef.current.length - 1\n      if (targetIndex >= itemsRef.current.length) targetIndex = 0\n    } else {\n      targetIndex = Math.max(0, Math.min(itemsRef.current.length - 1, targetIndex))\n    }\n\n    setFocusedIndex(targetIndex)\n    itemsRef.current[targetIndex]?.focus()\n  }, [loop])\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (disabled || !itemsRef.current.length) return\n\n    updateFocusableItems()\n    const currentIndex = focusedIndex >= 0 ? focusedIndex : 0\n\n    switch (e.key) {\n      case 'ArrowDown':\n        if (direction === 'vertical' || direction === 'grid') {\n          e.preventDefault()\n          moveFocus(currentIndex + 1)\n        }\n        break\n      case 'ArrowUp':\n        if (direction === 'vertical' || direction === 'grid') {\n          e.preventDefault()\n          moveFocus(currentIndex - 1)\n        }\n        break\n      case 'ArrowRight':\n        if (direction === 'horizontal' || direction === 'grid') {\n          e.preventDefault()\n          moveFocus(currentIndex + 1)\n        }\n        break\n      case 'ArrowLeft':\n        if (direction === 'horizontal' || direction === 'grid') {\n          e.preventDefault()\n          moveFocus(currentIndex - 1)\n        }\n        break\n      case 'Home':\n        e.preventDefault()\n        moveFocus(0)\n        break\n      case 'End':\n        e.preventDefault()\n        moveFocus(itemsRef.current.length - 1)\n        break\n      case 'Enter':\n      case ' ':\n        if (onSelect && focusedIndex >= 0) {\n          e.preventDefault()\n          onSelect(focusedIndex)\n        }\n        break\n    }\n  }, [direction, disabled, focusedIndex, moveFocus, onSelect])\n\n  useEffect(() => {\n    updateFocusableItems()\n  }, [updateFocusableItems])\n\n  useEffect(() => {\n    if (disabled) return\n\n    const container = containerRef.current\n    if (container) {\n      container.addEventListener('keydown', handleKeyDown)\n      return () => container.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown, disabled])\n\n  return {\n    containerRef,\n    focusedIndex,\n    setFocusedIndex,\n    updateFocusableItems\n  }\n}\n\n/**\n * Hook for managing screen reader announcements\n */\nexport const useScreenReader = () => {\n  const [announcement, setAnnouncement] = useState('')\n  const timeoutRef = useRef<NodeJS.Timeout>()\n\n  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n    }\n\n    setAnnouncement('')\n\n    // Use timeout to ensure the announcement is read by screen readers\n    timeoutRef.current = setTimeout(() => {\n      setAnnouncement(message)\n\n      // Clear after announcement\n      setTimeout(() => setAnnouncement(''), 1000)\n    }, 10)\n  }, [])\n\n  const LiveRegion = ({ className = 'sr-only' }: { className?: string }) => (\n    <div\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n      className={className}\n    >\n      {announcement}\n    </div>\n  )\n\n  return { announce, LiveRegion }\n}\n\n/**\n * Hook for managing reduced motion preferences\n */\nexport const useReducedMotion = () => {\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false)\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)')\n    setPrefersReducedMotion(mediaQuery.matches)\n\n    const handler = (event: MediaQueryListEvent) => {\n      setPrefersReducedMotion(event.matches)\n    }\n\n    mediaQuery.addEventListener('change', handler)\n    return () => mediaQuery.removeEventListener('change', handler)\n  }, [])\n\n  return prefersReducedMotion\n}\n\n/**\n * Hook for managing skip links\n */\nexport const useSkipLinks = () => {\n  const skipLinksRef = useRef<HTMLElement[]>([])\n\n  const registerSkipLink = useCallback((element: HTMLElement | null) => {\n    if (element) {\n      skipLinksRef.current.push(element)\n    }\n  }, [])\n\n  const SkipLink = ({\n    href,\n    children\n  }: {\n    href: string\n    children: React.ReactNode\n  }) => (\n    <a\n      href={href}\n      className=\"sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 bg-blue-600 text-white px-4 py-2 rounded-md z-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    >\n      {children}\n    </a>\n  )\n\n  return { registerSkipLink, SkipLink }\n}\n\n/**\n * Hook for color contrast checking and high contrast mode\n */\nexport const useHighContrast = () => {\n  const [isHighContrast, setIsHighContrast] = useState(false)\n\n  useEffect(() => {\n    // Check for Windows High Contrast mode\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)')\n    setIsHighContrast(mediaQuery.matches)\n\n    const handler = (event: MediaQueryListEvent) => {\n      setIsHighContrast(event.matches)\n    }\n\n    mediaQuery.addEventListener('change', handler)\n    return () => mediaQuery.removeEventListener('change', handler)\n  }, [])\n\n  const getContrastClass = useCallback((normalClass: string, highContrastClass: string) => {\n    return isHighContrast ? highContrastClass : normalClass\n  }, [isHighContrast])\n\n  return { isHighContrast, getContrastClass }\n}\n\n/**\n * Hook for managing ARIA attributes dynamically\n */\nexport const useAriaAttributes = () => {\n  const setAriaLabel = useCallback((element: HTMLElement | null, label: string) => {\n    if (element) {\n      element.setAttribute('aria-label', label)\n    }\n  }, [])\n\n  const setAriaDescribedBy = useCallback((element: HTMLElement | null, id: string) => {\n    if (element) {\n      element.setAttribute('aria-describedby', id)\n    }\n  }, [])\n\n  const setAriaExpanded = useCallback((element: HTMLElement | null, expanded: boolean) => {\n    if (element) {\n      element.setAttribute('aria-expanded', expanded.toString())\n    }\n  }, [])\n\n  const setAriaSelected = useCallback((element: HTMLElement | null, selected: boolean) => {\n    if (element) {\n      element.setAttribute('aria-selected', selected.toString())\n    }\n  }, [])\n\n  const setAriaDisabled = useCallback((element: HTMLElement | null, disabled: boolean) => {\n    if (element) {\n      element.setAttribute('aria-disabled', disabled.toString())\n    }\n  }, [])\n\n  const setRole = useCallback((element: HTMLElement | null, role: string) => {\n    if (element) {\n      element.setAttribute('role', role)\n    }\n  }, [])\n\n  return {\n    setAriaLabel,\n    setAriaDescribedBy,\n    setAriaExpanded,\n    setAriaSelected,\n    setAriaDisabled,\n    setRole\n  }\n}\n\n/**\n * Hook for managing live regions for dynamic content updates\n */\nexport const useLiveRegion = (type: 'status' | 'alert' = 'status') => {\n  const [message, setMessage] = useState('')\n  const timeoutRef = useRef<NodeJS.Timeout>()\n\n  const updateLiveRegion = useCallback((newMessage: string, clearAfter = 5000) => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n    }\n\n    setMessage(newMessage)\n\n    if (clearAfter > 0) {\n      timeoutRef.current = setTimeout(() => {\n        setMessage('')\n      }, clearAfter)\n    }\n  }, [])\n\n  const clearLiveRegion = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n    }\n    setMessage('')\n  }, [])\n\n  const LiveRegion = ({ className = 'sr-only' }: { className?: string }) => (\n    <div\n      role={type}\n      aria-live={type === 'alert' ? 'assertive' : 'polite'}\n      aria-atomic=\"true\"\n      className={className}\n    >\n      {message}\n    </div>\n  )\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  return { updateLiveRegion, clearLiveRegion, LiveRegion, message }\n}\n\n/**\n * Comprehensive accessibility provider for the entire app\n */\nexport const useAccessibilityContext = () => {\n  const { announce, LiveRegion: AnnouncementRegion } = useScreenReader()\n  const prefersReducedMotion = useReducedMotion()\n  const { isHighContrast, getContrastClass } = useHighContrast()\n  const { updateLiveRegion, LiveRegion: StatusRegion } = useLiveRegion('status')\n  const { SkipLink } = useSkipLinks()\n\n  return {\n    announce,\n    updateLiveRegion,\n    prefersReducedMotion,\n    isHighContrast,\n    getContrastClass,\n    components: {\n      AnnouncementRegion,\n      StatusRegion,\n      SkipLink\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useAutoSave.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used.","line":1,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":6,"column":1,"nodeType":"Identifier","messageId":"unsafeCall","endLine":6,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":7,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":7,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":11,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":15,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":15,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":27,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":27,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":27,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":28,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":28,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":28,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":28,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":39,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":39,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":40,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":40,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":43,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":43,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":63,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":63,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":63,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":71,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":71,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":71,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":71,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":74,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":74,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":93,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":93,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":93,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":94,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":94,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":94,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":94,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":94,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":95,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":95,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":98,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":98,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":117,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":117,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":117,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":125,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":125,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":125,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":125,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":125,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":126,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":126,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":126,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":126,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledTimes on an `error` typed value.","line":126,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":129,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":129,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":139,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":139,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":139,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":139,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":139,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":144,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":144,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":144,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":144,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":144,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":147,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":147,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":163,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":163,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":163,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":163,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":163,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":166,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":166,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":169,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":19},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":176,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":176,"endColumn":26,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4475,4481],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":181,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":181,"endColumn":26,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4587,4593],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":191,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":191,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":191,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":191,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledTimes on an `error` typed value.","line":191,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":192,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":192,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":192,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":192,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":192,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":195,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":195,"endColumn":5},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":208,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":208,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5260,5260],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5260,5260],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":212,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":212,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":212,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":213,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":213,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":213,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":213,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":213,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":39}],"suppressedMessages":[],"errorCount":73,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, waitFor, act } from '@testing-library/react'\nimport { vi } from 'vitest'\n\nimport { useAutoSave } from './useAutoSave'\n\ndescribe('useAutoSave', () => {\n  beforeEach(() => {\n    vi.useFakeTimers()\n  })\n\n  afterEach(() => {\n    vi.useRealTimers()\n  })\n\n  it('should save data after delay', async () => {\n    const mockSave = vi.fn().mockResolvedValue(undefined)\n    const data = { name: 'Test', slug: 'test' }\n\n    const { result, rerender } = renderHook(\n      ({ data }) => useAutoSave(data, {\n        delay: 1000,\n        onSave: mockSave,\n      }),\n      { initialProps: { data: {} } }\n    )\n\n    expect(result.current.status).toBe('idle')\n    expect(mockSave).not.toHaveBeenCalled()\n\n    // Update data to trigger auto-save\n    rerender({ data })\n\n    // Fast forward time to trigger save and run all async operations\n    await act(async () => {\n      vi.advanceTimersByTime(1000)\n      await vi.runOnlyPendingTimersAsync()\n    })\n\n    expect(mockSave).toHaveBeenCalledWith(data)\n    expect(result.current.status).toBe('saved')\n  })\n\n  it('should show saving state during save', async () => {\n    let resolveSave: () => void\n    const mockSave = vi.fn(() => new Promise<void>(resolve => {\n      resolveSave = resolve\n    }))\n\n    const data = { name: 'Test' }\n    const { result } = renderHook(() =>\n      useAutoSave(data, {\n        delay: 500,\n        onSave: mockSave,\n      })\n    )\n\n    // Trigger the timer and wait for the save to start\n    await act(async () => {\n      vi.advanceTimersByTime(500)\n      await vi.runOnlyPendingTimersAsync()\n    })\n\n    expect(result.current.status).toBe('saving')\n\n    // Resolve the save\n    await act(async () => {\n      resolveSave!()\n      await vi.runAllTimersAsync()\n    })\n\n    expect(result.current.status).toBe('saved')\n  })\n\n  it('should handle save errors', async () => {\n    const mockError = new Error('Save failed')\n    const mockSave = vi.fn().mockRejectedValue(mockError)\n    const mockOnError = vi.fn()\n\n    const data = { name: 'Test' }\n    const { result } = renderHook(() =>\n      useAutoSave(data, {\n        delay: 500,\n        onSave: mockSave,\n        onError: mockOnError,\n      })\n    )\n\n    await act(async () => {\n      vi.advanceTimersByTime(500)\n      await vi.runAllTimersAsync()\n    })\n\n    expect(result.current.status).toBe('error')\n    expect(result.current.error).toBe(mockError)\n    expect(mockOnError).toHaveBeenCalledWith(mockError)\n  })\n\n  it('should retry failed saves', async () => {\n    const mockSave = vi.fn()\n      .mockRejectedValueOnce(new Error('First fail'))\n      .mockResolvedValueOnce(undefined)\n\n    const data = { name: 'Test' }\n    const { result } = renderHook(() =>\n      useAutoSave(data, {\n        delay: 500,\n        onSave: mockSave,\n      })\n    )\n\n    // Initial save attempt\n    await act(async () => {\n      vi.advanceTimersByTime(500)\n      await vi.runAllTimersAsync()\n    })\n\n    expect(result.current.status).toBe('error')\n\n    // Retry\n    await act(async () => {\n      result.current.retry()\n      await vi.runAllTimersAsync()\n    })\n\n    expect(result.current.status).toBe('saved')\n    expect(mockSave).toHaveBeenCalledTimes(2)\n  })\n\n  it('should detect unsaved changes', () => {\n    const mockSave = vi.fn().mockResolvedValue(undefined)\n    const data = { name: 'Test', slug: 'test' }\n\n    const { result, rerender } = renderHook(\n      ({ data }) => useAutoSave(data, { onSave: mockSave }),\n      { initialProps: { data } }\n    )\n\n    // Initially no unsaved changes\n    expect(result.current.hasUnsavedChanges).toBe(false)\n\n    // Update data\n    rerender({ data: { name: 'Updated', slug: 'updated' } })\n\n    expect(result.current.hasUnsavedChanges).toBe(true)\n  })\n\n  it('should not save empty data', async () => {\n    const mockSave = vi.fn().mockResolvedValue(undefined)\n    const emptyData = {}\n\n    renderHook(() =>\n      useAutoSave(emptyData, {\n        delay: 500,\n        onSave: mockSave,\n      })\n    )\n\n    await act(async () => {\n      vi.advanceTimersByTime(500)\n      await vi.runAllTimersAsync()\n    })\n\n    expect(mockSave).not.toHaveBeenCalled()\n  })\n\n  it('should debounce rapid changes', async () => {\n    const mockSave = vi.fn().mockResolvedValue(undefined)\n\n    const { result, rerender } = renderHook(\n      ({ data }) => useAutoSave(data, { delay: 1000, onSave: mockSave }),\n      { initialProps: { data: { name: 'Test1' } } }\n    )\n\n    // Rapid changes\n    rerender({ data: { name: 'Test2' } })\n    await act(async () => {\n      vi.advanceTimersByTime(500)\n    })\n\n    rerender({ data: { name: 'Test3' } })\n    await act(async () => {\n      vi.advanceTimersByTime(500)\n    })\n\n    rerender({ data: { name: 'Test4' } })\n    await act(async () => {\n      vi.advanceTimersByTime(1000)\n      await vi.runAllTimersAsync()\n    })\n\n    expect(mockSave).toHaveBeenCalledTimes(1)\n    expect(mockSave).toHaveBeenCalledWith({ name: 'Test4' })\n  })\n\n  it('should provide manual save function', async () => {\n    const mockSave = vi.fn().mockResolvedValue(undefined)\n    const data = { name: 'Test' }\n\n    const { result } = renderHook(() =>\n      useAutoSave(data, {\n        delay: 2000,\n        onSave: mockSave,\n      })\n    )\n\n    // Manual save before auto-save delay\n    await act(async () => {\n      result.current.save()\n      await vi.runAllTimersAsync()\n    })\n\n    expect(mockSave).toHaveBeenCalledWith(data)\n    expect(result.current.status).toBe('saved')\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useAutoSave.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[135,138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[135,138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[297,300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[297,300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [data]","fix":{"range":[879,881],"text":"[data]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":50,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":50,"endColumn":13,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1478,1478],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1478,1478],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":69,"column":39,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":69,"endColumn":43}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react'\n\nexport interface AutoSaveOptions {\n  delay?: number\n  onSave: (data: any) => Promise<void>\n  onError?: (error: Error) => void\n}\n\nexport type AutoSaveStatus = 'idle' | 'saving' | 'saved' | 'error'\n\nexport const useAutoSave = (data: any, options: AutoSaveOptions) => {\n  const { delay = 2000, onSave, onError } = options\n  const [status, setStatus] = useState<AutoSaveStatus>('idle')\n  const [lastSaved, setLastSaved] = useState<Date | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const timeoutRef = useRef<NodeJS.Timeout>()\n  const lastSavedRef = useRef<string>()\n  const initialDataRef = useRef<string>()\n\n  // Track initial data to detect if there are unsaved changes\n  useEffect(() => {\n    if (!initialDataRef.current) {\n      initialDataRef.current = JSON.stringify(data)\n    }\n  }, [])\n\n  const save = useCallback(async () => {\n    const currentData = JSON.stringify(data)\n    if (currentData === lastSavedRef.current) return\n\n    setStatus('saving')\n    setError(null)\n\n    try {\n      await onSave(data)\n      lastSavedRef.current = currentData\n      setLastSaved(new Date())\n      setStatus('saved')\n      setTimeout(() => setStatus('idle'), 2000)\n    } catch (error) {\n      const err = error as Error\n      setStatus('error')\n      setError(err)\n      onError?.(err)\n    }\n  }, [data, onSave, onError])\n\n  const retry = useCallback(() => {\n    if (status === 'error') {\n      save()\n    }\n  }, [save, status])\n\n  const hasUnsavedChanges = useCallback(() => {\n    const currentData = JSON.stringify(data)\n    const hasData = currentData !== JSON.stringify({}) && currentData !== initialDataRef.current\n    const isNotSaved = currentData !== lastSavedRef.current\n    return hasData && isNotSaved && status !== 'saving'\n  }, [data, status])\n\n  useEffect(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n    }\n\n    // Only auto-save if there's actual content\n    const currentData = JSON.stringify(data)\n    if (currentData !== JSON.stringify({}) && currentData !== initialDataRef.current) {\n      timeoutRef.current = setTimeout(save, delay)\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [data, delay, save])\n\n  return {\n    status,\n    lastSaved,\n    error,\n    hasUnsavedChanges: hasUnsavedChanges(),\n    save: () => save(),\n    retry\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useDataSync.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dispatch' is assigned a value but never used.","line":38,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1127,1130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1127,1130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":49,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":49,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1264,1264],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1264,1264],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1380,1383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1380,1383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":58,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":58,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":59,"endColumn":48},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":74,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":74,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1961,1961],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1961,1961],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":110,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":110,"endColumn":55,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2729,2735],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":115,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":115,"endColumn":50,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2937,2943],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":120,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":120,"endColumn":55,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3161,3167],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":125,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":125,"endColumn":47,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3366,3372],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useRef } from 'react'\n\nimport { useAppDispatch } from '../store/hooks'\n\ninterface DataSyncOptions {\n  /**\n   * Keys of data that should trigger sync when changed\n   */\n  dependencies: string[]\n\n  /**\n   * Function to sync data across components\n   */\n  onSync: (data: Record<string, any>) => Promise<void> | void\n\n  /**\n   * Interval in milliseconds for periodic sync (optional)\n   */\n  interval?: number\n\n  /**\n   * Whether sync is enabled\n   */\n  enabled?: boolean\n\n  /**\n   * Debounce delay in milliseconds\n   */\n  debounceMs?: number\n}\n\n/**\n * Custom hook for synchronizing data across components\n * Helps maintain consistency when data changes in one component affect others\n */\nexport const useDataSync = (options: DataSyncOptions) => {\n  const { dependencies, onSync, interval, enabled = true, debounceMs = 300 } = options\n  const dispatch = useAppDispatch()\n  const lastSyncRef = useRef<Record<string, any>>({})\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null)\n  const intervalRef = useRef<NodeJS.Timeout | null>(null)\n\n  const debouncedSync = useCallback((data: Record<string, any>) => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      onSync(data)\n    }, debounceMs)\n  }, [onSync, debounceMs])\n\n  const triggerSync = useCallback((data: Record<string, any>) => {\n    if (!enabled) return\n\n    // Check if data has actually changed\n    const hasChanged = dependencies.some(key => {\n      const current = data[key]\n      const previous = lastSyncRef.current[key]\n\n      return JSON.stringify(current) !== JSON.stringify(previous)\n    })\n\n    if (hasChanged) {\n      lastSyncRef.current = { ...data }\n      debouncedSync(data)\n    }\n  }, [dependencies, enabled, debouncedSync])\n\n  // Set up periodic sync if interval is provided\n  useEffect(() => {\n    if (interval && enabled) {\n      intervalRef.current = setInterval(() => {\n        onSync(lastSyncRef.current)\n      }, interval)\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current)\n      }\n    }\n  }, [interval, enabled, onSync])\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current)\n      }\n    }\n  }, [])\n\n  return {\n    triggerSync,\n    lastSync: lastSyncRef.current,\n  }\n}\n\n/**\n * Hook for cross-component state synchronization\n * Useful when multiple components need to stay in sync with shared data\n */\nexport const useCrossComponentSync = () => {\n  const dispatch = useAppDispatch()\n\n  const syncOrganizationData = useCallback(async () => {\n    // Trigger refetch of organization data across all components\n    dispatch({ type: 'api/invalidateTags', payload: ['Organization'] })\n  }, [dispatch])\n\n  const syncPaymentData = useCallback(async () => {\n    // Trigger refetch of payment data across all components\n    dispatch({ type: 'api/invalidateTags', payload: ['Payment', 'PaymentStatistics'] })\n  }, [dispatch])\n\n  const syncSubscriptionData = useCallback(async () => {\n    // Trigger refetch of subscription data across all components\n    dispatch({ type: 'api/invalidateTags', payload: ['Subscription'] })\n  }, [dispatch])\n\n  const syncUserData = useCallback(async () => {\n    // Trigger refetch of user data across all components\n    dispatch({ type: 'api/invalidateTags', payload: ['User'] })\n  }, [dispatch])\n\n  const syncAllData = useCallback(async () => {\n    // Sync all data types\n    await Promise.all([\n      syncOrganizationData(),\n      syncPaymentData(),\n      syncSubscriptionData(),\n      syncUserData(),\n    ])\n  }, [syncOrganizationData, syncPaymentData, syncSubscriptionData, syncUserData])\n\n  return {\n    syncOrganizationData,\n    syncPaymentData,\n    syncSubscriptionData,\n    syncUserData,\n    syncAllData,\n  }\n}\n\n/**\n * Hook for optimistic UI updates\n * Updates UI immediately while syncing with server in background\n */\nexport const useOptimisticUpdates = <T>() => {\n  const optimisticStateRef = useRef<Map<string, T>>(new Map())\n\n  const addOptimisticUpdate = useCallback((key: string, data: T) => {\n    optimisticStateRef.current.set(key, data)\n  }, [])\n\n  const removeOptimisticUpdate = useCallback((key: string) => {\n    optimisticStateRef.current.delete(key)\n  }, [])\n\n  const getOptimisticState = useCallback((key: string): T | undefined => {\n    return optimisticStateRef.current.get(key)\n  }, [])\n\n  const clearOptimisticUpdates = useCallback(() => {\n    optimisticStateRef.current.clear()\n  }, [])\n\n  return {\n    addOptimisticUpdate,\n    removeOptimisticUpdate,\n    getOptimisticState,\n    clearOptimisticUpdates,\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useNotificationIntegration.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":85,"column":23,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":85,"endColumn":86,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2902,2902],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2902,2902],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react'\n\nimport { useNotifications, createNotificationHelpers } from '../components/ui/FeedbackSystem'\n\nimport { useOptimisticUpdates, type OptimisticUpdateOptions } from './useOptimisticUpdates'\n\n/**\n * Enhanced hook that integrates optimistic updates with the notification system\n * for better user feedback and error handling\n */\nexport const useOptimisticNotifications = <T>() => {\n  const notifications = useNotifications()\n  const optimisticUpdates = useOptimisticUpdates<T>()\n  const helpers = createNotificationHelpers()\n\n  const addOptimisticUpdateWithNotifications = useCallback(\n    async <R>(\n      data: T,\n      mutationFn: (data: T) => Promise<R>,\n      options: OptimisticUpdateOptions<T> & {\n        loadingTitle?: string\n        loadingMessage?: string\n        successTitle?: string\n        successMessage?: string\n        errorTitle?: string\n        showLoadingNotification?: boolean\n        showSuccessNotification?: boolean\n        autoCloseLoading?: boolean\n      } = {}\n    ): Promise<R | null> => {\n      const {\n        loadingTitle = 'Processing...',\n        loadingMessage,\n        successTitle = 'Success!',\n        successMessage,\n        errorTitle = 'Operation failed',\n        showLoadingNotification = true,\n        showSuccessNotification = true,\n        autoCloseLoading = true,\n        ...optimisticOptions\n      } = options\n\n      let loadingNotificationId: string | null = null\n\n      // Show loading notification\n      if (showLoadingNotification) {\n        loadingNotificationId = helpers.showLoading(loadingTitle, loadingMessage)\n      }\n\n      try {\n        const result = await optimisticUpdates.addOptimisticUpdate(\n          data,\n          mutationFn,\n          {\n            ...optimisticOptions,\n            onSuccess: (data) => {\n              // Close loading notification\n              if (loadingNotificationId && autoCloseLoading) {\n                notifications.removeNotification(loadingNotificationId)\n              }\n\n              // Show success notification\n              if (showSuccessNotification) {\n                helpers.showSuccess(successTitle, successMessage)\n              }\n\n              // Call original success callback\n              optimisticOptions.onSuccess?.(data)\n            },\n            onError: (error, rollbackData) => {\n              // Close loading notification\n              if (loadingNotificationId && autoCloseLoading) {\n                notifications.removeNotification(loadingNotificationId)\n              }\n\n              // Show error notification with rollback action\n              helpers.showActionable(\n                errorTitle,\n                error.message || 'An unexpected error occurred',\n                [\n                  {\n                    label: 'Retry',\n                    onClick: () => {\n                      // Retry the operation\n                      addOptimisticUpdateWithNotifications(data, mutationFn, options)\n                    },\n                    variant: 'primary'\n                  },\n                  {\n                    label: 'Undo',\n                    onClick: () => {\n                      // Trigger rollback through original callback\n                      optimisticOptions.onError?.(error, rollbackData)\n                    },\n                    variant: 'secondary'\n                  }\n                ]\n              )\n            }\n          }\n        )\n\n        return result\n      } catch (error) {\n        // Close loading notification on immediate error\n        if (loadingNotificationId && autoCloseLoading) {\n          notifications.removeNotification(loadingNotificationId)\n        }\n        throw error\n      }\n    },\n    [optimisticUpdates, notifications, helpers]\n  )\n\n  const updateLoadingNotification = useCallback(\n    (notificationId: string, progress: number, message?: string) => {\n      notifications.updateNotification(notificationId, {\n        title: `Processing... ${progress}%`,\n        message\n      })\n    },\n    [notifications]\n  )\n\n  return {\n    ...optimisticUpdates,\n    addOptimisticUpdateWithNotifications,\n    updateLoadingNotification,\n    notifications,\n    ...helpers\n  }\n}\n\n/**\n * Hook for enhanced form submission with integrated notifications\n */\nexport const useFormSubmissionNotifications = () => {\n  const helpers = createNotificationHelpers()\n\n  const submitFormWithNotifications = useCallback(\n    async <T, R>(\n      data: T,\n      submitFn: (data: T) => Promise<R>,\n      options: {\n        loadingTitle?: string\n        successTitle?: string\n        successMessage?: string\n        errorTitle?: string\n        onSuccess?: (result: R) => void\n        onError?: (error: Error) => void\n        validateBeforeSubmit?: (data: T) => string | null\n      } = {}\n    ): Promise<R | null> => {\n      const {\n        loadingTitle = 'Submitting...',\n        successTitle = 'Submitted successfully!',\n        successMessage,\n        errorTitle = 'Submission failed',\n        onSuccess,\n        onError,\n        validateBeforeSubmit\n      } = options\n\n      // Pre-submission validation\n      if (validateBeforeSubmit) {\n        const validationError = validateBeforeSubmit(data)\n        if (validationError) {\n          helpers.showError('Validation Error', validationError)\n          return null\n        }\n      }\n\n      const loadingId = helpers.showLoading(loadingTitle)\n\n      try {\n        const result = await submitFn(data)\n\n        helpers.updateNotification(loadingId, {\n          variant: 'success',\n          title: successTitle,\n          message: successMessage,\n          persistent: false,\n          duration: 4000\n        })\n\n        onSuccess?.(result)\n        return result\n      } catch (error) {\n        const err = error as Error\n\n        helpers.updateNotification(loadingId, {\n          variant: 'error',\n          title: errorTitle,\n          message: err.message || 'An unexpected error occurred',\n          persistent: false,\n          duration: 6000\n        })\n\n        onError?.(err)\n        return null\n      }\n    },\n    [helpers]\n  )\n\n  return {\n    submitFormWithNotifications,\n    ...helpers\n  }\n}\n\n/**\n * Hook for batch operations with progress tracking\n */\nexport const useBatchOperationNotifications = () => {\n  const helpers = createNotificationHelpers()\n  const notifications = useNotifications()\n\n  const executeBatchOperation = useCallback(\n    async <T, R>(\n      items: T[],\n      operationFn: (item: T, index: number) => Promise<R>,\n      options: {\n        batchTitle?: string\n        successTitle?: string\n        errorTitle?: string\n        showProgress?: boolean\n        onItemComplete?: (item: T, result: R, index: number) => void\n        onItemError?: (item: T, error: Error, index: number) => void\n        onComplete?: (results: Array<R | null>) => void\n      } = {}\n    ): Promise<Array<R | null>> => {\n      const {\n        batchTitle = 'Processing items...',\n        successTitle = 'Batch operation completed',\n        errorTitle = 'Batch operation completed with errors',\n        showProgress = true,\n        onItemComplete,\n        onItemError,\n        onComplete\n      } = options\n\n      if (items.length === 0) {\n        helpers.showInfo('No items to process')\n        return []\n      }\n\n      const notificationId = helpers.showLoading(batchTitle, `Processing ${items.length} items`)\n      const results: Array<R | null> = []\n      let completed = 0\n      let errors = 0\n\n      for (let i = 0; i < items.length; i++) {\n        try {\n          const result = await operationFn(items[i], i)\n          results.push(result)\n          completed++\n          onItemComplete?.(items[i], result, i)\n        } catch (error) {\n          const err = error as Error\n          results.push(null)\n          errors++\n          onItemError?.(items[i], err, i)\n        }\n\n        // Update progress\n        if (showProgress) {\n          const progress = Math.round(((i + 1) / items.length) * 100)\n          notifications.updateNotification(notificationId, {\n            title: `${batchTitle} ${progress}%`,\n            message: `${completed} completed, ${errors} errors`\n          })\n        }\n      }\n\n      // Show final result\n      const hasErrors = errors > 0\n      notifications.updateNotification(notificationId, {\n        variant: hasErrors ? 'warning' : 'success',\n        title: hasErrors ? errorTitle : successTitle,\n        message: `${completed} completed successfully${hasErrors ? `, ${errors} failed` : ''}`,\n        persistent: false,\n        duration: 5000,\n        ...(hasErrors && {\n          actions: [\n            {\n              label: 'View Details',\n              onClick: () => {\n                helpers.showInfo('Operation Details',\n                  `Completed: ${completed}\\nFailed: ${errors}\\nTotal: ${items.length}`)\n              },\n              variant: 'primary'\n            }\n          ]\n        })\n      })\n\n      onComplete?.(results)\n      return results\n    },\n    [helpers, notifications]\n  )\n\n  return {\n    executeBatchOperation,\n    ...helpers\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useOptimisticUpdates.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":6,"column":1,"nodeType":"Identifier","messageId":"unsafeCall","endLine":6,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":7,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":7,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":11,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":15,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":15,"endColumn":5},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[597,600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[597,600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":30,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveLength on an `error` typed value.","line":30,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":31,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":31,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":38,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":38,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":38,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":38,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":39,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":39,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":47,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":47,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":47,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveLength on an `error` typed value.","line":47,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":50,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":50,"endColumn":5},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1701,1704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1701,1704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":68,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":68,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":68,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeNull on an `error` typed value.","line":68,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":69,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":69,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":69,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":78,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":78,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":79,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":79,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":79,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":79,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":80,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .objectContaining on an `error` typed value.","line":80,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":86,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":86,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":101,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":106,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":106,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":106,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":115,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":115,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":115,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":115,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeDefined on an `error` typed value.","line":115,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":118,"endColumn":5},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3537,3540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3537,3540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":126,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":126,"endColumn":20,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3645,3651],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":130,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":130,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":130,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":130,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":130,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":131,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":131,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":131,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveLength on an `error` typed value.","line":131,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":132,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":132,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":132,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":132,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveLength on an `error` typed value.","line":132,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":141,"column":1,"nodeType":"Identifier","messageId":"unsafeCall","endLine":141,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":142,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":142,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":146,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":146,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":150,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":150,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":160,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":160,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":160,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":160,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveLength on an `error` typed value.","line":160,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":171,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":171,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":171,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":171,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveLength on an `error` typed value.","line":171,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":172,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":172,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toEqual on an `error` typed value.","line":172,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":173,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":173,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":173,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":173,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":176,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":176,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":196,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":196,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":196,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":196,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":196,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":197,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":197,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":197,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":197,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":197,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":200,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":200,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":219,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":219,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":219,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":219,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveLength on an `error` typed value.","line":219,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":220,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":220,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":220,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":220,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeUndefined on an `error` typed value.","line":220,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":221,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":221,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":221,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":221,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalledWith on an `error` typed value.","line":221,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":224,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":224,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":241,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":246,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":246,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":246,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":246,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveBeenCalled on an `error` typed value.","line":246,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":249,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":249,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":249,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":249,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":249,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":250,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":250,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":250,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":250,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBe on an `error` typed value.","line":250,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":253,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":253,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rerender' is assigned a value but never used.","line":256,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":256,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":261,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":261,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":261,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":261,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toEqual on an `error` typed value.","line":261,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":272,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":272,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":272,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":272,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toEqual on an `error` typed value.","line":272,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":272,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":273,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":273,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":273,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":273,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toEqual on an `error` typed value.","line":273,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":40}],"suppressedMessages":[],"errorCount":111,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, waitFor, act } from '@testing-library/react'\nimport { vi } from 'vitest'\n\nimport { useOptimisticUpdates, useOptimisticList } from './useOptimisticUpdates'\n\ndescribe('useOptimisticUpdates', () => {\n  beforeEach(() => {\n    vi.useFakeTimers()\n  })\n\n  afterEach(() => {\n    vi.useRealTimers()\n  })\n\n  it('should add optimistic update and confirm on success', async () => {\n    const mockMutation = vi.fn().mockResolvedValue('success')\n    const { result } = renderHook(() => useOptimisticUpdates())\n\n    const testData = { id: '1', name: 'Test' }\n\n    let updatePromise: Promise<any>\n    act(() => {\n      updatePromise = result.current.addOptimisticUpdate(\n        testData,\n        mockMutation,\n        { successMessage: 'Success!' }\n      )\n    })\n\n    expect(result.current.optimisticUpdates).toHaveLength(1)\n    expect(result.current.optimisticUpdates[0].status).toBe('pending')\n\n    // Wait for mutation to be called and completed\n    await act(async () => {\n      await updatePromise\n    })\n\n    expect(mockMutation).toHaveBeenCalledWith(testData)\n    expect(result.current.optimisticUpdates[0].status).toBe('confirmed')\n\n    // Should clean up after delay\n    await act(async () => {\n      vi.advanceTimersByTime(3000)\n      await vi.runAllTimersAsync()\n    })\n\n    expect(result.current.optimisticUpdates).toHaveLength(0)\n  })\n\n  it('should handle errors and provide rollback', async () => {\n    const mockError = new Error('Mutation failed')\n    const mockMutation = vi.fn().mockRejectedValue(mockError)\n    const mockOnError = vi.fn()\n\n    const { result } = renderHook(() => useOptimisticUpdates())\n\n    const testData = { id: '1', name: 'Test' }\n\n    let updateResult: any\n    await act(async () => {\n      updateResult = await result.current.addOptimisticUpdate(\n        testData,\n        mockMutation,\n        { onError: mockOnError, rollbackDelay: 1000 }\n      )\n    })\n\n    expect(updateResult).toBeNull()\n    expect(result.current.optimisticUpdates[0].status).toBe('failed')\n\n    // Test manual rollback\n    const updateId = result.current.optimisticUpdates[0].id\n    act(() => {\n      result.current.rollbackUpdate(updateId, testData, mockOnError)\n    })\n\n    await waitFor(() => {\n      expect(result.current.optimisticUpdates[0].status).toBe('rolledBack')\n      expect(mockOnError).toHaveBeenCalledWith(\n        expect.objectContaining({ message: 'Operation rolled back' }),\n        testData\n      )\n    })\n  })\n\n  it('should auto-rollback after delay', async () => {\n    const mockMutation = vi.fn().mockRejectedValue(new Error('Failed'))\n    const mockOnError = vi.fn()\n\n    const { result } = renderHook(() => useOptimisticUpdates())\n\n    const testData = { id: '1', name: 'Test' }\n\n    await act(async () => {\n      try {\n        await result.current.addOptimisticUpdate(\n          testData,\n          mockMutation,\n          { onError: mockOnError, rollbackDelay: 1000 }\n        )\n      } catch (error) {\n        // Expected to fail\n      }\n    })\n\n    expect(result.current.optimisticUpdates[0]?.status).toBe('failed')\n\n    // Fast forward to trigger auto-rollback\n    await act(async () => {\n      vi.advanceTimersByTime(1000)\n      await vi.runAllTimersAsync()\n    })\n\n    const rolledBackUpdate = result.current.optimisticUpdates.find(u => u.status === 'rolledBack')\n    expect(rolledBackUpdate).toBeDefined()\n  })\n\n  it('should provide helper methods', async () => {\n    const { result } = renderHook(() => useOptimisticUpdates())\n\n    // Add some updates\n    let updatePromise: Promise<any>\n    act(() => {\n      updatePromise = result.current.addOptimisticUpdate(\n        { id: '1' },\n        async () => 'success'\n      )\n    })\n\n    expect(result.current.hasOptimisticUpdates).toBe(true)\n    expect(result.current.getPendingUpdates()).toHaveLength(1)\n    expect(result.current.getFailedUpdates()).toHaveLength(0)\n\n    // Wait for update to complete to avoid act warnings\n    await act(async () => {\n      await updatePromise\n    })\n  })\n})\n\ndescribe('useOptimisticList', () => {\n  beforeEach(() => {\n    vi.useFakeTimers()\n  })\n\n  afterEach(() => {\n    vi.useRealTimers()\n  })\n\n  it('should optimistically add items', async () => {\n    const initialData = [\n      { id: '1', name: 'Item 1' },\n      { id: '2', name: 'Item 2' }\n    ]\n\n    const { result } = renderHook(() =>\n      useOptimisticList(initialData)\n    )\n\n    expect(result.current.data).toHaveLength(2)\n\n    const newItem = { id: '3', name: 'Item 3' }\n    const mockMutation = vi.fn().mockResolvedValue(newItem)\n\n    await act(async () => {\n      const addPromise = result.current.addItem(newItem, mockMutation)\n      await addPromise\n    })\n\n    // Should immediately show in optimistic list\n    expect(result.current.data).toHaveLength(3)\n    expect(result.current.data[0]).toEqual(newItem) // Added to beginning\n    expect(mockMutation).toHaveBeenCalledWith(newItem)\n  })\n\n  it('should optimistically update items', async () => {\n    const initialData = [\n      { id: '1', name: 'Item 1' },\n      { id: '2', name: 'Item 2' }\n    ]\n\n    const { result } = renderHook(() =>\n      useOptimisticList(initialData)\n    )\n\n    const updatedItem = { id: '1', name: 'Updated Item 1' }\n    const mockMutation = vi.fn().mockResolvedValue(updatedItem)\n\n    await act(async () => {\n      const updatePromise = result.current.updateItem(updatedItem, mockMutation)\n      await updatePromise\n    })\n\n    // Should immediately reflect in optimistic list\n    const updatedItemInList = result.current.data.find(item => item.id === '1')\n    expect(updatedItemInList?.name).toBe('Updated Item 1')\n    expect(mockMutation).toHaveBeenCalledWith(updatedItem)\n  })\n\n  it('should optimistically delete items', async () => {\n    const initialData = [\n      { id: '1', name: 'Item 1' },\n      { id: '2', name: 'Item 2' }\n    ]\n\n    const { result } = renderHook(() =>\n      useOptimisticList(initialData)\n    )\n\n    const itemToDelete = initialData[0]\n    const mockMutation = vi.fn().mockResolvedValue(undefined)\n\n    await act(async () => {\n      const deletePromise = result.current.deleteItem(itemToDelete, mockMutation)\n      await deletePromise\n    })\n\n    // Should immediately remove from optimistic list\n    expect(result.current.data).toHaveLength(1)\n    expect(result.current.data.find(item => item.id === '1')).toBeUndefined()\n    expect(mockMutation).toHaveBeenCalledWith('1')\n  })\n\n  it('should revert optimistic changes on error', async () => {\n    const initialData = [\n      { id: '1', name: 'Item 1' },\n      { id: '2', name: 'Item 2' }\n    ]\n\n    const { result } = renderHook(() =>\n      useOptimisticList(initialData)\n    )\n\n    const newItem = { id: '3', name: 'Item 3' }\n    const mockMutation = vi.fn().mockRejectedValue(new Error('Failed'))\n\n    await act(async () => {\n      try {\n        const addPromise = result.current.addItem(newItem, mockMutation)\n        await addPromise\n      } catch (error) {\n        // Expected to fail\n      }\n    })\n\n    expect(mockMutation).toHaveBeenCalled()\n\n    // Should be marked as failed but still visible with error state\n    expect(result.current.hasOptimisticUpdates).toBe(true)\n    expect(result.current.optimisticUpdates.some(u => u.status === 'failed')).toBe(true)\n  })\n\n  it('should update base data when server data changes', () => {\n    const initialData = [{ id: '1', name: 'Item 1' }]\n\n    const { result, rerender } = renderHook(\n      ({ data }) => useOptimisticList(data),\n      { initialProps: { data: initialData } }\n    )\n\n    expect(result.current.baseData).toEqual(initialData)\n\n    const newData = [\n      { id: '1', name: 'Updated Item 1' },\n      { id: '2', name: 'Item 2' }\n    ]\n\n    act(() => {\n      result.current.setData(newData)\n    })\n\n    expect(result.current.baseData).toEqual(newData)\n    expect(result.current.data).toEqual(newData)\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useOptimisticUpdates.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'rollbackUpdate'. Either include it or remove the dependency array.","line":109,"column":5,"nodeType":"ArrayExpression","endLine":109,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [rollbackUpdate]","fix":{"range":[2861,2863],"text":"[rollbackUpdate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useRef } from 'react'\nimport { toast } from 'react-hot-toast'\n\nimport { logger } from '../utils/logger'\n\nexport interface OptimisticUpdateOptions<T> {\n  onSuccess?: (data: T) => void\n  onError?: (error: Error, rollbackData: T) => void\n  successMessage?: string\n  errorMessage?: string\n  rollbackDelay?: number\n}\n\nexport interface OptimisticUpdate<T> {\n  id: string\n  data: T\n  timestamp: number\n  status: 'pending' | 'confirmed' | 'failed' | 'rolledBack'\n}\n\nexport const useOptimisticUpdates = <T>() => {\n  const [optimisticUpdates, setOptimisticUpdates] = useState<Array<OptimisticUpdate<T>>>([])\n  const timeoutRefs = useRef<Record<string, NodeJS.Timeout>>({})\n\n  const addOptimisticUpdate = useCallback(\n    async <R>(\n      data: T,\n      mutationFn: (data: T) => Promise<R>,\n      options: OptimisticUpdateOptions<T> = {}\n    ): Promise<R | null> => {\n      const {\n        onSuccess,\n        onError,\n        successMessage,\n        errorMessage = 'Operation failed',\n        rollbackDelay = 5000\n      } = options\n\n      const updateId = `optimistic-${Date.now()}-${Math.random()}`\n      const update: OptimisticUpdate<T> = {\n        id: updateId,\n        data,\n        timestamp: Date.now(),\n        status: 'pending'\n      }\n\n      // Add optimistic update immediately\n      setOptimisticUpdates(prev => [...prev, update])\n\n      try {\n        // Execute the actual mutation\n        const result = await mutationFn(data)\n\n        // Mark as confirmed\n        setOptimisticUpdates(prev =>\n          prev.map(u =>\n            u.id === updateId\n              ? { ...u, status: 'confirmed' as const }\n              : u\n          )\n        )\n\n        // Show success message\n        if (successMessage) {\n          toast.success(successMessage)\n        }\n\n        // Call success callback\n        onSuccess?.(data)\n\n        // Clean up confirmed update after a delay\n        setTimeout(() => {\n          setOptimisticUpdates(prev =>\n            prev.filter(u => u.id !== updateId)\n          )\n        }, 3000)\n\n        return result\n      } catch (error) {\n        const err = error as Error\n        logger.error('Optimistic update failed:', err)\n\n        // Mark as failed\n        setOptimisticUpdates(prev =>\n          prev.map(u =>\n            u.id === updateId\n              ? { ...u, status: 'failed' as const }\n              : u\n          )\n        )\n\n        // Show error message with rollback option\n        toast.error(\n          `${errorMessage} Click to undo.`,\n          {\n            duration: rollbackDelay,\n            onClick: () => rollbackUpdate(updateId, data, onError)\n          }\n        )\n\n        // Auto-rollback after delay\n        timeoutRefs.current[updateId] = setTimeout(() => {\n          rollbackUpdate(updateId, data, onError)\n        }, rollbackDelay)\n\n        return null\n      }\n    },\n    []\n  )\n\n  const rollbackUpdate = useCallback(\n    (updateId: string, data: T, onError?: (error: Error, rollbackData: T) => void) => {\n      // Clear timeout if it exists\n      if (timeoutRefs.current[updateId]) {\n        clearTimeout(timeoutRefs.current[updateId])\n        delete timeoutRefs.current[updateId]\n      }\n\n      // Mark as rolled back\n      setOptimisticUpdates(prev =>\n        prev.map(u =>\n          u.id === updateId\n            ? { ...u, status: 'rolledBack' as const }\n            : u\n        )\n      )\n\n      // Call error callback for rollback logic\n      onError?.(new Error('Operation rolled back'), data)\n\n      toast.success('Changes have been reverted')\n\n      // Clean up after rollback\n      setTimeout(() => {\n        setOptimisticUpdates(prev =>\n          prev.filter(u => u.id !== updateId)\n        )\n      }, 1000)\n    },\n    []\n  )\n\n  const cancelOptimisticUpdate = useCallback((updateId: string) => {\n    if (timeoutRefs.current[updateId]) {\n      clearTimeout(timeoutRefs.current[updateId])\n      delete timeoutRefs.current[updateId]\n    }\n\n    setOptimisticUpdates(prev =>\n      prev.filter(u => u.id !== updateId)\n    )\n  }, [])\n\n  const getPendingUpdates = useCallback(() => {\n    return optimisticUpdates.filter(u => u.status === 'pending')\n  }, [optimisticUpdates])\n\n  const getFailedUpdates = useCallback(() => {\n    return optimisticUpdates.filter(u => u.status === 'failed')\n  }, [optimisticUpdates])\n\n  const hasOptimisticUpdates = optimisticUpdates.length > 0\n\n  const optimisticData = optimisticUpdates.filter(u =>\n    u.status === 'pending' || u.status === 'confirmed'\n  ).map(u => u.data)\n\n  return {\n    optimisticUpdates,\n    addOptimisticUpdate,\n    rollbackUpdate,\n    cancelOptimisticUpdate,\n    getPendingUpdates,\n    getFailedUpdates,\n    hasOptimisticUpdates,\n    optimisticData\n  }\n}\n\n// Helper hook for optimistic list operations\nexport const useOptimisticList = <T extends { id: string }>(\n  initialData: T[] = []\n) => {\n  const [baseData, setBaseData] = useState<T[]>(initialData)\n  const { addOptimisticUpdate, optimisticUpdates, hasOptimisticUpdates } = useOptimisticUpdates<{\n    type: 'add' | 'update' | 'delete'\n    item: T\n    index?: number\n  }>()\n\n  // Compute the optimistic list by applying pending updates\n  const optimisticList = baseData.slice()\n\n  optimisticUpdates\n    .filter(update => update.status === 'pending' || update.status === 'confirmed')\n    .forEach(update => {\n      const { type, item, index } = update.data\n\n      switch (type) {\n        case 'add':\n          if (index !== undefined) {\n            optimisticList.splice(index, 0, item)\n          } else {\n            optimisticList.unshift(item) // Add to beginning by default\n          }\n          break\n        case 'update':\n          const updateIndex = optimisticList.findIndex(i => i.id === item.id)\n          if (updateIndex !== -1) {\n            optimisticList[updateIndex] = item\n          }\n          break\n        case 'delete':\n          const deleteIndex = optimisticList.findIndex(i => i.id === item.id)\n          if (deleteIndex !== -1) {\n            optimisticList.splice(deleteIndex, 1)\n          }\n          break\n      }\n    })\n\n  const addItem = useCallback(\n    async (item: T, mutationFn: (item: T) => Promise<T>, index?: number) => {\n      return addOptimisticUpdate(\n        { type: 'add', item, index },\n        async () => mutationFn(item),\n        {\n          successMessage: 'Item added successfully',\n          onError: () => {\n            // Remove from optimistic list on error\n            setBaseData(prev => prev.filter(i => i.id !== item.id))\n          }\n        }\n      )\n    },\n    [addOptimisticUpdate]\n  )\n\n  const updateItem = useCallback(\n    async (item: T, mutationFn: (item: T) => Promise<T>) => {\n      const originalItem = baseData.find(i => i.id === item.id)\n\n      return addOptimisticUpdate(\n        { type: 'update', item },\n        async () => mutationFn(item),\n        {\n          successMessage: 'Item updated successfully',\n          onError: () => {\n            // Revert to original item on error\n            if (originalItem) {\n              setBaseData(prev =>\n                prev.map(i => i.id === item.id ? originalItem : i)\n              )\n            }\n          }\n        }\n      )\n    },\n    [addOptimisticUpdate, baseData]\n  )\n\n  const deleteItem = useCallback(\n    async (item: T, mutationFn: (id: string) => Promise<void>) => {\n      return addOptimisticUpdate(\n        { type: 'delete', item },\n        async () => mutationFn(item.id),\n        {\n          successMessage: 'Item deleted successfully',\n          onError: () => {\n            // Restore item on error\n            setBaseData(prev => [...prev, item])\n          }\n        }\n      )\n    },\n    [addOptimisticUpdate]\n  )\n\n  const setData = useCallback((data: T[]) => {\n    setBaseData(data)\n  }, [])\n\n  return {\n    data: optimisticList,\n    baseData,\n    setData,\n    addItem,\n    updateItem,\n    deleteItem,\n    hasOptimisticUpdates,\n    optimisticUpdates\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useRealTimeUpdates.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[495,498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[495,498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":55,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":58,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":58,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":66,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":66,"endColumn":33},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":113,"column":39,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":113,"endColumn":52}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react'\n\nexport interface RealTimeOptions {\n  enabled?: boolean\n  interval?: number\n  pauseWhenInactive?: boolean\n  pauseAfterInactivity?: number\n}\n\nexport interface RealTimeUpdatesReturn {\n  isActive: boolean\n  lastUpdate: Date | null\n  isPaused: boolean\n  updateCount: number\n  resumeUpdates: () => void\n  pauseUpdates: () => void\n  forceUpdate: () => Promise<any>\n}\n\nexport const useRealTimeUpdates = (\n  updateFunction: () => Promise<any>,\n  options: RealTimeOptions = {}\n): RealTimeUpdatesReturn => {\n  const {\n    interval = 30000,\n    enabled = true,\n    pauseWhenInactive = true,\n    pauseAfterInactivity = 300000,\n  } = options\n\n  const [isActive, setIsActive] = useState(false)\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null)\n  const [isPaused, setIsPaused] = useState(false)\n  const [updateCount, setUpdateCount] = useState(0)\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null)\n  const inactivityTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const lastActivityRef = useRef<Date>(new Date())\n\n  const clearIntervals = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current)\n      intervalRef.current = null\n    }\n    if (inactivityTimerRef.current) {\n      clearTimeout(inactivityTimerRef.current)\n      inactivityTimerRef.current = null\n    }\n  }, [])\n\n  const performUpdate = useCallback(async () => {\n    if (!enabled || isPaused) return null\n\n    try {\n      const result = await updateFunction()\n      setLastUpdate(new Date())\n      setUpdateCount(prev => prev + 1)\n      return result\n    } catch (error) {\n      console.error('Real-time update failed:', error)\n      throw error\n    }\n  }, [updateFunction, enabled, isPaused])\n\n  const forceUpdate = useCallback(async () => {\n    return await performUpdate()\n  }, [performUpdate])\n\n  const resumeUpdates = useCallback(() => {\n    setIsPaused(false)\n    lastActivityRef.current = new Date()\n  }, [])\n\n  const pauseUpdates = useCallback(() => {\n    setIsPaused(true)\n    clearIntervals()\n  }, [clearIntervals])\n\n  // Track user activity for inactivity detection\n  useEffect(() => {\n    if (!pauseWhenInactive) return\n\n    const handleActivity = () => {\n      lastActivityRef.current = new Date()\n      if (isPaused && enabled) {\n        resumeUpdates()\n      }\n    }\n\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click']\n    events.forEach(event => {\n      document.addEventListener(event, handleActivity, { passive: true })\n    })\n\n    return () => {\n      events.forEach(event => {\n        document.removeEventListener(event, handleActivity)\n      })\n    }\n  }, [pauseWhenInactive, isPaused, enabled, resumeUpdates])\n\n  // Main update interval\n  useEffect(() => {\n    if (!enabled || isPaused) {\n      clearIntervals()\n      setIsActive(false)\n      return\n    }\n\n    setIsActive(true)\n\n    // Set up the main update interval\n    intervalRef.current = setInterval(performUpdate, interval)\n\n    // Set up inactivity detection\n    if (pauseWhenInactive && pauseAfterInactivity > 0) {\n      const checkInactivity = () => {\n        const now = new Date()\n        const timeSinceLastActivity = now.getTime() - lastActivityRef.current.getTime()\n\n        if (timeSinceLastActivity > pauseAfterInactivity) {\n          setIsPaused(true)\n        } else {\n          inactivityTimerRef.current = setTimeout(checkInactivity, pauseAfterInactivity / 10)\n        }\n      }\n\n      inactivityTimerRef.current = setTimeout(checkInactivity, pauseAfterInactivity / 10)\n    }\n\n    return clearIntervals\n  }, [enabled, isPaused, interval, performUpdate, pauseWhenInactive, pauseAfterInactivity, clearIntervals])\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      clearIntervals()\n    }\n  }, [clearIntervals])\n\n  return {\n    isActive,\n    lastUpdate,\n    isPaused,\n    updateCount,\n    resumeUpdates,\n    pauseUpdates,\n    forceUpdate,\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useTenantContext.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createTenantContextSelector' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tenant' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TenantSettings' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":95,"column":36,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":95,"endColumn":63},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":128,"column":17,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":128,"endColumn":34,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[3729,3730],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":143,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":143,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":153,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":153,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4452,4454],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7140,7187],"text":"(activeTenant?.displayName ?? activeTenant?.name)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7188,7190],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":256,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":256,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7387,7389],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":339,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":339,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9854,9856],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":364,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":364,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10312,10312],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[10312,10312],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":365,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":365,"endColumn":34,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10344,10344],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[10344,10344],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":366,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":366,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10378,10378],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[10378,10378],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":378,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":383,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":380,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":382,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":380,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":380,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .some on an `error` typed value.","line":380,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":380,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":381,"column":69,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":381,"endColumn":73},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":382,"column":7,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":382,"endColumn":9,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10849,10851],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":386,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":386,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":437,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12227,12230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12227,12230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tenant Context Hook\n *\n * Provides tenant-aware context and utilities for multi-tenant applications:\n * - Current tenant detection from routing\n * - Tenant-scoped API calls and data access\n * - Domain/subdomain tenant resolution\n * - Cross-tenant operations for admin users\n * - Tenant branding and customization\n */\n\nimport { useMemo, useEffect, useState } from 'react'\nimport { useLocation, useParams } from 'react-router-dom'\n\nimport { useAppSelector } from '@/store/hooks'\nimport {\n  useGetTenantQuery,\n  useGetTenantBySlugQuery,\n  useGetTenantSettingsQuery,\n  createTenantContextSelector,\n} from '@/store/api/tenantApi'\nimport { selectCurrentUser } from '@/store/slices/authSlice'\nimport type {\n  TenantId,\n  TenantSlug,\n  TenantContext,\n  Tenant,\n  TenantSettings,\n  TenantRoute,\n} from '@/types/multitenancy'\nimport { createTenantId, createTenantSlug } from '@/types/multitenancy'\n\n/**\n * Hook for managing tenant context in multi-tenant applications\n */\nexport const useTenantContext = () => {\n  const location = useLocation()\n  const params = useParams()\n  const currentUser = useAppSelector(selectCurrentUser)\n  const [resolvedTenant, setResolvedTenant] = useState<{\n    tenantId?: TenantId\n    tenantSlug?: TenantSlug\n    source: 'domain' | 'subdomain' | 'path' | 'user' | 'none'\n  }>({ source: 'none' })\n\n  // Resolve tenant from various sources\n  useEffect(() => {\n    const resolveTenantFromContext = () => {\n      // 1. Check custom domain\n      const hostname = window.location.hostname\n      const isCustomDomain = !hostname.includes('.example.com') && hostname !== 'localhost'\n\n      if (isCustomDomain) {\n        // Custom domain - tenant identified by domain\n        setResolvedTenant({\n          source: 'domain',\n          // Domain resolution would be handled by backend\n        })\n        return\n      }\n\n      // 2. Check subdomain\n      const subdomainMatch = /^([^.]+)\\.example\\.com$/.exec(hostname)\n      if (subdomainMatch) {\n        const subdomain = subdomainMatch[1]\n        if (subdomain !== 'www' && subdomain !== 'app') {\n          setResolvedTenant({\n            tenantSlug: createTenantSlug(subdomain),\n            source: 'subdomain',\n          })\n          return\n        }\n      }\n\n      // 3. Check URL path parameters\n      if (params.tenantSlug) {\n        setResolvedTenant({\n          tenantSlug: createTenantSlug(params.tenantSlug),\n          source: 'path',\n        })\n        return\n      }\n\n      if (params.tenantId) {\n        setResolvedTenant({\n          tenantId: createTenantId(params.tenantId),\n          source: 'path',\n        })\n        return\n      }\n\n      // 4. Use current user's default tenant\n      if (currentUser?.defaultTenantId) {\n        setResolvedTenant({\n          tenantId: createTenantId(currentUser.defaultTenantId),\n          source: 'user',\n        })\n        return\n      }\n\n      // 5. No tenant context\n      setResolvedTenant({ source: 'none' })\n    }\n\n    resolveTenantFromContext()\n  }, [location, params, currentUser])\n\n  // Fetch tenant data based on resolution\n  const tenantByIdQuery = useGetTenantQuery(\n    { tenantId: resolvedTenant.tenantId! },\n    { skip: !resolvedTenant.tenantId }\n  )\n\n  const tenantBySlugQuery = useGetTenantBySlugQuery(\n    { slug: resolvedTenant.tenantSlug! },\n    { skip: !resolvedTenant.tenantSlug }\n  )\n\n  // Determine active tenant\n  const activeTenant = useMemo(() => {\n    if (tenantByIdQuery.data) return tenantByIdQuery.data\n    if (tenantBySlugQuery.data) return tenantBySlugQuery.data\n    return null\n  }, [tenantByIdQuery.data, tenantBySlugQuery.data])\n\n  // Fetch tenant settings if we have an active tenant\n  const tenantSettingsQuery = useGetTenantSettingsQuery(\n    { tenantId: activeTenant?.id! },\n    { skip: !activeTenant?.id }\n  )\n\n  // Build tenant context\n  const tenantContext = useMemo((): TenantContext | null => {\n    if (!activeTenant) return null\n\n    return {\n      tenantId: activeTenant.id,\n      tenantSlug: activeTenant.slug,\n      tier: activeTenant.tier,\n      features: activeTenant.features,\n      quotas: activeTenant.quotas,\n      userId: currentUser?.id,\n      organizationId: currentUser?.currentOrganizationId,\n    }\n  }, [activeTenant, currentUser])\n\n  // Tenant-aware routing utilities\n  const routing = useMemo(() => ({\n    /**\n     * Generate tenant-aware URL for a path\n     */\n    generateTenantUrl: (path: string, tenantSlug?: string): string => {\n      const targetSlug = tenantSlug || activeTenant?.slug\n      if (!targetSlug) return path\n\n      // Use subdomain routing if available\n      if (resolvedTenant.source === 'subdomain' || resolvedTenant.source === 'domain') {\n        return path\n      }\n\n      // Use path-based routing\n      return `/t/${targetSlug}${path}`\n    },\n\n    /**\n     * Navigate to a tenant-specific route\n     */\n    navigateToTenant: (tenantSlug: string, path = '/') => {\n      const url = routing.generateTenantUrl(path, tenantSlug)\n      window.location.href = url\n    },\n\n    /**\n     * Check if current route is tenant-scoped\n     */\n    isTenantRoute: (): boolean => {\n      return resolvedTenant.source !== 'none'\n    },\n\n    /**\n     * Get current tenant route information\n     */\n    getCurrentTenantRoute: (): TenantRoute | null => {\n      if (!activeTenant) return null\n\n      return {\n        path: location.pathname,\n        tenantId: activeTenant.id,\n        isCustomDomain: resolvedTenant.source === 'domain',\n        subdomain: resolvedTenant.source === 'subdomain' ?\n          window.location.hostname.split('.')[0] : undefined,\n      }\n    },\n  }), [activeTenant, location, resolvedTenant])\n\n  // Tenant branding utilities\n  const branding = useMemo(() => ({\n    /**\n     * Apply tenant branding to the application\n     */\n    applyBranding: () => {\n      if (!activeTenant?.branding) return\n\n      const root = document.documentElement\n      const { branding } = activeTenant\n\n      // Apply CSS custom properties\n      root.style.setProperty('--tenant-primary', branding.primaryColor)\n      root.style.setProperty('--tenant-secondary', branding.secondaryColor)\n\n      if (branding.fontFamily) {\n        root.style.setProperty('--tenant-font', branding.fontFamily)\n      }\n\n      // Apply theme\n      root.setAttribute('data-theme', branding.theme)\n\n      // Update favicon\n      if (branding.faviconUrl) {\n        const favicon = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"]')\n        if (favicon) {\n          favicon.href = branding.faviconUrl\n        }\n      }\n\n      // Inject custom CSS\n      if (branding.customCss) {\n        let styleElement = document.querySelector('#tenant-custom-styles')\n        if (!styleElement) {\n          styleElement = document.createElement('style')\n          styleElement.id = 'tenant-custom-styles'\n          document.head.appendChild(styleElement)\n        }\n        styleElement.textContent = branding.customCss\n      }\n    },\n\n    /**\n     * Get tenant-specific logo URL\n     */\n    getLogoUrl: (): string | undefined => {\n      return activeTenant?.branding?.logoUrl\n    },\n\n    /**\n     * Get tenant display name\n     */\n    getDisplayName: (): string => {\n      return activeTenant?.displayName || activeTenant?.name || 'Application'\n    },\n\n    /**\n     * Check if provider branding should be hidden\n     */\n    shouldHideProviderBranding: (): boolean => {\n      return activeTenant?.branding?.hideProviderBranding || false\n    },\n  }), [activeTenant])\n\n  // Quota checking utilities\n  const quotas = useMemo(() => ({\n    /**\n     * Check if tenant has reached a specific quota limit\n     */\n    isQuotaExceeded: (quotaType: keyof TenantContext['quotas']): boolean => {\n      if (!tenantContext?.quotas) return false\n\n      const quota = tenantContext.quotas[quotaType]\n      if (quota.limit === -1) return false // Unlimited\n\n      return quota.current >= quota.limit\n    },\n\n    /**\n     * Get quota usage percentage\n     */\n    getQuotaUsage: (quotaType: keyof TenantContext['quotas']): number => {\n      if (!tenantContext?.quotas) return 0\n\n      const quota = tenantContext.quotas[quotaType]\n      if (quota.limit === -1) return 0 // Unlimited\n\n      return Math.min((quota.current / quota.limit) * 100, 100)\n    },\n\n    /**\n     * Check if quota is approaching limit (80% threshold)\n     */\n    isQuotaNearLimit: (quotaType: keyof TenantContext['quotas']): boolean => {\n      return quotas.getQuotaUsage(quotaType) >= 80\n    },\n\n    /**\n     * Get remaining quota amount\n     */\n    getRemainingQuota: (quotaType: keyof TenantContext['quotas']): number => {\n      if (!tenantContext?.quotas) return 0\n\n      const quota = tenantContext.quotas[quotaType]\n      if (quota.limit === -1) return Infinity // Unlimited\n\n      return Math.max(quota.limit - quota.current, 0)\n    },\n  }), [tenantContext])\n\n  // Feature flag utilities\n  const features = useMemo(() => ({\n    /**\n     * Check if a feature is enabled for the current tenant\n     */\n    isFeatureEnabled: (feature: keyof TenantContext['features']): boolean => {\n      if (!tenantContext?.features) return false\n      return tenantContext.features[feature]\n    },\n\n    /**\n     * Get list of enabled features\n     */\n    getEnabledFeatures: (): string[] => {\n      if (!tenantContext?.features) return []\n\n      return Object.entries(tenantContext.features)\n        .filter(([, enabled]) => enabled)\n        .map(([feature]) => feature)\n    },\n\n    /**\n     * Check if tenant has access to premium features\n     */\n    hasPremiumFeatures: (): boolean => {\n      if (!tenantContext) return false\n      return ['professional', 'enterprise', 'white_label'].includes(tenantContext.tier)\n    },\n  }), [tenantContext])\n\n  // Loading states\n  const isLoading = tenantByIdQuery.isLoading || tenantBySlugQuery.isLoading\n  const isError = tenantByIdQuery.isError || tenantBySlugQuery.isError\n  const error = tenantByIdQuery.error || tenantBySlugQuery.error\n\n  return {\n    // Core tenant data\n    tenant: activeTenant,\n    tenantSettings: tenantSettingsQuery.data,\n    tenantContext,\n\n    // Resolution info\n    resolutionSource: resolvedTenant.source,\n    isResolved: resolvedTenant.source !== 'none',\n\n    // Utilities\n    routing,\n    branding,\n    quotas,\n    features,\n\n    // Loading states\n    isLoading,\n    isError,\n    error,\n\n    // Refresh function\n    refetch: () => {\n      tenantByIdQuery.refetch()\n      tenantBySlugQuery.refetch()\n      tenantSettingsQuery.refetch()\n    },\n  }\n}\n\n/**\n * Hook for multi-tenant admin operations\n * Only available to users with cross-tenant access\n */\nexport const useMultiTenantAdmin = () => {\n  const currentUser = useAppSelector(selectCurrentUser)\n\n  const isMultiTenantAdmin = useMemo(() => {\n    // Check if user has cross-tenant admin permissions\n    return currentUser?.roles?.some(role =>\n      ['system_admin', 'platform_admin', 'tenant_manager'].includes(role)\n    ) || false\n  }, [currentUser])\n\n  return {\n    isMultiTenantAdmin,\n\n    /**\n     * Switch to a different tenant context (admin only)\n     */\n    switchTenantContext: (tenantSlug: string) => {\n      if (!isMultiTenantAdmin) {\n        throw new Error('Insufficient permissions for tenant switching')\n      }\n\n      // Navigate to tenant context\n      window.location.href = `/admin/tenants/${tenantSlug}`\n    },\n\n    /**\n     * Generate impersonation token for tenant access\n     */\n    generateImpersonationUrl: (tenantSlug: string, userId?: string) => {\n      if (!isMultiTenantAdmin) {\n        throw new Error('Insufficient permissions for tenant impersonation')\n      }\n\n      const baseUrl = `/admin/impersonate/${tenantSlug}`\n      return userId ? `${baseUrl}?userId=${userId}` : baseUrl\n    },\n  }\n}\n\n/**\n * Utility hook for tenant-aware API calls\n */\nexport const useTenantAwareApi = () => {\n  const { tenantContext } = useTenantContext()\n\n  return {\n    /**\n     * Add tenant context to API headers\n     */\n    withTenantHeaders: (headers: Record<string, string> = {}) => {\n      if (!tenantContext) return headers\n\n      return {\n        ...headers,\n        'X-Tenant-ID': tenantContext.tenantId,\n        'X-Tenant-Slug': tenantContext.tenantSlug,\n      }\n    },\n\n    /**\n     * Add tenant context to query parameters\n     */\n    withTenantParams: (params: Record<string, any> = {}) => {\n      if (!tenantContext) return params\n\n      return {\n        ...params,\n        tenantId: tenantContext.tenantId,\n      }\n    },\n\n    tenantContext,\n  }\n}\n\nexport default useTenantContext","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/hooks/useValidatedApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[644,647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[644,647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[834,837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[834,837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'lastFetch' is assigned a value but never used.","line":63,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":92,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":92,"endColumn":46},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":130,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":130,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3334,3334],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3334,3334],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":207,"endColumn":49},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":342,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":342,"endColumn":34,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[9095,9095],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[9095,9095],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":351,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":351,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[9420,9420],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[9420,9420],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":359,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":359,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[9663,9663],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[9663,9663],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useRef } from 'react';\nimport { z } from 'zod';\n\nimport { useApiErrorHandler } from '@/lib/api/errorHandling';\nimport { validateApiResponse, ApiValidationError } from '@/lib/api/validation';\n\n/**\n * React hooks for validated API calls with error handling and retry logic\n */\n\nexport interface ValidatedQueryState<T> {\n  data: T | null;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n  isValidating: boolean;\n  refetch: () => Promise<void>;\n}\n\nexport interface ValidatedMutationState<T> {\n  data: T | null;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n  mutate: (variables?: any) => Promise<T>;\n  reset: () => void;\n}\n\nexport interface ValidatedApiOptions {\n  enabled?: boolean;\n  retry?: boolean;\n  maxRetries?: number;\n  retryDelay?: number;\n  onSuccess?: (data: any) => void;\n  onError?: (error: Error) => void;\n  staleTime?: number;\n}\n\n/**\n * Hook for validated queries with automatic caching and error handling\n */\nexport function useValidatedQuery<T>(\n  queryKey: string,\n  queryFn: () => Promise<unknown>,\n  responseSchema: z.ZodSchema<T>,\n  options: ValidatedApiOptions = {}\n): ValidatedQueryState<T> {\n  const {\n    enabled = true,\n    retry = true,\n    maxRetries = 3,\n    retryDelay = 1000,\n    onSuccess,\n    onError,\n    staleTime = 300000, // 5 minutes default\n  } = options;\n\n  const [data, setData] = useState<T | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [isValidating, setIsValidating] = useState(false);\n  const [lastFetch, setLastFetch] = useState<number>(0);\n\n  const cacheRef = useRef<Map<string, { data: T; timestamp: number }>>(new Map());\n  const { handleError, createRetryHandler } = useApiErrorHandler();\n\n  const executeQuery = useCallback(async (force = false) => {\n    if (!enabled) return;\n\n    const now = Date.now();\n    const cached = cacheRef.current.get(queryKey);\n\n    // Return cached data if still fresh and not forcing refresh\n    if (!force && cached && (now - cached.timestamp) < staleTime) {\n      setData(cached.data);\n      setIsError(false);\n      setError(null);\n      return;\n    }\n\n    setIsLoading(true);\n    setIsValidating(true);\n    setIsError(false);\n    setError(null);\n\n    try {\n      const retryableQuery = retry\n        ? createRetryHandler(queryFn, maxRetries, retryDelay)\n        : queryFn;\n\n      const response = await retryableQuery();\n      const validatedData = validateApiResponse(responseSchema, response, queryKey);\n\n      // Cache the validated data\n      cacheRef.current.set(queryKey, {\n        data: validatedData,\n        timestamp: now,\n      });\n\n      setData(validatedData);\n      setLastFetch(now);\n      onSuccess?.(validatedData);\n    } catch (err) {\n      const apiError = handleError(err, queryKey);\n      setError(apiError);\n      setIsError(true);\n      onError?.(apiError);\n    } finally {\n      setIsLoading(false);\n      setIsValidating(false);\n    }\n  }, [\n    enabled,\n    queryKey,\n    queryFn,\n    responseSchema,\n    retry,\n    maxRetries,\n    retryDelay,\n    staleTime,\n    onSuccess,\n    onError,\n    handleError,\n    createRetryHandler,\n  ]);\n\n  // Auto-execute on mount and when dependencies change\n  React.useEffect(() => {\n    executeQuery();\n  }, [executeQuery]);\n\n  const refetch = useCallback(() => executeQuery(true), [executeQuery]);\n\n  return {\n    data,\n    isLoading,\n    isError,\n    error,\n    isValidating,\n    refetch,\n  };\n}\n\n/**\n * Hook for validated mutations with optimistic updates\n */\nexport function useValidatedMutation<TRequest, TResponse>(\n  mutationFn: (variables: TRequest) => Promise<unknown>,\n  requestSchema: z.ZodSchema<TRequest>,\n  responseSchema: z.ZodSchema<TResponse>,\n  options: ValidatedApiOptions & {\n    optimisticUpdate?: (variables: TRequest) => TResponse;\n    rollbackUpdate?: () => void;\n  } = {}\n): ValidatedMutationState<TResponse> {\n  const {\n    retry = false,\n    maxRetries = 1,\n    retryDelay = 1000,\n    onSuccess,\n    onError,\n    optimisticUpdate,\n    rollbackUpdate,\n  } = options;\n\n  const [data, setData] = useState<TResponse | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const { handleError, createRetryHandler } = useApiErrorHandler();\n\n  const mutate = useCallback(async (variables: TRequest): Promise<TResponse> => {\n    setIsLoading(true);\n    setIsError(false);\n    setError(null);\n\n    // Validate request data\n    try {\n      requestSchema.parse(variables);\n    } catch (err) {\n      const validationError = new ApiValidationError(\n        'Request validation failed',\n        err as z.ZodError,\n        variables\n      );\n      const apiError = handleError(validationError, 'mutation request');\n      setError(apiError);\n      setIsError(true);\n      setIsLoading(false);\n      throw apiError;\n    }\n\n    // Optimistic update\n    let optimisticData: TResponse | null = null;\n    if (optimisticUpdate) {\n      optimisticData = optimisticUpdate(variables);\n      setData(optimisticData);\n    }\n\n    try {\n      const retryableMutation = retry\n        ? createRetryHandler(() => mutationFn(variables), maxRetries, retryDelay)\n        : () => mutationFn(variables);\n\n      const response = await retryableMutation();\n      const validatedData = validateApiResponse(responseSchema, response, 'mutation');\n\n      setData(validatedData);\n      onSuccess?.(validatedData);\n      return validatedData;\n    } catch (err) {\n      // Rollback optimistic update on error\n      if (optimisticData && rollbackUpdate) {\n        rollbackUpdate();\n        setData(null);\n      }\n\n      const apiError = handleError(err, 'mutation');\n      setError(apiError);\n      setIsError(true);\n      onError?.(apiError);\n      throw apiError;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [\n    mutationFn,\n    requestSchema,\n    responseSchema,\n    retry,\n    maxRetries,\n    retryDelay,\n    onSuccess,\n    onError,\n    optimisticUpdate,\n    rollbackUpdate,\n    handleError,\n    createRetryHandler,\n  ]);\n\n  const reset = useCallback(() => {\n    setData(null);\n    setIsLoading(false);\n    setIsError(false);\n    setError(null);\n  }, []);\n\n  return {\n    data,\n    isLoading,\n    isError,\n    error,\n    mutate,\n    reset,\n  };\n}\n\n/**\n * Hook for infinite queries with validation\n */\nexport function useValidatedInfiniteQuery<T>(\n  queryKey: string,\n  queryFn: (pageParam: number) => Promise<unknown>,\n  responseSchema: z.ZodSchema<T>,\n  options: ValidatedApiOptions & {\n    getNextPageParam?: (lastPage: T, allPages: T[]) => number | undefined;\n    getPreviousPageParam?: (firstPage: T, allPages: T[]) => number | undefined;\n  } = {}\n) {\n  const {\n    enabled = true,\n    getNextPageParam,\n    getPreviousPageParam,\n    onSuccess,\n    onError,\n  } = options;\n\n  const [pages, setPages] = useState<T[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [isFetchingNextPage, setIsFetchingNextPage] = useState(false);\n  const [isFetchingPreviousPage, setIsFetchingPreviousPage] = useState(false);\n  const [hasNextPage, setHasNextPage] = useState(true);\n  const [hasPreviousPage, setHasPreviousPage] = useState(false);\n\n  const { handleError } = useApiErrorHandler();\n\n  const fetchPage = useCallback(async (pageParam: number, isNext = true) => {\n    if (isNext) {\n      setIsFetchingNextPage(true);\n    } else {\n      setIsFetchingPreviousPage(true);\n    }\n\n    try {\n      const response = await queryFn(pageParam);\n      const validatedData = validateApiResponse(responseSchema, response, `${queryKey}-page-${pageParam}`);\n\n      setPages(currentPages => {\n        const newPages = isNext\n          ? [...currentPages, validatedData]\n          : [validatedData, ...currentPages];\n\n        // Update pagination state\n        if (getNextPageParam) {\n          const nextParam = getNextPageParam(validatedData, newPages);\n          setHasNextPage(nextParam !== undefined);\n        }\n\n        if (getPreviousPageParam) {\n          const prevParam = getPreviousPageParam(validatedData, newPages);\n          setHasPreviousPage(prevParam !== undefined);\n        }\n\n        return newPages;\n      });\n\n      onSuccess?.(validatedData);\n    } catch (err) {\n      const apiError = handleError(err, `${queryKey}-infinite`);\n      setError(apiError);\n      setIsError(true);\n      onError?.(apiError);\n    } finally {\n      if (isNext) {\n        setIsFetchingNextPage(false);\n      } else {\n        setIsFetchingPreviousPage(false);\n      }\n      setIsLoading(false);\n    }\n  }, [queryKey, queryFn, responseSchema, getNextPageParam, getPreviousPageParam, onSuccess, onError, handleError]);\n\n  const fetchNextPage = useCallback(() => {\n    if (!hasNextPage || isFetchingNextPage) return;\n\n    const nextParam = getNextPageParam?.(pages[pages.length - 1], pages);\n    if (nextParam !== undefined) {\n      fetchPage(nextParam, true);\n    }\n  }, [pages, hasNextPage, isFetchingNextPage, getNextPageParam, fetchPage]);\n\n  const fetchPreviousPage = useCallback(() => {\n    if (!hasPreviousPage || isFetchingPreviousPage) return;\n\n    const prevParam = getPreviousPageParam?.(pages[0], pages);\n    if (prevParam !== undefined) {\n      fetchPage(prevParam, false);\n    }\n  }, [pages, hasPreviousPage, isFetchingPreviousPage, getPreviousPageParam, fetchPage]);\n\n  // Initial fetch\n  React.useEffect(() => {\n    if (enabled && pages.length === 0) {\n      setIsLoading(true);\n      fetchPage(0);\n    }\n  }, [enabled, pages.length, fetchPage]);\n\n  return {\n    data: pages,\n    isLoading,\n    isError,\n    error,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n  };\n}\n\n/**\n * Hook for real-time data with validation\n */\nexport function useValidatedSubscription<T>(\n  subscriptionKey: string,\n  subscribe: (callback: (data: unknown) => void) => () => void,\n  responseSchema: z.ZodSchema<T>,\n  options: ValidatedApiOptions = {}\n) {\n  const { enabled = true, onSuccess, onError } = options;\n  const [data, setData] = useState<T | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const { handleError } = useApiErrorHandler();\n\n  React.useEffect(() => {\n    if (!enabled) return;\n\n    setIsConnected(true);\n\n    const unsubscribe = subscribe((rawData: unknown) => {\n      try {\n        const validatedData = validateApiResponse(responseSchema, rawData, subscriptionKey);\n        setData(validatedData);\n        setError(null);\n        onSuccess?.(validatedData);\n      } catch (err) {\n        const apiError = handleError(err, subscriptionKey);\n        setError(apiError);\n        onError?.(apiError);\n      }\n    });\n\n    return () => {\n      setIsConnected(false);\n      unsubscribe();\n    };\n  }, [enabled, subscribe, responseSchema, subscriptionKey, onSuccess, onError, handleError]);\n\n  return {\n    data,\n    isConnected,\n    error,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/lib/api/errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'z' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":11},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":260,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":260,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7042,7044],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":262,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":262,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7171,7173],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":268,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":268,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7325,7328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7325,7328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7341,7344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7341,7344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":268,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":268,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":269,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":269,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":269,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":270,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":270,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":270,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":270,"endColumn":56},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":276,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":276,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7655,7689],"text":"(message ?? mappedError.userMessage)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":276,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":276,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7690,7692],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":277,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":277,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7726,7760],"text":"(mappedError.userMessage ?? message)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":277,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":277,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7761,7763],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":279,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":279,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7891,7893],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":288,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":288,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8040,8042],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8074,8076],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":291,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":291,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8164,8166],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":293,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":293,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8296,8298],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":383,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10797,10800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10797,10800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":387,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10898,10901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10898,10901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\nimport { ApiValidationError, ApiResponseError } from './validation';\n\nimport { ApiErrorResponseSchema } from '@/types/api';\n\n/**\n * Comprehensive error handling for API responses with user-friendly messages\n */\n\nexport interface ErrorInfo {\n  code: string;\n  message: string;\n  userMessage: string;\n  isRetryable: boolean;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport class ApiError extends Error {\n  constructor(\n    message: string,\n    public readonly info: ErrorInfo,\n    public readonly originalError?: Error\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\n/**\n * Maps API error codes to user-friendly messages\n */\nconst ERROR_MESSAGE_MAP: Record<string, Partial<ErrorInfo>> = {\n  // Authentication errors\n  'AUTH_001': {\n    userMessage: 'Invalid email or password. Please try again.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n  'AUTH_002': {\n    userMessage: 'Your account has been locked due to too many failed login attempts. Please try again later.',\n    isRetryable: false,\n    severity: 'high',\n  },\n  'AUTH_003': {\n    userMessage: 'Your session has expired. Please log in again.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n  'AUTH_004': {\n    userMessage: 'You do not have permission to access this resource.',\n    isRetryable: false,\n    severity: 'high',\n  },\n  'AUTH_005': {\n    userMessage: 'Please verify your email address before continuing.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n\n  // Payment errors\n  'PAY_001': {\n    userMessage: 'Your payment could not be processed. Please check your payment details and try again.',\n    isRetryable: true,\n    severity: 'high',\n  },\n  'PAY_002': {\n    userMessage: 'Your card was declined. Please try a different payment method.',\n    isRetryable: true,\n    severity: 'high',\n  },\n  'PAY_003': {\n    userMessage: 'Insufficient funds. Please check your account balance.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n  'PAY_004': {\n    userMessage: 'Your payment method has expired. Please update your payment information.',\n    isRetryable: false,\n    severity: 'high',\n  },\n  'PAY_005': {\n    userMessage: 'This payment requires additional authentication. Please complete the verification process.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n\n  // Subscription errors\n  'SUB_001': {\n    userMessage: 'Your subscription could not be created. Please try again.',\n    isRetryable: true,\n    severity: 'high',\n  },\n  'SUB_002': {\n    userMessage: 'Your subscription has reached its user limit. Please upgrade your plan.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n  'SUB_003': {\n    userMessage: 'Your subscription is past due. Please update your payment information.',\n    isRetryable: false,\n    severity: 'high',\n  },\n\n  // Organization errors\n  'ORG_001': {\n    userMessage: 'Organization not found or you do not have access.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n  'ORG_002': {\n    userMessage: 'You have reached the maximum number of organizations allowed.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n\n  // Validation errors\n  'VAL_001': {\n    userMessage: 'Please check your input and try again.',\n    isRetryable: true,\n    severity: 'low',\n  },\n  'VAL_002': {\n    userMessage: 'Password does not meet security requirements.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n  'VAL_003': {\n    userMessage: 'This email address is already in use.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n\n  // System errors\n  'SYS_001': {\n    userMessage: 'A temporary system error occurred. Please try again in a few minutes.',\n    isRetryable: true,\n    severity: 'high',\n  },\n  'SYS_002': {\n    userMessage: 'The service is temporarily unavailable. Please try again later.',\n    isRetryable: true,\n    severity: 'critical',\n  },\n  'SYS_003': {\n    userMessage: 'Your request could not be processed due to a server error.',\n    isRetryable: true,\n    severity: 'high',\n  },\n\n  // Rate limiting\n  'RATE_001': {\n    userMessage: 'Too many requests. Please wait a moment and try again.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n};\n\n/**\n * Maps HTTP status codes to error information\n */\nconst HTTP_STATUS_MAP: Record<number, Partial<ErrorInfo>> = {\n  400: {\n    code: 'BAD_REQUEST',\n    userMessage: 'Invalid request. Please check your input and try again.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n  401: {\n    code: 'UNAUTHORIZED',\n    userMessage: 'Please log in to access this feature.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n  403: {\n    code: 'FORBIDDEN',\n    userMessage: 'You do not have permission to perform this action.',\n    isRetryable: false,\n    severity: 'high',\n  },\n  404: {\n    code: 'NOT_FOUND',\n    userMessage: 'The requested resource was not found.',\n    isRetryable: false,\n    severity: 'medium',\n  },\n  409: {\n    code: 'CONFLICT',\n    userMessage: 'This action conflicts with existing data. Please refresh and try again.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n  422: {\n    code: 'VALIDATION_ERROR',\n    userMessage: 'Please check your input and try again.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n  429: {\n    code: 'RATE_LIMIT',\n    userMessage: 'Too many requests. Please wait a moment and try again.',\n    isRetryable: true,\n    severity: 'medium',\n  },\n  500: {\n    code: 'INTERNAL_ERROR',\n    userMessage: 'A server error occurred. Our team has been notified.',\n    isRetryable: true,\n    severity: 'high',\n  },\n  502: {\n    code: 'BAD_GATEWAY',\n    userMessage: 'Service temporarily unavailable. Please try again in a few minutes.',\n    isRetryable: true,\n    severity: 'high',\n  },\n  503: {\n    code: 'SERVICE_UNAVAILABLE',\n    userMessage: 'Service is temporarily down for maintenance. Please try again later.',\n    isRetryable: true,\n    severity: 'critical',\n  },\n  504: {\n    code: 'TIMEOUT',\n    userMessage: 'Request timed out. Please try again.',\n    isRetryable: true,\n    severity: 'high',\n  },\n};\n\n/**\n * Processes any error and returns structured error information\n */\nexport function processApiError(error: unknown): ErrorInfo {\n  // Handle API validation errors\n  if (error instanceof ApiValidationError) {\n    return {\n      code: 'VALIDATION_ERROR',\n      message: error.message,\n      userMessage: 'The server response was invalid. Please try again or contact support.',\n      isRetryable: true,\n      severity: 'high',\n    };\n  }\n\n  // Handle API response errors\n  if (error instanceof ApiResponseError) {\n    const statusInfo = HTTP_STATUS_MAP[error.status];\n\n    // Try to parse error response for specific error code\n    let specificError: ErrorInfo | null = null;\n    try {\n      const errorResponse = ApiErrorResponseSchema.parse(error.data);\n      const mappedError = ERROR_MESSAGE_MAP[errorResponse.error.code];\n\n      if (mappedError) {\n        specificError = {\n          code: errorResponse.error.code,\n          message: errorResponse.error.message,\n          userMessage: mappedError.userMessage || errorResponse.error.message,\n          isRetryable: mappedError.isRetryable ?? true,\n          severity: mappedError.severity || 'medium',\n        };\n      }\n    } catch {\n      // Could not parse error response strictly. Try a lenient shape check\n      try {\n        const data: any = (error as any).data;\n        const code: string | undefined = data?.error?.code;\n        const message: string | undefined = data?.error?.message;\n        if (code) {\n          const mappedError = ERROR_MESSAGE_MAP[code];\n          if (mappedError) {\n            specificError = {\n              code,\n              message: message || mappedError.userMessage || code,\n              userMessage: mappedError.userMessage || message || 'An error occurred.',\n              isRetryable: mappedError.isRetryable ?? true,\n              severity: mappedError.severity || 'medium',\n            };\n          }\n        }\n      } catch {\n        // Fallback to HTTP status mapping\n      }\n    }\n\n    return specificError || {\n      code: statusInfo?.code || 'HTTP_ERROR',\n      message: error.message,\n      userMessage: statusInfo?.userMessage || 'An error occurred. Please try again.',\n      isRetryable: statusInfo?.isRetryable ?? true,\n      severity: statusInfo?.severity || 'medium',\n    };\n  }\n\n  // Handle network errors\n  if (error instanceof TypeError && error.message.includes('fetch')) {\n    return {\n      code: 'NETWORK_ERROR',\n      message: error.message,\n      userMessage: 'Unable to connect to the server. Please check your internet connection.',\n      isRetryable: true,\n      severity: 'high',\n    };\n  }\n\n  // Handle generic errors\n  const message = error instanceof Error ? error.message : 'Unknown error occurred';\n  return {\n    code: 'UNKNOWN_ERROR',\n    message,\n    userMessage: 'An unexpected error occurred. Please try again.',\n    isRetryable: true,\n    severity: 'medium',\n  };\n}\n\n/**\n * Creates a user-facing ApiError from any error\n */\nexport function createApiError(error: unknown): ApiError {\n  const info = processApiError(error);\n  const originalError = error instanceof Error ? error : undefined;\n\n  return new ApiError(info.message, info, originalError);\n}\n\n/**\n * Determines if an error should trigger a retry\n */\nexport function shouldRetry(error: ErrorInfo, attemptCount: number, maxRetries = 3): boolean {\n  if (attemptCount >= maxRetries) {\n    return false;\n  }\n\n  if (!error.isRetryable) {\n    return false;\n  }\n\n  // Don't retry certain error types on first attempt\n  const noImmediateRetry = ['AUTH_001', 'VAL_001', 'VAL_002'];\n  if (attemptCount === 0 && noImmediateRetry.includes(error.code)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Calculates retry delay with exponential backoff\n */\nexport function getRetryDelay(attemptCount: number, baseDelay = 1000): number {\n  return baseDelay * Math.pow(2, attemptCount) + Math.random() * 1000;\n}\n\n/**\n * React hook for error handling with retry logic\n */\nexport function useApiErrorHandler() {\n  const handleError = (error: unknown, context?: string) => {\n    const apiError = createApiError(error);\n\n    // Log error for debugging\n    console.error(`API Error${context ? ` in ${context}` : ''}:`, {\n      code: apiError.info.code,\n      message: apiError.info.message,\n      userMessage: apiError.info.userMessage,\n      severity: apiError.info.severity,\n      originalError: apiError.originalError,\n    });\n\n    // Send to error reporting service in production\n    if (process.env.NODE_ENV === 'production' && apiError.info.severity === 'critical') {\n      // TODO: Integrate with error reporting service (e.g., Sentry)\n      console.error('Critical error reported:', apiError);\n    }\n\n    return apiError;\n  };\n\n  const createRetryHandler = (\n    operation: () => Promise<any>,\n    maxRetries = 3,\n    baseDelay = 1000\n  ) => {\n    return async (attemptCount = 0): Promise<any> => {\n      try {\n        return await operation();\n      } catch (error) {\n        const apiError = handleError(error);\n\n        if (shouldRetry(apiError.info, attemptCount, maxRetries)) {\n          const delay = getRetryDelay(attemptCount, baseDelay);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return createRetryHandler(operation, maxRetries, baseDelay)(attemptCount + 1);\n        }\n\n        throw apiError;\n      }\n    };\n  };\n\n  return {\n    handleError,\n    createRetryHandler,\n    shouldRetry,\n    getRetryDelay,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/lib/api/testing.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateMockData' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":49,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":49,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1090,1092],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1507,1510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1507,1510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":134,"column":9,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":134,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3797,3800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3797,3800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":143,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":143,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":143,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":183,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":183,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6404,6407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6404,6407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":246,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6431,6434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6431,6434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":292,"column":66,"nodeType":"Identifier","messageId":"invalidType","endLine":292,"endColumn":71},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":296,"column":41,"nodeType":"Identifier","messageId":"invalidType","endLine":296,"endColumn":46},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":301,"column":78,"nodeType":"Identifier","messageId":"invalidType","endLine":301,"endColumn":83},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":318,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8505,8508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8505,8508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":322,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8652,8655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8652,8655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":333,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":333,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9029,9031],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":334,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":334,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9087,9089],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":346,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":346,"endColumn":50},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'benchmarkValidation' has no 'await' expression.","line":364,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":364,"endColumn":45,"suggestions":[{"messageId":"removeAsync","fix":{"range":[9727,9948],"text":"function benchmarkValidation<T>(\n  schema: z.ZodSchema<T>,\n  data: unknown,\n  iterations = 1000\n): {\n  averageTime: number;\n  minTime: number;\n  maxTime: number;\n  totalTime: number;\n  iterations: number;\n}"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validatedResponse' is assigned a value but never used.","line":422,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":422,"endColumn":30},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":431,"column":63,"nodeType":"Identifier","messageId":"invalidType","endLine":431,"endColumn":68},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":433,"column":67,"nodeType":"Identifier","messageId":"invalidType","endLine":433,"endColumn":72}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\nimport { generateMockData, validateApiResponse, ApiValidationError } from './validation';\nimport { processApiError } from './errorHandling';\n\nimport type { ApiSuccessResponse, ApiErrorResponse } from '@/types/api';\n\n/**\n * Testing utilities for API validation and error handling\n */\n\nexport interface MockApiOptions {\n  includeOptionalFields?: boolean;\n  useInvalidData?: boolean;\n  responseDelay?: number;\n  errorRate?: number; // 0-1, probability of returning an error\n}\n\nexport interface TestScenario<T> {\n  name: string;\n  input: unknown;\n  expectedValid: boolean;\n  expectedData?: T;\n  expectedError?: string;\n}\n\n/**\n * Creates a mock API response wrapper\n */\nexport function createMockApiResponse<T>(\n  data: T,\n  success = true,\n  message?: string\n): ApiSuccessResponse<T> | ApiErrorResponse {\n  const timestamp = new Date().toISOString();\n\n  if (success) {\n    return {\n      success: true,\n      data,\n      message,\n      timestamp,\n    };\n  } else {\n    return {\n      success: false,\n      error: {\n        code: 'MOCK_ERROR',\n        message: message || 'Mock error for testing',\n        details: { mockData: true },\n      },\n      correlationId: crypto.randomUUID(),\n      timestamp,\n    };\n  }\n}\n\n/**\n * Generates mock data for a given schema with realistic values\n */\nexport function generateRealisticMockData<T>(schema: z.ZodSchema<T>): T {\n  // Enhanced mock generator with more realistic data\n  function generateValue(schema: z.ZodTypeAny, path: string[] = []): any {\n    const fieldName = path[path.length - 1]?.toLowerCase() || '';\n\n    const genUuid = () =>\n      'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n      });\n\n    if (schema instanceof z.ZodString) {\n      // Generate realistic string values based on field name\n      if (fieldName.includes('email')) {\n        return 'user@example.com';\n      }\n      if (fieldName.includes('name') || fieldName.includes('title')) {\n        return 'Test Name';\n      }\n      if (fieldName.includes('id')) {\n        return genUuid();\n      }\n      if (fieldName.includes('url')) {\n        return 'https://example.com';\n      }\n      if (fieldName.includes('phone')) {\n        return '+1-555-123-4567';\n      }\n      if (fieldName.includes('currency')) {\n        return 'USD';\n      }\n      const isTimestampField =\n        fieldName.endsWith('at') ||\n        fieldName.includes('timestamp') ||\n        fieldName.includes('date') ||\n        fieldName.includes('time') ||\n        fieldName.includes('createdat') ||\n        fieldName.includes('updatedat') ||\n        fieldName.includes('lastloginat');\n      if (isTimestampField) {\n        return new Date().toISOString();\n      }\n      return 'mock-string-value';\n    }\n\n    if (schema instanceof z.ZodNumber) {\n      if (fieldName.includes('amount') || fieldName.includes('price')) {\n        return 1999; // $19.99 in cents\n      }\n      if (fieldName.includes('count') || fieldName.includes('total')) {\n        return Math.floor(Math.random() * 100);\n      }\n      if (fieldName.includes('year')) {\n        return 2024;\n      }\n      if (fieldName.includes('month')) {\n        return Math.floor(Math.random() * 12) + 1;\n      }\n      return 42;\n    }\n\n    if (schema instanceof z.ZodBoolean) {\n      return Math.random() > 0.5;\n    }\n\n    if (schema instanceof z.ZodDate) {\n      return new Date();\n    }\n\n    if (schema instanceof z.ZodArray) {\n      const itemCount = Math.floor(Math.random() * 3) + 1;\n      return Array.from({ length: itemCount }, () =>\n        generateValue(schema.element, path)\n      );\n    }\n\n    if (schema instanceof z.ZodObject) {\n      const shape = schema.shape;\n      const mock: any = {};\n\n      for (const [key, fieldSchema] of Object.entries(shape)) {\n        mock[key] = generateValue(fieldSchema as z.ZodTypeAny, [...path, key]);\n      }\n\n      return mock;\n    }\n\n    if (schema instanceof z.ZodOptional) {\n      // 70% chance to include optional fields\n      if (Math.random() > 0.3) {\n        return generateValue(schema.unwrap(), path);\n      }\n      return undefined;\n    }\n\n    if (schema instanceof z.ZodNullable) {\n      // 80% chance for non-null values\n      if (Math.random() > 0.2) {\n        return generateValue(schema.unwrap(), path);\n      }\n      return null;\n    }\n\n    if (schema instanceof z.ZodEnum) {\n      const options = schema.options;\n      return options[Math.floor(Math.random() * options.length)];\n    }\n\n    if (schema instanceof z.ZodLiteral) {\n      return schema.value;\n    }\n\n    if (schema instanceof z.ZodUnion) {\n      const options = schema.options;\n      const selectedOption = options[Math.floor(Math.random() * options.length)];\n      return generateValue(selectedOption, path);\n    }\n\n    return null;\n  }\n\n  return generateValue(schema);\n}\n\n/**\n * Creates a comprehensive test suite for a schema\n */\nexport function createValidationTestSuite<T>(\n  schema: z.ZodSchema<T>,\n  suiteName: string\n): Array<TestScenario<T>> {\n  const scenarios: Array<TestScenario<T>> = [];\n\n  // Valid data scenario\n  scenarios.push({\n    name: `${suiteName} - Valid data`,\n    input: generateRealisticMockData(schema),\n    expectedValid: true,\n  });\n\n  // Invalid data scenarios\n  scenarios.push(\n    {\n      name: `${suiteName} - Null input`,\n      input: null,\n      expectedValid: false,\n      expectedError: 'Invalid input: expected object, received null',\n    },\n    {\n      name: `${suiteName} - Undefined input`,\n      input: undefined,\n      expectedValid: false,\n      expectedError: 'Invalid input: expected object, received undefined',\n    },\n    {\n      name: `${suiteName} - Empty object`,\n      input: {},\n      expectedValid: false,\n    },\n    {\n      name: `${suiteName} - Invalid type`,\n      input: 'invalid-string',\n      expectedValid: false,\n      expectedError: 'Invalid input: expected object, received string',\n    },\n    {\n      name: `${suiteName} - Array instead of object`,\n      input: [],\n      expectedValid: false,\n      expectedError: 'Invalid input: expected object, received array',\n    }\n  );\n\n  return scenarios;\n}\n\n/**\n * Runs validation test scenarios\n */\nexport function runValidationTests<T>(\n  schema: z.ZodSchema<T>,\n  scenarios: Array<TestScenario<T>>,\n  verbose = false\n): { passed: number; failed: number; results: any[] } {\n  const results: any[] = [];\n  let passed = 0;\n  let failed = 0;\n\n  for (const scenario of scenarios) {\n    try {\n      const result = validateApiResponse(schema, scenario.input, scenario.name);\n\n      if (scenario.expectedValid) {\n        passed++;\n        if (verbose) {\n          console.log(`✅ ${scenario.name}: PASSED`);\n        }\n        results.push({\n          scenario: scenario.name,\n          status: 'PASSED',\n          result,\n        });\n      } else {\n        failed++;\n        console.error(`❌ ${scenario.name}: Expected validation to fail but it passed`);\n        results.push({\n          scenario: scenario.name,\n          status: 'FAILED',\n          error: 'Expected validation to fail',\n          result,\n        });\n      }\n    } catch (error) {\n      if (!scenario.expectedValid) {\n        const isValidationError = error instanceof ApiValidationError;\n        const hasExpectedError = !scenario.expectedError ||\n          (error instanceof Error && error.message.includes(scenario.expectedError));\n\n        if (isValidationError && hasExpectedError) {\n          passed++;\n          if (verbose) {\n            console.log(`✅ ${scenario.name}: PASSED (correctly failed validation)`);\n          }\n          results.push({\n            scenario: scenario.name,\n            status: 'PASSED',\n            error: error.message,\n          });\n        } else {\n          failed++;\n          console.error(`❌ ${scenario.name}: Unexpected error: ${error}`);\n          results.push({\n            scenario: scenario.name,\n            status: 'FAILED',\n            error: `Unexpected error: ${error}`,\n          });\n        }\n      } else {\n        failed++;\n        console.error(`❌ ${scenario.name}: Validation failed unexpectedly: ${error}`);\n        results.push({\n          scenario: scenario.name,\n          status: 'FAILED',\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n  }\n\n  return { passed, failed, results };\n}\n\n/**\n * Mock API client for testing\n */\nexport class MockApiClient {\n  private responses = new Map<string, any>();\n  private delays = new Map<string, number>();\n  private errorRates = new Map<string, number>();\n\n  setResponse(endpoint: string, response: any, delay?: number, errorRate?: number) {\n    this.responses.set(endpoint, response);\n    if (delay !== undefined) {\n      this.delays.set(endpoint, delay);\n    }\n    if (errorRate !== undefined) {\n      this.errorRates.set(endpoint, errorRate);\n    }\n  }\n\n  async request<T>(endpoint: string, schema: z.ZodSchema<T>): Promise<T> {\n    const delay = this.delays.get(endpoint) || 0;\n    const errorRate = this.errorRates.get(endpoint) || 0;\n\n    // Simulate network delay\n    if (delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n\n    // Simulate errors\n    if (Math.random() < errorRate) {\n      throw new Error(`Mock error for endpoint: ${endpoint}`);\n    }\n\n    const response = this.responses.get(endpoint);\n    if (!response) {\n      throw new Error(`No mock response configured for endpoint: ${endpoint}`);\n    }\n\n    return validateApiResponse(schema, response, `Mock ${endpoint}`);\n  }\n\n  reset() {\n    this.responses.clear();\n    this.delays.clear();\n    this.errorRates.clear();\n  }\n}\n\n/**\n * Performance testing utility\n */\nexport async function benchmarkValidation<T>(\n  schema: z.ZodSchema<T>,\n  data: unknown,\n  iterations = 1000\n): Promise<{\n  averageTime: number;\n  minTime: number;\n  maxTime: number;\n  totalTime: number;\n  iterations: number;\n}> {\n  const times: number[] = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const start = performance.now();\n    try {\n      schema.parse(data);\n    } catch {\n      // Ignore validation errors for benchmarking\n    }\n    const end = performance.now();\n    times.push(end - start);\n  }\n\n  const totalTime = times.reduce((sum, time) => sum + time, 0);\n  const averageTime = totalTime / iterations;\n  const minTime = Math.min(...times);\n  const maxTime = Math.max(...times);\n\n  return {\n    averageTime,\n    minTime,\n    maxTime,\n    totalTime,\n    iterations,\n  };\n}\n\n/**\n * Integration test helper for API endpoints\n */\nexport async function testApiEndpoint<TRequest, TResponse>(\n  endpoint: (request: TRequest) => Promise<TResponse>,\n  requestSchema: z.ZodSchema<TRequest>,\n  responseSchema: z.ZodSchema<TResponse>,\n  testCases: Array<{ name: string; request: TRequest; shouldSucceed: boolean }>\n): Promise<void> {\n  for (const testCase of testCases) {\n    console.log(`Testing: ${testCase.name}`);\n\n    try {\n      // Validate request\n      const validatedRequest = requestSchema.parse(testCase.request);\n\n      // Make API call\n      const response = await endpoint(validatedRequest);\n\n      // Validate response\n      const validatedResponse = responseSchema.parse(response);\n\n      if (testCase.shouldSucceed) {\n        console.log(`✅ ${testCase.name}: SUCCESS`);\n      } else {\n        console.error(`❌ ${testCase.name}: Expected failure but succeeded`);\n      }\n    } catch (error) {\n      if (!testCase.shouldSucceed) {\n        console.log(`✅ ${testCase.name}: Correctly failed - ${error}`);\n      } else {\n        console.error(`❌ ${testCase.name}: Unexpected failure - ${error}`);\n        throw error;\n      }\n    }\n  }\n}\n\n/**\n * Error handling test utility\n */\nexport function testErrorHandling(errors: unknown[]): void {\n  console.log('Testing error handling...');\n\n  for (const [index, error] of errors.entries()) {\n    try {\n      const errorInfo = processApiError(error);\n      console.log(`Error ${index + 1}:`, {\n        code: errorInfo.code,\n        severity: errorInfo.severity,\n        isRetryable: errorInfo.isRetryable,\n        userMessage: errorInfo.userMessage,\n      });\n    } catch (e) {\n      console.error(`Failed to process error ${index + 1}:`, e);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/lib/api/validation.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | FetchArgs`.","line":75,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":75,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2607,2610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2607,2610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'meta' is defined but never used.","line":108,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2718,2721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2718,2721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'arg' is defined but never used.","line":108,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":58},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":125,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":125,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3331,3333],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":130,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":130,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3635,3638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3635,3638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":130,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":256,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7042,7045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7042,7045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":259,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":259,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":259,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":262,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":262,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":265,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":265,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7299,7302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7299,7302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport type { BaseQueryFn } from '@reduxjs/toolkit/query';\nimport { fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nimport { ApiErrorResponseSchema, ApiSuccessResponseSchema } from '@/types/api';\n\n/**\n * Runtime API validation utilities using Zod\n * Provides type-safe API responses with runtime validation\n */\n\nexport class ApiValidationError extends Error {\n  constructor(\n    message: string,\n    public readonly originalError: z.ZodError,\n    public readonly response: unknown\n  ) {\n    super(message);\n    this.name = 'ApiValidationError';\n  }\n}\n\nexport class ApiResponseError extends Error {\n  constructor(\n    message: string,\n    public readonly status: number,\n    public readonly data: unknown\n  ) {\n    super(message);\n    this.name = 'ApiResponseError';\n  }\n}\n\n/**\n * Validates API response data against a Zod schema\n */\nexport function validateApiResponse<T>(\n  schema: z.ZodSchema<T>,\n  data: unknown,\n  context?: string\n): T {\n  try {\n    return schema.parse(data);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = `API validation failed${context ? ` for ${context}` : ''}: ${error.issues\n        .map(issue => `${issue.path.join('.')}: ${issue.message}`)\n        .join(', ')}`;\n\n      console.error('API Validation Error:', {\n        context,\n        issues: error.issues,\n        data,\n      });\n\n      throw new ApiValidationError(errorMessage, error, data);\n    }\n    throw error;\n  }\n}\n\n/**\n * Creates a validated RTK Query base query with automatic response validation\n */\nexport function createValidatedBaseQuery(\n  baseUrl: string,\n  options?: Parameters<typeof fetchBaseQuery>[0]\n): BaseQueryFn {\n  const baseQuery = fetchBaseQuery({\n    baseUrl,\n    ...options,\n  });\n\n  return async (args, api, extraOptions) => {\n    const result = await baseQuery(args, api, extraOptions);\n\n    // Handle network errors\n    if (result.error) {\n      if ('status' in result.error) {\n        // HTTP error with status\n        throw new ApiResponseError(\n          `API request failed with status ${result.error.status}`,\n          typeof result.error.status === 'number' ? result.error.status : 500,\n          result.error.data\n        );\n      } else {\n        // Network or other error\n        throw new Error(`Network error: ${result.error.error}`);\n      }\n    }\n\n    return result;\n  };\n}\n\n/**\n * Creates a validated endpoint that automatically validates responses\n */\nexport function createValidatedEndpoint<TResponse, TRequest = void>(\n  responseSchema: z.ZodSchema<TResponse>,\n  endpoint: {\n    query: (arg: TRequest) => any;\n    method?: string;\n  }\n) {\n  return {\n    ...endpoint,\n    transformResponse: (response: unknown, meta: any, arg: TRequest) => {\n      // First, try to validate as error response\n      try {\n        const errorResponse = ApiErrorResponseSchema.parse(response);\n        throw new ApiResponseError(\n          errorResponse.error.message,\n          500, // Default to 500 for API errors\n          errorResponse\n        );\n      } catch (error) {\n        if (!(error instanceof z.ZodError)) {\n          throw error; // Re-throw if it's an ApiResponseError\n        }\n        // Not an error response, continue with success validation\n      }\n\n      // Validate as success response\n      const context = `${endpoint.method || 'GET'} endpoint`;\n      const validatedResponse = validateApiResponse(responseSchema, response, context);\n\n      // Extract data field from API success response\n      if (validatedResponse && typeof validatedResponse === 'object' && 'data' in validatedResponse) {\n        return (validatedResponse as any).data;\n      }\n\n      return validatedResponse;\n    },\n  };\n}\n\n/**\n * Wraps a success response schema with the standard API wrapper\n */\nexport function wrapSuccessResponse<T extends z.ZodTypeAny>(dataSchema: T) {\n  return ApiSuccessResponseSchema(dataSchema);\n}\n\n/**\n * Type-safe query hook factory with automatic validation\n */\nexport function createValidatedQuery<TResponse, TRequest = void>(\n  responseSchema: z.ZodSchema<TResponse>,\n  queryFn: (arg: TRequest) => Promise<unknown>\n) {\n  return async (arg: TRequest): Promise<TResponse> => {\n    try {\n      const response = await queryFn(arg);\n      return validateApiResponse(responseSchema, response, 'query');\n    } catch (error) {\n      if (error instanceof ApiValidationError || error instanceof ApiResponseError) {\n        throw error;\n      }\n      throw new Error(`Query failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  };\n}\n\n/**\n * Type-safe mutation hook factory with automatic validation\n */\nexport function createValidatedMutation<TResponse, TRequest = void>(\n  responseSchema: z.ZodSchema<TResponse>,\n  mutationFn: (arg: TRequest) => Promise<unknown>\n) {\n  return async (arg: TRequest): Promise<TResponse> => {\n    try {\n      const response = await mutationFn(arg);\n      return validateApiResponse(responseSchema, response, 'mutation');\n    } catch (error) {\n      if (error instanceof ApiValidationError || error instanceof ApiResponseError) {\n        throw error;\n      }\n      throw new Error(`Mutation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  };\n}\n\n/**\n * Development mode response validator for debugging\n */\nexport function validateResponseInDev<T>(\n  schema: z.ZodSchema<T>,\n  data: unknown,\n  endpoint: string\n): T {\n  if (process.env.NODE_ENV === 'development') {\n    console.group(`🔍 API Response Validation: ${endpoint}`);\n\n    try {\n      const result = schema.parse(data);\n      console.log('✅ Validation passed');\n      console.log('Response data:', result);\n      console.groupEnd();\n      return result;\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error('❌ Validation failed');\n        console.error('Issues:', error.issues);\n        console.error('Raw data:', data);\n        console.groupEnd();\n        throw new ApiValidationError(\n          `API validation failed for ${endpoint}`,\n          error,\n          data\n        );\n      }\n      throw error;\n    }\n  }\n\n  return schema.parse(data);\n}\n\n/**\n * Utility to safely parse API responses with fallback\n */\nexport function safeParseApiResponse<T>(\n  schema: z.ZodSchema<T>,\n  data: unknown,\n  fallback?: T\n): { success: true; data: T } | { success: false; error: z.ZodError; fallback?: T } {\n  const result = schema.safeParse(data);\n\n  if (result.success) {\n    return { success: true, data: result.data };\n  } else {\n    console.warn('API response validation failed:', {\n      issues: result.error.issues,\n      data,\n    });\n\n    return {\n      success: false,\n      error: result.error,\n      fallback,\n    };\n  }\n}\n\n/**\n * Mock data generator for development and testing\n */\nexport function generateMockData<T>(schema: z.ZodSchema<T>): T {\n  // This is a simplified mock generator - in a real implementation,\n  // you'd use a library like @anatine/zod-mock or faker.js\n\n  if (schema instanceof z.ZodObject) {\n    const shape = schema.shape;\n    const mock: any = {};\n\n    for (const [key, fieldSchema] of Object.entries(shape)) {\n      mock[key] = generateMockValue(fieldSchema as z.ZodTypeAny);\n    }\n\n    return mock;\n  }\n\n  return generateMockValue(schema);\n}\n\nfunction generateMockValue(schema: z.ZodTypeAny): any {\n  if (schema instanceof z.ZodString) {\n    return 'mock-string';\n  }\n  if (schema instanceof z.ZodNumber) {\n    return 42;\n  }\n  if (schema instanceof z.ZodBoolean) {\n    return true;\n  }\n  if (schema instanceof z.ZodArray) {\n    return [generateMockValue(schema.element)];\n  }\n  if (schema instanceof z.ZodOptional) {\n    return generateMockValue(schema.unwrap());\n  }\n  if (schema instanceof z.ZodEnum) {\n    return schema.options[0];\n  }\n  if (schema instanceof z.ZodLiteral) {\n    return schema.value;\n  }\n\n  return null;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/lib/stripe.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":4,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":4,"endColumn":104},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":4,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":4,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[160,162],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":6,"column":41,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":6,"endColumn":61}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { loadStripe } from '@stripe/stripe-js'\n\n// This should be your publishable key\nconst stripePublishableKey = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || 'pk_test_51234567890abcdef'\n\nexport const stripePromise = loadStripe(stripePublishableKey)\n\nexport default stripePromise","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/lib/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/auth/CallbackPage.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":1,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":19,"column":28,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":19,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":49,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":49,"endColumn":13}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react'\nimport { describe, it, expect, vi } from 'vitest'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport CallbackPage from './CallbackPage'\n\nimport {\n  createMockStore,\n  type PartialTestState,\n} from '@/test/utils/mockStore'\n\n// Mock useSearchParams\nconst mockUseSearchParams = vi.fn()\nvi.mock('react-router-dom', async () => {\n  const actual = await vi.importActual('react-router-dom')\n  return {\n    ...actual,\n    useSearchParams: () => mockUseSearchParams(),\n  }\n})\n\n// Mock API hooks\nvi.mock('../../store/api/authApi', () => ({\n  useHandleCallbackMutation: () => [\n    vi.fn(),\n    { isLoading: false, error: null, data: null }\n  ],\n}))\n\n// Mock LoadingSpinner\nvi.mock('../../components/ui/LoadingSpinner', () => ({\n  default: () => <div data-testid=\"loading-spinner\">Loading...</div>,\n}))\n\nconst renderWithProviders = (\n  component: React.ReactElement,\n  initialState: PartialTestState = {}\n) => {\n  const store = createMockStore(initialState)\n  return render(\n    <Provider store={store}>\n      <BrowserRouter>{component}</BrowserRouter>\n    </Provider>\n  )\n}\n\ndescribe('CallbackPage', () => {\n  beforeEach(() => {\n    vi.clearAllMocks()\n    mockUseSearchParams.mockReturnValue([\n      new URLSearchParams('code=test123&state=randomstate')\n    ])\n  })\n\n  it('should render without errors', () => {\n    renderWithProviders(<CallbackPage />)\n    // Basic render test - component should mount without crashing\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle URL search parameters', () => {\n    renderWithProviders(<CallbackPage />)\n    // Component should render and process URL parameters\n    expect(mockUseSearchParams).toHaveBeenCalled()\n  })\n\n  it('should handle callback with code parameter', () => {\n    mockUseSearchParams.mockReturnValue([\n      new URLSearchParams('code=auth-code-123')\n    ])\n\n    renderWithProviders(<CallbackPage />)\n    expect(mockUseSearchParams).toHaveBeenCalled()\n  })\n\n  it('should handle callback with state parameter', () => {\n    mockUseSearchParams.mockReturnValue([\n      new URLSearchParams('code=auth-code-123&state=test-state')\n    ])\n\n    renderWithProviders(<CallbackPage />)\n    expect(mockUseSearchParams).toHaveBeenCalled()\n  })\n\n  it('should handle error parameter in URL', () => {\n    mockUseSearchParams.mockReturnValue([\n      new URLSearchParams('error=access_denied&error_description=User cancelled')\n    ])\n\n    renderWithProviders(<CallbackPage />)\n    expect(mockUseSearchParams).toHaveBeenCalled()\n  })\n\n  it('should handle empty search parameters', () => {\n    mockUseSearchParams.mockReturnValue([new URLSearchParams('')])\n\n    renderWithProviders(<CallbackPage />)\n    expect(mockUseSearchParams).toHaveBeenCalled()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/auth/CallbackPage.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1240,1242],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":50,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":50,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1727,1729],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":70,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":70,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2271,2271],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2271,2271],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react'\nimport { Navigate, useSearchParams } from 'react-router-dom'\nimport { ExclamationTriangleIcon } from '@heroicons/react/24/outline'\n\nimport { useAppDispatch, useAppSelector } from '../../store/hooks'\nimport {\n  setCredentials,\n  setError,\n  selectIsAuthenticated,\n} from '../../store/slices/authSlice'\nimport { useHandleCallbackMutation } from '../../store/api/authApi'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport { parseApiError } from '../../utils/apiError'\nimport { logger } from '../../utils/logger'\n\nconst CallbackPage: React.FC = () => {\n  const [searchParams] = useSearchParams()\n  const dispatch = useAppDispatch()\n  const isAuthenticated = useAppSelector(selectIsAuthenticated)\n  const [handleCallback] = useHandleCallbackMutation()\n  const [error, setLocalError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const processCallback = async () => {\n      const code = searchParams.get('code')\n      const state = searchParams.get('state')\n      const error = searchParams.get('error')\n      const errorDescription = searchParams.get('error_description')\n\n      // Handle OAuth errors\n      if (error) {\n        const message = errorDescription || `Authentication failed: ${error}`\n        setLocalError(message)\n        dispatch(setError(message))\n        return\n      }\n\n      // Handle missing authorization code\n      if (!code) {\n        const message = 'Authorization code not found in callback'\n        setLocalError(message)\n        dispatch(setError(message))\n        return\n      }\n\n      try {\n        // Exchange code for user session\n        const result = await handleCallback({\n          code,\n          state: state || undefined,\n        }).unwrap()\n\n        // Set credentials (token handled via httpOnly cookie from server)\n        dispatch(\n          setCredentials({\n            user: result.user,\n          })\n        )\n      } catch (err) {\n        const parsed = parseApiError(err)\n        logger.error('Callback processing failed:', parsed)\n        const message =\n          parsed.message || 'Authentication failed. Please try again.'\n        setLocalError(message)\n        dispatch(setError(message))\n      }\n    }\n\n    if (!isAuthenticated) {\n      processCallback()\n    }\n  }, [searchParams, handleCallback, dispatch, isAuthenticated])\n\n  // Redirect to dashboard if authenticated\n  if (isAuthenticated) {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n            <div className=\"flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full\">\n              <ExclamationTriangleIcon className=\"w-6 h-6 text-red-600\" />\n            </div>\n\n            <div className=\"mt-4 text-center\">\n              <h3 className=\"text-lg font-medium text-gray-900\">\n                Authentication Failed\n              </h3>\n              <p className=\"mt-2 text-sm text-gray-600\">{error}</p>\n            </div>\n\n            <div className=\"mt-6\">\n              <button\n                onClick={() => (window.location.href = '/auth/login')}\n                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n              >\n                Try Again\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Show loading state\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n          <div className=\"text-center\">\n            <LoadingSpinner size=\"lg\" className=\"mx-auto\" />\n            <h3 className=\"mt-4 text-lg font-medium text-gray-900\">\n              Completing sign in...\n            </h3>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              Please wait while we complete your authentication.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CallbackPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/auth/LoginPage.test.tsx","messages":[{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","line":12,"column":18,"nodeType":"JSXOpeningElement","endLine":12,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react'\nimport { describe, it, expect, vi } from 'vitest'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport LoginPage from './LoginPage'\n\nimport { createMockStore } from '@/test/utils/mockStore'\n\n// Mock the PasswordLoginForm component\nvi.mock('../../components/auth/PasswordLoginForm', () => ({\n  default: () => <form role=\"form\">Password Login Form</form>,\n}))\n\n// Simple mock for the API hook\nvi.mock('../../store/api/authApi', () => ({\n  useGetAuthMethodsQuery: () => ({\n    data: {\n      methods: ['password', 'oauth2'],\n      passwordAuthEnabled: true,\n      oauth2Providers: ['google', 'github', 'microsoft'],\n    },\n    isLoading: false,\n    error: null,\n  }),\n}))\n\nconst renderWithProviders = (component: React.ReactElement) => {\n  const store = createMockStore()\n  return render(\n    <Provider store={store}>\n      <BrowserRouter>{component}</BrowserRouter>\n    </Provider>\n  )\n}\n\ndescribe('LoginPage', () => {\n  it('renders login form', () => {\n    renderWithProviders(<LoginPage />)\n    // The login page should be rendered with password login form\n    expect(screen.getByRole('form')).toBeInTheDocument()\n  })\n\n  it('shows password login form when enabled', () => {\n    renderWithProviders(<LoginPage />)\n    // Password form should be available\n    expect(screen.getByRole('form')).toBeInTheDocument()\n  })\n\n  it('renders without errors', () => {\n    const { container } = renderWithProviders(<LoginPage />)\n    expect(container).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/auth/LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":22,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":22,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[855,855],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[855,855],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\n\nimport { useGetAuthMethodsQuery } from '../../store/api/authApi'\nimport { useAppSelector } from '../../store/hooks'\nimport { selectIsAuthenticated } from '../../store/slices/authSlice'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport PasswordLoginForm from '../../components/auth/PasswordLoginForm'\n\nconst LoginPage: React.FC = () => {\n  const [error, setError] = useState<string | null>(null)\n  const navigate = useNavigate()\n  const isAuthenticated = useAppSelector(selectIsAuthenticated)\n  const { data: authMethods, isLoading, error: apiError } = useGetAuthMethodsQuery()\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  const handleLoginSuccess = () => {\n    navigate('/dashboard')\n  }\n\n  const handleLoginError = (errorMessage: string) => {\n    setError(errorMessage)\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {error && (\n        <div className=\"rounded-md bg-red-50 p-4\">\n          <div className=\"text-sm text-red-700\">{error}</div>\n        </div>\n      )}\n\n      {(authMethods?.passwordAuthEnabled || apiError) ? (\n        <PasswordLoginForm\n          onSuccess={handleLoginSuccess}\n          onError={handleLoginError}\n        />\n      ) : (\n        <div className=\"text-center space-y-4\">\n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              Authentication Unavailable\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-600\">\n              Password authentication is currently disabled. Please contact\n              support.\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default LoginPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/auth/MockLoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":54,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":54,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1643,1643],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1643,1643],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":100,"column":28,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":100,"endColumn":45}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nimport { useAppDispatch } from '../../store/hooks'\nimport { setCredentials } from '../../store/slices/authSlice'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\n\nconst MockLoginPage: React.FC = () => {\n  const [email, setEmail] = useState('demo@example.com')\n  const [password, setPassword] = useState('DemoPassword123!')\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState('')\n\n  const navigate = useNavigate()\n  const dispatch = useAppDispatch()\n\n  const handleMockLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError('')\n    setIsLoading(true)\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000))\n\n    if (email === 'demo@example.com' && password === 'DemoPassword123!') {\n      // Create mock user data\n      const mockUser = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'demo@example.com',\n        name: 'Demo User',\n        organization: {\n          id: 'b48e719b-3116-423e-b114-c9791e296a8d',\n          name: 'Demo Organization',\n          slug: 'demo-org'\n        },\n        role: 'ADMIN' as const\n      }\n\n      const mockToken = 'mock-jwt-token-' + Date.now()\n\n      // Update Redux store\n      dispatch(setCredentials({\n        user: mockUser,\n        token: mockToken\n      }))\n\n      // Store in localStorage for persistence\n      localStorage.setItem('auth_token', mockToken)\n      localStorage.setItem('auth_user', JSON.stringify(mockUser))\n\n      setIsLoading(false)\n\n      // Navigate to dashboard\n      navigate('/dashboard')\n    } else {\n      setError('Invalid credentials. Use demo@example.com / DemoPassword123!')\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Animated gradient background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 bg-[length:400%_400%] animate-gradient-x\"></div>\n\n      {/* Floating shapes for visual interest */}\n      <div className=\"absolute top-0 left-0 w-full h-full overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-20 left-20 w-64 h-64 bg-white bg-opacity-5 rounded-full blur-xl animate-float\"></div>\n        <div className=\"absolute top-40 right-20 w-96 h-96 bg-purple-400 bg-opacity-10 rounded-full blur-2xl animate-float-delayed\"></div>\n        <div className=\"absolute bottom-20 left-40 w-80 h-80 bg-pink-400 bg-opacity-10 rounded-full blur-xl animate-float-slow\"></div>\n      </div>\n\n      <div className=\"relative min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-sm w-full\">\n          {/* Main card with glassmorphism effect */}\n          <div className=\"bg-white bg-opacity-10 backdrop-blur-lg rounded-2xl p-6 shadow-2xl border border-white border-opacity-20\">\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"w-12 h-12 bg-gradient-to-tr from-indigo-400 to-purple-500 rounded-xl flex items-center justify-center shadow-lg\">\n                  <svg className=\"w-5 h-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                  </svg>\n                </div>\n              </div>\n              <h1 className=\"text-2xl font-bold text-white mb-1\">\n                Payment Platform\n              </h1>\n              <p className=\"text-white text-opacity-70 text-sm mb-3\">\n                Secure subscription management for your business\n              </p>\n\n              {/* Mock login badge */}\n              <div className=\"inline-flex items-center px-2 py-1 rounded-full bg-green-500 bg-opacity-15 border border-green-400 border-opacity-20\">\n                <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full mr-1.5 animate-pulse\"></div>\n                <span className=\"text-green-100 text-xs font-medium\">Demo Mode</span>\n              </div>\n            </div>\n\n            <form onSubmit={handleMockLogin} className=\"space-y-4\">\n              {/* Email input */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"email-address\" className=\"text-white text-sm font-medium block\">\n                  Email Address\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <svg className=\"h-4 w-4 text-white text-opacity-50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                    </svg>\n                  </div>\n                  <input\n                    id=\"email-address\"\n                    name=\"email\"\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    required\n                    data-testid=\"email-input\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"w-full pl-9 pr-4 py-2.5 bg-white bg-opacity-10 border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-1 focus:ring-purple-400 focus:border-transparent transition-all duration-200 text-sm\"\n                    placeholder=\"Enter your email\"\n                  />\n                </div>\n              </div>\n\n              {/* Password input */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"password\" className=\"text-white text-sm font-medium block\">\n                  Password\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <svg className=\"h-4 w-4 text-white text-opacity-50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                    </svg>\n                  </div>\n                  <input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    required\n                    data-testid=\"password-input\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"w-full pl-9 pr-4 py-2.5 bg-white bg-opacity-10 border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-1 focus:ring-purple-400 focus:border-transparent transition-all duration-200 text-sm\"\n                    placeholder=\"Enter your password\"\n                  />\n                </div>\n              </div>\n\n              {/* Error message */}\n              {error && (\n                <div className=\"bg-red-500 bg-opacity-20 border border-red-400 border-opacity-30 rounded-xl p-4\">\n                  <div className=\"flex items-center\">\n                    <svg className=\"w-5 h-5 text-red-300 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    <p className=\"text-red-100 text-sm\">{error}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Submit button */}\n              <button\n                type=\"submit\"\n                data-testid=\"submit-button\"\n                disabled={isLoading}\n                className=\"w-full group relative py-2.5 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700 focus:outline-none focus:ring-1 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-md hover:shadow-lg\"\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center justify-center\">\n                    <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    <span>Signing in...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-center\">\n                    <span>Sign in to Platform</span>\n                    <svg className=\"ml-2 w-3.5 h-3.5 group-hover:translate-x-0.5 transition-transform duration-200\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n                    </svg>\n                  </div>\n                )}\n              </button>\n\n              {/* Demo credentials info */}\n              <div className=\"bg-white bg-opacity-5 border border-white border-opacity-10 rounded-lg p-3 text-center\">\n                <h3 className=\"text-white text-xs font-medium mb-1.5\">Demo Credentials</h3>\n                <div className=\"space-y-0.5\">\n                  <p className=\"text-white text-opacity-70 text-xs font-mono\">demo@example.com</p>\n                  <p className=\"text-white text-opacity-70 text-xs font-mono\">DemoPassword123!</p>\n                </div>\n                <button\n                  type=\"button\"\n                  data-testid=\"login-button\"\n                  onClick={() => {\n                    setEmail('demo@example.com')\n                    setPassword('DemoPassword123!')\n                  }}\n                  className=\"mt-2 text-xs text-white text-opacity-70 hover:text-opacity-100 underline transition-opacity\"\n                >\n                  Click to use demo credentials\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Footer */}\n          <div className=\"text-center mt-8\">\n            <p className=\"text-white text-opacity-60 text-sm\">\n              © 2024 Payment Platform. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default MockLoginPage","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/dashboard/DashboardPage.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":1,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react'\nimport { describe, it, expect, vi } from 'vitest'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport DashboardPage from './DashboardPage'\n\nimport {\n  createMockStore,\n  type PartialTestState,\n} from '@/test/utils/mockStore'\nimport { createMockUser } from '@/test/fixtures/users'\n\n// Mock API hooks\nvi.mock('../../store/api/userApi', () => ({\n  useGetCurrentUserQuery: () => ({\n    data: {\n      id: '123',\n      name: 'Test User',\n      email: 'test@example.com',\n    },\n    isLoading: false,\n    error: null,\n  }),\n}))\n\nvi.mock('../../store/api/organizationApi', () => ({\n  useGetUserOrganizationsQuery: () => ({\n    data: {\n      organizations: [\n        { id: '1', name: 'Test Org', slug: 'test-org' }\n      ]\n    },\n    isLoading: false,\n    error: null,\n  }),\n}))\n\nvi.mock('../../store/api/subscriptionApi', () => ({\n  useGetSubscriptionStatusQuery: () => ({\n    data: { status: 'active', planName: 'Pro Plan' },\n    isLoading: false,\n    error: null,\n  }),\n  useGetSubscriptionStatisticsQuery: () => ({\n    data: { status: 'active', planName: 'Pro Plan' },\n    isLoading: false,\n    error: null,\n  }),\n}))\n\nvi.mock('../../store/api/paymentApi', () => ({\n  useGetPaymentStatisticsQuery: () => ({\n    data: {\n      totalAmount: 1000,\n      totalSuccessfulPayments: 10,\n      failedPayments: 2,\n    },\n    isLoading: false,\n    error: null,\n  }),\n}))\n\n// Mock hooks\nvi.mock('../../hooks/useRealTimeUpdates', () => ({\n  useRealTimeUpdates: () => ({\n    isActive: true,\n    lastUpdate: new Date(),\n    isPaused: false,\n    updateCount: 5,\n    resumeUpdates: vi.fn(),\n    pauseUpdates: vi.fn(),\n    forceUpdate: vi.fn(),\n  }),\n}))\n\n// Mock components\nvi.mock('../../components/ui/LoadingSpinner', () => ({\n  default: () => <div data-testid=\"loading-spinner\">Loading...</div>,\n}))\n\nconst renderWithProviders = (\n  component: React.ReactElement,\n  initialState: PartialTestState = {}\n) => {\n  const store = createMockStore(initialState)\n  return render(\n    <Provider store={store}>\n      <BrowserRouter>{component}</BrowserRouter>\n    </Provider>\n  )\n}\n\ndescribe('DashboardPage', () => {\n  it('should render without errors', () => {\n    renderWithProviders(<DashboardPage />)\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should render for authenticated user', () => {\n    renderWithProviders(<DashboardPage />, {\n      auth: {\n        isAuthenticated: true,\n        user: createMockUser(),\n      },\n    })\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle loading states', () => {\n    renderWithProviders(<DashboardPage />, {\n      auth: { isLoading: false }\n    })\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle user data display', () => {\n    renderWithProviders(<DashboardPage />, {\n      auth: {\n        user: createMockUser({\n          id: '456',\n          name: 'Dashboard User',\n          email: 'dashboard@example.com',\n          provider: 'github',\n        }),\n      },\n    })\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should render dashboard components', () => {\n    renderWithProviders(<DashboardPage />)\n    // Component should render successfully\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle empty state', () => {\n    renderWithProviders(<DashboardPage />, {\n      auth: { user: null }\n    })\n    expect(document.body).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/dashboard/DashboardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":21,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardSkeleton' is defined but never used.","line":22,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'refetchOrganizations' is assigned a value but never used.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":47,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":47,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1707,1709],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":55,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":55,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1926,1928],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":63,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":70,"endColumn":8},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":94,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":94,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3027,3029],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":102,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":102,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3249,3251],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":152,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":152,"endColumn":50}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport {\n  BuildingOfficeIcon,\n  CreditCardIcon,\n  DocumentTextIcon,\n  UserGroupIcon,\n  ArrowTrendingUpIcon,\n  CalendarDaysIcon,\n  ChartBarIcon,\n  BellIcon,\n} from '@heroicons/react/24/outline'\nimport { format } from 'date-fns'\nimport clsx from 'clsx'\n\nimport { useAppSelector } from '../../store/hooks'\nimport { selectCurrentUser } from '../../store/slices/authSlice'\nimport { useGetUserOrganizationsQuery } from '../../store/api/organizationApi'\nimport { useGetPaymentStatisticsQuery } from '../../store/api/paymentApi'\nimport { useGetSubscriptionStatisticsQuery } from '../../store/api/subscriptionApi'\nimport { useRealTimeUpdates } from '../../hooks/useRealTimeUpdates'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport { LoadingCard, CardSkeleton, InlineLoading } from '../../components/ui/LoadingStates'\nimport { Button } from '../../components/ui/button'\nimport StatsCard from '../../components/ui/StatsCard'\nimport { getCardClasses } from '../../lib/theme'\nimport { usePagePerformance, usePerformanceTracking } from '../../utils/performance'\n\n\nconst DashboardPage: React.FC = () => {\n  const user = useAppSelector(selectCurrentUser)\n\n  // Performance tracking for dashboard\n  usePagePerformance('Dashboard')\n  const performanceTracking = usePerformanceTracking()\n  const {\n    data: organizations,\n    isLoading: orgsLoading,\n    refetch: refetchOrganizations\n  } = useGetUserOrganizationsQuery()\n\n  // Get statistics for the first organization (primary org)\n  const primaryOrg = organizations?.[0]\n  const {\n    data: paymentStats,\n    isLoading: paymentStatsLoading,\n    refetch: refetchPaymentStats\n  } = useGetPaymentStatisticsQuery(primaryOrg?.id || '', {\n      skip: !primaryOrg?.id,\n    })\n\n  const {\n    data: subscriptionStats,\n    isLoading: subscriptionStatsLoading,\n    refetch: refetchSubscriptionStats\n  } = useGetSubscriptionStatisticsQuery(primaryOrg?.id || '', {\n      skip: !primaryOrg?.id,\n    })\n\n  // Set up real-time updates for dashboard data\n  const realTimeUpdates = useRealTimeUpdates(\n    async () => {\n      // Measure refresh performance\n      return performanceTracking.measureInteraction(async () => {\n        // Refresh all statistics and return the data\n        const [paymentData, subscriptionData] = await Promise.all([\n          refetchPaymentStats(),\n          refetchSubscriptionStats(),\n        ])\n        return { paymentData, subscriptionData }\n      })\n    },\n    {\n      interval: 30000, // Update every 30 seconds\n      enabled: !!primaryOrg?.id, // Only update when we have an organization\n      pauseWhenInactive: true,\n      pauseAfterInactivity: 300000, // Pause after 5 minutes of inactivity\n    }\n  )\n\n  if (orgsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <LoadingCard\n          title=\"Loading Dashboard\"\n          message=\"Preparing your personalized dashboard experience...\"\n        />\n      </div>\n    )\n  }\n\n  const stats = [\n    {\n      name: 'Organizations',\n      value: organizations?.length || 0,\n      icon: BuildingOfficeIcon,\n      bgColor: 'bg-primary-50',\n      iconColor: 'text-primary-600',\n      trend: '+12%',\n    },\n    {\n      name: 'Total Payments',\n      value: paymentStats?.totalSuccessfulPayments || 0,\n      icon: CreditCardIcon,\n      bgColor: 'bg-success-50',\n      iconColor: 'text-success-600',\n      trend: '+18%',\n    },\n    {\n      name: 'Revenue',\n      value: paymentStats && typeof paymentStats.totalAmount === 'number' ? `$${paymentStats.totalAmount.toFixed(2)}` : '$0.00',\n      icon: ArrowTrendingUpIcon,\n      bgColor: 'bg-accent-50',\n      iconColor: 'text-accent-600',\n      trend: '+32%',\n    },\n    {\n      name: 'Subscription',\n      value: String(subscriptionStats?.status ?? 'Active'),\n      icon: DocumentTextIcon,\n      bgColor: 'bg-gray-50',\n      iconColor: 'text-gray-600',\n      trend: 'Current',\n    },\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            Welcome back, <span className=\"brand-element\">{user?.name}</span>! 👋\n          </h1>\n          <p className=\"text-sm text-gray-600\">\n            Here's your dashboard overview with the latest insights and metrics.\n          </p>\n        </div>\n\n        {/* Real-time update status */}\n        <div className=\"text-right\">\n          <div className=\"text-xs text-gray-500 mb-1\">\n            {realTimeUpdates.isActive ? (\n              <span className=\"flex items-center\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse\"></div>\n                Live updates active\n              </span>\n            ) : (\n              <span className=\"text-gray-400\">Updates paused</span>\n            )}\n          </div>\n          <button\n            onClick={realTimeUpdates.forceUpdate}\n            className=\"text-xs text-primary-600 hover:text-primary-500 underline\"\n          >\n            Refresh now\n          </button>\n        </div>\n      </div>\n\n      {/* Stats Grid - Compact */}\n      <div className=\"grid grid-cols-4 gap-3\">\n        {stats.map((stat) => {\n          const isPaymentsCard = stat.name === 'Total Payments'\n          const isSubscriptionCard = stat.name === 'Subscription'\n          const displayValue = isPaymentsCard && paymentStatsLoading\n            ? <InlineLoading size=\"md\" />\n            : isSubscriptionCard && subscriptionStatsLoading\n              ? <InlineLoading size=\"md\" />\n              : stat.value\n\n          return (\n            <StatsCard\n              key={stat.name}\n              unstyled\n              className={clsx(getCardClasses(), 'p-3 transition-shadow hover:shadow-lg brand-element')}\n              contentClassName=\"p-0\"\n              icon={\n                <stat.icon className=\"w-3 h-3 brand-element\" />\n              }\n              iconWrapperClassName={`inline-flex items-center justify-center w-6 h-6 ${stat.bgColor} ${stat.iconColor} rounded-lg mb-2`}\n              title={stat.name}\n              titleClassName=\"text-xs font-medium text-gray-600 mb-1\"\n              value={displayValue}\n              valueClassName=\"text-base font-bold text-gray-900 mb-1 brand-element\"\n              trend={stat.trend}\n              trendClassName=\"text-xs font-medium text-success-600 bg-success-100 px-1 py-0.5 rounded\"\n            />\n          )\n        })}\n      </div>\n\n      {/* Quick Actions - Compact */}\n      <div className={getCardClasses()}>\n        <div className=\"flex items-center mb-3\">\n          <div className=\"w-6 h-6 gradient-brand rounded-lg flex items-center justify-center mr-2\">\n            <ChartBarIcon className=\"w-3 h-3 text-white brand-element\" />\n          </div>\n          <h3 className=\"text-base font-semibold text-gray-900 brand-element\">Quick Actions</h3>\n        </div>\n        <div className=\"grid grid-cols-3 gap-3\">\n          <QuickActionCard\n            title=\"Organizations\"\n            description=\"Manage memberships\"\n            href=\"/organizations\"\n            icon={BuildingOfficeIcon}\n          />\n          <QuickActionCard\n            title=\"Payments\"\n            description=\"View transactions\"\n            href=\"/payments\"\n            icon={CreditCardIcon}\n          />\n          <QuickActionCard\n            title=\"Subscription\"\n            description=\"Manage billing\"\n            href=\"/subscription\"\n            icon={DocumentTextIcon}\n          />\n        </div>\n      </div>\n\n      {/* Recent Activity - Compact */}\n      {primaryOrg && (\n        <div className={getCardClasses()}>\n          <div className=\"flex items-center mb-3\">\n            <div className=\"w-6 h-6 bg-success-600 rounded-lg flex items-center justify-center mr-2\">\n              <BellIcon className=\"w-3 h-3 text-white brand-element\" />\n            </div>\n            <h3 className=\"text-base font-semibold text-gray-900 brand-element\">Recent Activity</h3>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center p-2 bg-success-50 rounded-lg border border-success-200\">\n              <div className=\"w-6 h-6 bg-success-600 rounded-full flex items-center justify-center mr-2\">\n                <UserGroupIcon className=\"w-3 h-3 text-white brand-element\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-xs font-medium text-gray-900\">\n                  Organization <span className=\"font-semibold brand-element\">{primaryOrg.name}</span> created\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {format(new Date(primaryOrg.createdAt), 'MMM d, yyyy')}\n                </p>\n              </div>\n              <div className=\"text-success-600\">\n                <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n            </div>\n\n            {!!subscriptionStats?.status && (\n              <div className=\"flex items-center p-2 bg-primary-50 rounded-lg border border-primary-200\">\n                <div className=\"w-6 h-6 bg-primary-600 rounded-full flex items-center justify-center mr-2 brand-bg\">\n                  <DocumentTextIcon className=\"w-3 h-3 text-white brand-element\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-xs font-medium text-gray-900\">\n                    Subscription: <span className=\"font-semibold brand-element\">{subscriptionStats.status}</span>\n                  </p>\n                  <p className=\"text-xs text-gray-500\">Active subscription</p>\n                </div>\n                <div className=\"text-primary-600\">\n                  <CalendarDaysIcon className=\"w-3 h-3 brand-element\" />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\ninterface QuickActionCardProps {\n  title: string\n  description: string\n  href: string\n  icon: React.ComponentType<{ className?: string }>\n}\n\nconst QuickActionCard: React.FC<QuickActionCardProps> = ({\n  title,\n  description,\n  href,\n  icon: Icon,\n}) => {\n  return (\n    <div className=\"group relative bg-gray-50 hover:bg-gray-100 p-3 rounded-lg transition-colors border border-gray-200\">\n      <div className=\"relative\">\n        {/* Icon */}\n        <div className=\"inline-flex items-center justify-center w-6 h-6 bg-gray-200 rounded-lg mb-2\">\n          <Icon className=\"w-3 h-3 text-gray-600 brand-element\" />\n        </div>\n\n        {/* Content */}\n        <div>\n          <h3 className=\"text-sm font-semibold text-gray-900 mb-1 brand-element\">\n            <a href={href} className=\"focus:outline-none\">\n              <span className=\"absolute inset-0\" aria-hidden=\"true\" />\n              {title}\n            </a>\n          </h3>\n          <p className=\"text-xs text-gray-600\">\n            {description}\n          </p>\n        </div>\n\n        {/* Arrow icon */}\n        <div className=\"absolute top-2 right-2 text-gray-400 group-hover:text-gray-600 transition-colors\">\n          <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n          </svg>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DashboardPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/organizations/OrganizationPage.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":47,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":47,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1803,1805],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":52,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":52,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1938,1940],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":98,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":98,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2995,2995],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2995,2995],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":122,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":122,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3593,3593],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3593,3593],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":293,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":295,"endColumn":26},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":330,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":330,"endColumn":58}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { useParams, Navigate } from 'react-router-dom'\nimport { UserPlusIcon, UsersIcon, TrashIcon } from '@heroicons/react/24/outline'\nimport { format } from 'date-fns'\nimport { toast } from 'react-hot-toast'\nimport { clsx } from 'clsx'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\n\nimport CreateOrganizationModal from '../../components/organizations/CreateOrganizationModal'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport { useGetOrganizationSubscriptionQuery } from '../../store/api/subscriptionApi'\nimport {\n  useGetUserOrganizationsQuery,\n  useGetOrganizationMembersQuery,\n  useInviteUserMutation,\n  useRemoveMemberMutation,\n} from '../../store/api/organizationApi'\nimport { logger } from '../../utils/logger'\nimport { parseApiError } from '../../utils/apiError'\nimport PageHeader from '../../components/ui/PageHeader'\n\nconst inviteMemberSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  role: z.enum(['OWNER', 'ADMIN', 'MEMBER'], {\n    message: 'Please select a role',\n  }),\n})\n\ntype InviteMemberForm = z.infer<typeof inviteMemberSchema>\n\nconst OrganizationPage: React.FC = () => {\n  const { slug } = useParams<{ slug: string }>()\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [showInviteForm, setShowInviteForm] = useState(false)\n  // const [editingOrg, setEditingOrg] = useState(false)\n\n  const { data: organizations, isLoading: orgsLoading } =\n    useGetUserOrganizationsQuery()\n  const organization = organizations?.find(org => org.slug === slug)\n\n  const {\n    data: members,\n    isLoading: membersLoading,\n    refetch: refetchMembers,\n  } = useGetOrganizationMembersQuery(organization?.id || '', {\n    skip: !organization?.id,\n  })\n\n  const { data: subscription } = useGetOrganizationSubscriptionQuery(\n    organization?.id || '',\n    {\n      skip: !organization?.id,\n    }\n  )\n\n  // const [updateOrganization, { isLoading: isUpdating }] = useUpdateOrganizationMutation()\n  const [inviteUser, { isLoading: isInviting }] = useInviteUserMutation()\n  const [removeMember] = useRemoveMemberMutation()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<InviteMemberForm>({\n    resolver: zodResolver(inviteMemberSchema),\n  })\n\n  if (orgsLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    )\n  }\n\n  if (!organization && !orgsLoading) {\n    return <Navigate to=\"/organizations\" replace />\n  }\n\n  if (!organization) {\n    return null\n  }\n\n  const handleInviteMember = async (data: InviteMemberForm) => {\n    try {\n      await inviteUser({\n        organizationId: organization.id,\n        email: data.email,\n        role: data.role,\n      }).unwrap()\n\n      toast.success(`Invitation sent to ${data.email}`)\n      reset()\n      setShowInviteForm(false)\n      refetchMembers()\n    } catch (err) {\n      const parsed = parseApiError(err)\n      logger.error('Failed to invite member:', parsed)\n      toast.error(parsed.message || 'Failed to send invitation')\n    }\n  }\n\n  const handleRemoveMember = async (userId: string, memberEmail: string) => {\n    if (\n      !confirm(\n        `Are you sure you want to remove ${memberEmail} from this organization?`\n      )\n    ) {\n      return\n    }\n\n    try {\n      await removeMember({\n        organizationId: organization.id,\n        userId,\n      }).unwrap()\n\n      toast.success('Member removed successfully')\n      refetchMembers()\n    } catch (err) {\n      const parsed = parseApiError(err)\n      logger.error('Failed to remove member:', parsed)\n      toast.error(parsed.message || 'Failed to remove member')\n    }\n  }\n\n  const getRoleBadge = (role: string) => {\n    const roleStyles = {\n      OWNER: 'bg-purple-100 text-purple-800',\n      ADMIN: 'bg-blue-100 text-blue-800',\n      MEMBER: 'bg-gray-100 text-gray-800',\n    }\n\n    return (\n      <span\n        className={clsx(\n          'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',\n          roleStyles[role as keyof typeof roleStyles] ||\n            'bg-gray-100 text-gray-800'\n        )}\n      >\n        {role}\n      </span>\n    )\n  }\n\n  // Status badge omitted; OrganizationMemberInfo does not include status\n\n  return (\n    <div className=\"space-y-6\">\n      <PageHeader\n        title={organization.name}\n        description=\"Organization settings and member management\"\n        actions={(\n          <button\n            type=\"button\"\n            onClick={() => setShowInviteForm(true)}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n          >\n            <UserPlusIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n            Invite Member\n          </button>\n        )}\n      />\n\n      {/* Organization Details */}\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n        <div className=\"px-4 py-5 sm:px-6\">\n          <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n            Organization Information\n          </h3>\n          <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n            Basic details and settings for this organization.\n          </p>\n        </div>\n        <div className=\"border-t border-gray-200\">\n          <dl>\n            <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n              <dt className=\"text-sm font-medium text-gray-500\">Name</dt>\n              <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                {organization.name}\n              </dd>\n            </div>\n            <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n              <dt className=\"text-sm font-medium text-gray-500\">Slug</dt>\n              <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                {organization.slug}\n              </dd>\n            </div>\n            {/* Status not available on Organization type; omit display or derive if available */}\n            <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n              <dt className=\"text-sm font-medium text-gray-500\">Created</dt>\n              <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                {format(new Date(organization.createdAt), 'MMM d, yyyy')}\n              </dd>\n            </div>\n            {(\n              (organization.settings as { description?: string } | undefined)\n                ?.description\n            ) && (\n              <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm font-medium text-gray-500\">\n                  Description\n                </dt>\n                <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  {\n                    (\n                      organization.settings as { description?: string }\n                    ).description!\n                  }\n                </dd>\n              </div>\n            )}\n            {subscription && (\n              <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm font-medium text-gray-500\">\n                  Subscription\n                </dt>\n                <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                    Active\n                  </span>\n                  <span className=\"ml-2 text-sm text-gray-500\">\n                    Next billing:{' '}\n                    {format(\n                      new Date(subscription.currentPeriodEnd),\n                      'MMM d, yyyy'\n                    )}\n                  </span>\n                </dd>\n              </div>\n            )}\n          </dl>\n        </div>\n      </div>\n\n      {/* Members */}\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n        <div className=\"px-4 py-5 sm:px-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                Members\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                People who have access to this organization\n              </p>\n            </div>\n            <UsersIcon className=\"h-5 w-5 text-gray-400\" />\n          </div>\n        </div>\n\n        {membersLoading ? (\n          <div className=\"flex justify-center py-8\">\n            <LoadingSpinner size=\"lg\" />\n          </div>\n        ) : members && members.length > 0 ? (\n          <ul className=\"divide-y divide-gray-200\">\n            {members.map(member => (\n              <li key={member.userId} className=\"px-4 py-4 sm:px-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center\">\n                        <span className=\"text-sm font-medium text-gray-700\">\n                          {(member.userName || member.userEmail)\n                            .charAt(0)\n                            .toUpperCase()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"ml-4\">\n                      <div className=\"flex items-center\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {member.userName || member.userEmail}\n                        </p>\n                        <div className=\"ml-2\">{getRoleBadge(member.role)}</div>\n                      </div>\n                      <div className=\"flex items-center mt-1\">\n                        <p className=\"text-sm text-gray-500\">\n                          {member.userEmail}\n                        </p>\n                      </div>\n                      {/* No status/invitedAt on OrganizationMemberInfo; omit */}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {member.role !== 'OWNER' && (\n                      <button\n                        onClick={() =>\n                          handleRemoveMember(member.userId, member.userEmail)\n                        }\n                        className=\"text-red-600 hover:text-red-500\"\n                      >\n                        <TrashIcon className=\"h-5 w-5\" />\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div className=\"text-center py-12\">\n            <UsersIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n              No members\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Start by inviting team members to this organization.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Invite Member Form */}\n      {showInviteForm && (\n        <div className=\"bg-white shadow sm:rounded-lg\">\n          <div className=\"px-4 py-5 sm:p-6\">\n            <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n              Invite New Member\n            </h3>\n            <div className=\"mt-2 max-w-xl text-sm text-gray-500\">\n              <p>Send an invitation to join this organization.</p>\n            </div>\n            <form\n              onSubmit={handleSubmit(handleInviteMember)}\n              className=\"mt-5 space-y-4\"\n            >\n              <div>\n                <label\n                  htmlFor=\"email\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Email address\n                </label>\n                <div className=\"mt-1\">\n                  <input\n                    {...register('email')}\n                    type=\"email\"\n                    className=\"shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                    placeholder=\"member@example.com\"\n                  />\n                </div>\n                {errors.email && (\n                  <p className=\"mt-2 text-sm text-red-600\">\n                    {errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label\n                  htmlFor=\"role\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Role\n                </label>\n                <div className=\"mt-1\">\n                  <select\n                    {...register('role')}\n                    className=\"shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                  >\n                    <option value=\"\">Select a role</option>\n                    <option value=\"MEMBER\">Member</option>\n                    <option value=\"ADMIN\">Admin</option>\n                    <option value=\"OWNER\">Owner</option>\n                  </select>\n                </div>\n                {errors.role && (\n                  <p className=\"mt-2 text-sm text-red-600\">\n                    {errors.role.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex justify-end space-x-3\">\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setShowInviteForm(false)\n                    reset()\n                  }}\n                  className=\"bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  disabled={isInviting}\n                  className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isInviting ? 'Sending...' : 'Send Invitation'}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {/* Create Organization Modal */}\n      <CreateOrganizationModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n      />\n    </div>\n  )\n}\n\nexport default OrganizationPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/organizations/OrganizationsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":12,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingCard' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addItem' is assigned a value but never used.","line":41,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":12},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":44,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":44,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1838,1840],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":95,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":98,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ id: string; name: string; plan: \"FREE\" | \"PRO\" | \"ENTERPRISE\"; status: \"ACTIVE\" | \"SUSPENDED\" | \"DELETED\"; maxUsers: number; currentUsers: number; createdAt: string; updatedAt: string; billingEmail?: string | undefined; }`.","line":260,"column":13,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":260,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":264,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":264,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":265,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":265,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":276,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":278,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rollbackData' is defined but never used.","line":287,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":44}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  BuildingOfficeIcon,\n  PlusIcon,\n  UserGroupIcon,\n  CalendarDaysIcon,\n} from '@heroicons/react/24/outline'\nimport { format } from 'date-fns'\n\nimport { useGetUserOrganizationsQuery, useCreateOrganizationMutation } from '../../store/api/organizationApi'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport { LoadingCard, ListSkeleton, LoadingButton } from '../../components/ui/LoadingStates'\nimport { ApiErrorDisplay } from '../../components/ui/ErrorStates'\nimport { Button } from '../../components/ui/button'\nimport CreateOrganizationModal from '../../components/organizations/CreateOrganizationModal'\nimport { useCrossComponentSync } from '../../hooks/useDataSync'\nimport { useOptimisticList } from '../../hooks/useOptimisticUpdates'\nimport { useOptimisticNotifications } from '../../hooks/useNotificationIntegration'\nimport { OptimisticListItem, OptimisticOverlay } from '../../components/ui/OptimisticComponents'\nimport { getIconClasses, getCardClasses } from '../../lib/theme'\nimport { logger } from '../../utils/logger'\nimport type { Organization } from '../../types/api'\n\nconst OrganizationsPage: React.FC = () => {\n  const {\n    data: organizations,\n    isLoading,\n    error,\n    refetch,\n  } = useGetUserOrganizationsQuery()\n  const [createOrganization] = useCreateOrganizationMutation()\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\n  const { syncOrganizationData } = useCrossComponentSync()\n  const optimisticNotifications = useOptimisticNotifications<Organization>()\n\n  // Optimistic updates for organizations list\n  const {\n    data: optimisticOrganizations,\n    setData,\n    addItem,\n    hasOptimisticUpdates,\n    optimisticUpdates\n  } = useOptimisticList<Organization>(organizations || [])\n\n  // Update optimistic list when server data changes\n  useEffect(() => {\n    if (organizations) {\n      setData(organizations)\n    }\n  }, [organizations, setData])\n\n  const pendingUpdates = optimisticUpdates.filter(u => u.status === 'pending')\n  const failedUpdates = optimisticUpdates.filter(u => u.status === 'failed')\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Header Skeleton */}\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <div className=\"h-8 bg-gray-200 rounded animate-pulse w-48 mb-2\" />\n              <div className=\"h-4 bg-gray-200 rounded animate-pulse w-64\" />\n            </div>\n            <div className=\"h-10 bg-gray-200 rounded animate-pulse w-36\" />\n          </div>\n        </div>\n\n        {/* Organizations List Skeleton */}\n        <ListSkeleton items={3} />\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                <span className=\"gradient-brand bg-clip-text text-transparent\">Organizations</span>\n              </h1>\n              <p className=\"text-sm text-gray-600\">\n                Manage your organization memberships and create new organizations.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <ApiErrorDisplay\n          error={error}\n          onRetry={async () => {\n            await refetch()\n            await syncOrganizationData()\n          }}\n          fallbackMessage=\"Failed to load organizations. Please try again.\"\n        />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              <span className=\"gradient-brand bg-clip-text text-transparent\">Organizations</span>\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              Manage your organization memberships and create new organizations.\n            </p>\n          </div>\n          <LoadingButton\n            onClick={() => setIsCreateModalOpen(true)}\n            variant=\"primary\"\n            size=\"md\"\n          >\n            <PlusIcon className={getIconClasses('sm')} />\n            New Organization\n          </LoadingButton>\n        </div>\n      </div>\n\n      {/* Optimistic Updates Overlay */}\n      <OptimisticOverlay\n        isActive={hasOptimisticUpdates}\n        pendingCount={pendingUpdates.length}\n        failedCount={failedUpdates.length}\n      />\n\n      {/* Organizations List */}\n      {optimisticOrganizations && optimisticOrganizations.length > 0 ? (\n        <div className=\"grid gap-4\">\n          {optimisticOrganizations.map(organization => {\n            // Find the corresponding optimistic update\n            const optimisticUpdate = optimisticUpdates.find(update =>\n              update.data.type === 'add' && update.data.item.id === organization.id\n            )\n            const status = optimisticUpdate?.status\n\n            const OrganizationCard = (\n              <div className={`${getCardClasses('elevated')} group-hover:shadow-xl transition-all duration-200`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-8 h-8 gradient-brand bg-[#2563eb] rounded-lg flex items-center justify-center\">\n                        <BuildingOfficeIcon className={`${getIconClasses('sm')} text-white`} />\n                      </div>\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <h3 className=\"text-base font-semibold text-gray-900 truncate\">\n                          {organization.name}\n                        </h3>\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800\">\n                          /{organization.slug}\n                        </span>\n                      </div>\n                      <div className=\"mt-1 flex items-center gap-1.5 text-xs text-gray-500\">\n                        <CalendarDaysIcon className={getIconClasses('xs')} />\n                        <span>\n                          Created {format(new Date(organization.createdAt), 'MMM d, yyyy')}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-1.5 text-xs text-gray-500\">\n                      <UserGroupIcon className={getIconClasses('xs')} />\n                      <span>Members</span>\n                    </div>\n                    <div className=\"text-gray-400 group-hover:text-gray-600 transition-colors\">\n                      <svg\n                        className={getIconClasses('sm')}\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M13 7l5 5m0 0l-5 5m5-5H6\"\n                        />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n\n            if (status) {\n              // This is an optimistic update, wrap with optimistic indicator\n              return (\n                <OptimisticListItem\n                  key={organization.id}\n                  status={status}\n                  className=\"p-0 border-0 bg-transparent\"\n                >\n                  {status === 'confirmed' || !status ? (\n                    <Link\n                      to={`/organizations/${organization.slug}`}\n                      className=\"block group transition-transform hover:scale-[1.02]\"\n                    >\n                      {OrganizationCard}\n                    </Link>\n                  ) : (\n                    OrganizationCard\n                  )}\n                </OptimisticListItem>\n              )\n            } else {\n              // This is confirmed data, render normally with link\n              return (\n                <Link\n                  key={organization.id}\n                  to={`/organizations/${organization.slug}`}\n                  className=\"block group transition-transform hover:scale-[1.02]\"\n                >\n                  {OrganizationCard}\n                </Link>\n              )\n            }\n          })}\n        </div>\n      ) : (\n        <div className={`${getCardClasses('subtle')} text-center py-8`}>\n          <div className=\"inline-flex items-center justify-center w-12 h-12 bg-gray-200 rounded-lg mb-4\">\n            <BuildingOfficeIcon className={`${getIconClasses('lg')} text-gray-500`} />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            No organizations yet\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-4 max-w-md mx-auto\">\n            Get started by creating your first organization and begin managing your team.\n          </p>\n          <LoadingButton\n            onClick={() => setIsCreateModalOpen(true)}\n            variant=\"primary\"\n            size=\"md\"\n          >\n            <PlusIcon className={getIconClasses('sm')} />\n            Create Your First Organization\n          </LoadingButton>\n        </div>\n      )}\n\n      {/* Create Organization Modal */}\n      <CreateOrganizationModal\n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n        onOptimisticCreate={async (optimisticOrg) => {\n          // Use enhanced notification system with optimistic updates\n          return optimisticNotifications.addOptimisticUpdateWithNotifications(\n            optimisticOrg,\n            async (org) => {\n              const result = await createOrganization({\n                name: org.name,\n                slug: org.slug,\n                settings: org.settings\n              }).unwrap()\n\n              // Refresh the entire list to get latest data\n              await refetch()\n              await syncOrganizationData()\n\n              return result\n            },\n            {\n              loadingTitle: 'Creating organization...',\n              loadingMessage: `Setting up \"${optimisticOrg.name}\"`,\n              successTitle: 'Organization created!',\n              successMessage: `\"${optimisticOrg.name}\" is ready to use`,\n              errorTitle: 'Failed to create organization',\n              showLoadingNotification: true,\n              showSuccessNotification: true,\n              autoCloseLoading: true,\n              onSuccess: () => {\n                // Organization will appear optimistically in the list\n                // and be confirmed when the server responds\n              },\n              onError: (error, rollbackData) => {\n                logger.error('Organization creation failed:', error)\n                // The optimistic item will be marked as failed\n                // and the user can retry or undo\n              }\n            }\n          )\n        }}\n      />\n    </div>\n  )\n}\n\nexport default OrganizationsPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/payments/PaymentsPage.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":1,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react'\nimport { describe, it, expect, vi } from 'vitest'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport PaymentsPage from './PaymentsPage'\n\nimport {\n  createMockStore,\n  type PartialTestState,\n} from '@/test/utils/mockStore'\nimport { createMockUser } from '@/test/fixtures/users'\n\n// Mock API hooks\nvi.mock('../../store/api/paymentApi', () => ({\n  useGetPaymentsQuery: () => ({\n    data: {\n      payments: [\n        {\n          id: '1',\n          amount: 100.00,\n          currency: 'usd',\n          status: 'succeeded',\n          createdAt: '2024-01-01T00:00:00Z',\n        }\n      ]\n    },\n    isLoading: false,\n    error: null,\n  }),\n  useGetOrganizationPaymentsQuery: () => ({\n    data: [\n      {\n        id: '1',\n        amount: 100.00,\n        currency: 'usd',\n        status: 'succeeded',\n        createdAt: '2024-01-01T00:00:00Z',\n      }\n    ],\n    isLoading: false,\n    error: null,\n  }),\n  useGetPaymentMethodsQuery: () => ({\n    data: {\n      paymentMethods: [\n        {\n          id: '1',\n          type: 'card',\n          card: { last4: '4242', brand: 'visa' },\n          isDefault: true,\n        }\n      ]\n    },\n    isLoading: false,\n    error: null,\n  }),\n  useGetPaymentStatisticsQuery: () => ({\n    data: {\n      totalAmount: 1000,\n      totalSuccessfulPayments: 10,\n      failedPayments: 2,\n    },\n    isLoading: false,\n    error: null,\n  }),\n}))\n\nvi.mock('../../store/api/organizationApi', () => ({\n  useGetUserOrganizationsQuery: () => ({\n    data: {\n      organizations: [\n        { id: '1', name: 'Test Org', slug: 'test-org' }\n      ]\n    },\n    isLoading: false,\n    error: null,\n  }),\n}))\n\n// Mock components\nvi.mock('../../components/ui/LoadingSpinner', () => ({\n  default: () => <div data-testid=\"loading-spinner\">Loading...</div>,\n}))\n\nconst renderWithProviders = (\n  component: React.ReactElement,\n  initialState: PartialTestState = {}\n) => {\n  const store = createMockStore(initialState)\n  return render(\n    <Provider store={store}>\n      <BrowserRouter>{component}</BrowserRouter>\n    </Provider>\n  )\n}\n\ndescribe('PaymentsPage', () => {\n  it('should render without errors', () => {\n    renderWithProviders(<PaymentsPage />)\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should render for authenticated user', () => {\n    renderWithProviders(<PaymentsPage />, {\n      auth: {\n        isAuthenticated: true,\n        user: createMockUser(),\n      },\n    })\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle loading states', () => {\n    renderWithProviders(<PaymentsPage />, {\n      ui: { loading: { global: true } }\n    })\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle payment data', () => {\n    renderWithProviders(<PaymentsPage />)\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle payment method management', () => {\n    renderWithProviders(<PaymentsPage />, {\n      ui: {\n        modals: { isPaymentMethodModalOpen: true }\n      }\n    })\n    expect(document.body).toBeInTheDocument()\n  })\n\n  it('should handle empty payments state', () => {\n    renderWithProviders(<PaymentsPage />)\n    expect(document.body).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/payments/PaymentsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":16,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":54,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":54,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1932,1934],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'statisticsError' is assigned a value but never used.","line":60,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":62,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":62,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2119,2121],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":76,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":58},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":77,"column":68,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":77,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2507,2642],"text":"(payment.description?.toLowerCase().includes(searchLower) ??\n          payment.stripePaymentIntentId.toLowerCase().includes(searchLower))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toLowerCase on an `error` typed value.","line":78,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":78,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":63},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":78,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":78,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2643,2645],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":144,"column":13,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":144,"endColumn":24},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":173,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":177,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":272,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":272,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8344,8346],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":342,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":342,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11265,11267],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":357,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":357,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .substring on an `error` typed value.","line":357,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":357,"endColumn":63}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react'\nimport {\n  CreditCardIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n} from '@heroicons/react/24/outline'\nimport { format } from 'date-fns'\nimport { clsx } from 'clsx'\n\nimport { useGetUserOrganizationsQuery } from '../../store/api/organizationApi'\nimport {\n  useGetOrganizationPaymentsQuery,\n  useGetPaymentStatisticsQuery,\n} from '../../store/api/paymentApi'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport { LoadingCard, TableSkeleton, LoadingButton } from '../../components/ui/LoadingStates'\nimport { ApiErrorDisplay, EmptyState } from '../../components/ui/ErrorStates'\nimport { useCrossComponentSync } from '../../hooks/useDataSync'\nimport {\n  SearchAndFilterBar,\n  FilterDropdown,\n  DateRangeFilter,\n  ResultsCounter\n} from '../../components/ui/SearchAndFilter'\nimport PaymentMethodsModal from '../../components/payments/PaymentMethodsModal'\nimport PageHeader from '../../components/ui/PageHeader'\nimport StatsCard from '../../components/ui/StatsCard'\n\nconst PaymentsPage: React.FC = () => {\n  const [showPaymentMethods, setShowPaymentMethods] = useState(false)\n\n  // Search and filter state\n  const [searchQuery, setSearchQuery] = useState('')\n  const [statusFilter, setStatusFilter] = useState<string[]>([])\n  const [dateRange, setDateRange] = useState({ start: '', end: '' })\n\n  const { data: organizations, isLoading: orgsLoading } =\n    useGetUserOrganizationsQuery()\n\n  // Get the primary organization\n  const primaryOrg = organizations?.[0]\n\n  const headerDescription = 'View your payment history and manage payment methods.'\n  const renderHeader = (actions?: React.ReactNode) => (\n    <PageHeader title=\"Payments\" description={headerDescription} actions={actions} />\n  )\n\n  const {\n    data: payments,\n    isLoading: paymentsLoading,\n    error: paymentsError,\n    refetch: refetchPayments\n  } = useGetOrganizationPaymentsQuery(primaryOrg?.id || '', {\n      skip: !primaryOrg?.id,\n    })\n\n  const {\n    data: statistics,\n    error: statisticsError,\n    refetch: refetchStatistics\n  } = useGetPaymentStatisticsQuery(primaryOrg?.id || '', {\n      skip: !primaryOrg?.id,\n    })\n\n  const { syncPaymentData } = useCrossComponentSync()\n\n  // Filter and search payments\n  const filteredPayments = useMemo(() => {\n    if (!payments) return []\n\n    return payments.filter(payment => {\n      // Search filter\n      if (searchQuery) {\n        const searchLower = searchQuery.toLowerCase()\n        const matchesSearch =\n          payment.description?.toLowerCase().includes(searchLower) ||\n          payment.stripePaymentIntentId.toLowerCase().includes(searchLower) ||\n          payment.amount.toString().includes(searchQuery)\n\n        if (!matchesSearch) return false\n      }\n\n      // Status filter\n      if (statusFilter.length > 0 && !statusFilter.includes(payment.status)) {\n        return false\n      }\n\n      // Date range filter\n      if (dateRange.start || dateRange.end) {\n        const paymentDate = new Date(payment.createdAt)\n        const startDate = dateRange.start ? new Date(dateRange.start) : null\n        const endDate = dateRange.end ? new Date(dateRange.end) : null\n\n        if (startDate && paymentDate < startDate) return false\n        if (endDate && paymentDate > endDate) return false\n      }\n\n      return true\n    })\n  }, [payments, searchQuery, statusFilter, dateRange])\n\n  // Status options for filter\n  const statusOptions = useMemo(() => {\n    if (!payments) return []\n\n    const statusCounts = payments.reduce((acc, payment) => {\n      acc[payment.status] = (acc[payment.status] || 0) + 1\n      return acc\n    }, {} as Record<string, number>)\n\n    return Object.entries(statusCounts).map(([status, count]) => ({\n      label: status,\n      value: status,\n      count,\n    }))\n  }, [payments])\n\n  if (orgsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <LoadingCard\n          title=\"Loading Organizations\"\n          message=\"Fetching your organization data...\"\n        />\n      </div>\n    )\n  }\n\n  if (paymentsLoading && !payments) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Header Skeleton */}\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0 space-y-2\">\n            <div className=\"h-8 bg-gray-200 rounded animate-pulse w-48\" />\n            <div className=\"h-4 bg-gray-200 rounded animate-pulse w-64\" />\n          </div>\n          <div className=\"h-10 bg-gray-200 rounded animate-pulse w-32\" />\n        </div>\n\n        {/* Statistics Skeleton */}\n        <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-3\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"bg-white overflow-hidden shadow rounded-lg animate-pulse\">\n              <div className=\"px-4 py-5 sm:p-6\">\n                <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\" />\n                <div className=\"h-8 bg-gray-200 rounded w-16\" />\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Table Skeleton */}\n        <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n          <div className=\"px-4 py-5 sm:px-6 border-b border-gray-200\">\n            <div className=\"h-6 bg-gray-200 rounded animate-pulse w-32\" />\n          </div>\n          <TableSkeleton rows={5} columns={5} />\n        </div>\n      </div>\n    )\n  }\n\n  // Error handling for payments data\n  if (paymentsError) {\n    return (\n      <div className=\"space-y-6\">\n        {renderHeader()}\n\n        <ApiErrorDisplay\n          error={paymentsError}\n          onRetry={async () => {\n            await refetchPayments()\n            await refetchStatistics()\n            await syncPaymentData()\n          }}\n          fallbackMessage=\"Failed to load payment data. Please try again.\"\n        />\n      </div>\n    )\n  }\n\n  if (!primaryOrg) {\n    return (\n      <div className=\"space-y-6\">\n        {renderHeader()}\n\n        <EmptyState\n          title=\"No organization found\"\n          message=\"Please create an organization first to manage payments.\"\n          action={{\n            label: \"Go to Organizations\",\n            onClick: () => window.location.href = '/organizations'\n          }}\n        />\n      </div>\n    )\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'SUCCEEDED':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />\n      case 'FAILED':\n        return <XCircleIcon className=\"h-5 w-5 text-red-500\" />\n      case 'PENDING':\n      case 'PROCESSING':\n        return <ClockIcon className=\"h-5 w-5 text-yellow-500\" />\n      default:\n        return <ClockIcon className=\"h-5 w-5 text-gray-400\" />\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusStyles = {\n      SUCCEEDED: 'bg-green-100 text-green-800',\n      FAILED: 'bg-red-100 text-red-800',\n      PENDING: 'bg-yellow-100 text-yellow-800',\n      PROCESSING: 'bg-blue-100 text-blue-800',\n      CANCELED: 'bg-gray-100 text-gray-800',\n    }\n\n    return (\n      <span\n        className={clsx(\n          'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',\n          statusStyles[status as keyof typeof statusStyles] ||\n            'bg-gray-100 text-gray-800'\n        )}\n      >\n        {status}\n      </span>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {renderHeader(\n        <LoadingButton\n          onClick={() => setShowPaymentMethods(true)}\n          variant=\"primary\"\n          size=\"md\"\n        >\n          <CreditCardIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n          Payment Methods\n        </LoadingButton>\n      )}\n\n      {/* Search and Filter Bar */}\n      <SearchAndFilterBar\n        searchValue={searchQuery}\n        onSearchChange={setSearchQuery}\n        searchPlaceholder=\"Search payments by description, amount, or ID...\"\n        filters={\n          <>\n            <FilterDropdown\n              label=\"Status\"\n              options={statusOptions}\n              selectedValues={statusFilter}\n              onChange={setStatusFilter}\n            />\n            <DateRangeFilter\n              startDate={dateRange.start}\n              endDate={dateRange.end}\n              onChange={(start, end) => setDateRange({ start, end })}\n            />\n          </>\n        }\n        resultsCount={\n          <ResultsCounter\n            total={payments?.length || 0}\n            filtered={searchQuery || statusFilter.length > 0 || dateRange.start || dateRange.end ? filteredPayments.length : undefined}\n            query={searchQuery}\n          />\n        }\n      />\n\n      {/* Statistics */}\n      {statistics && (\n        <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-3\">\n          <StatsCard\n            title=\"Total Payments\"\n            value={statistics.totalSuccessfulPayments.toLocaleString()}\n          />\n          <StatsCard\n            title=\"Total Amount\"\n            value={statistics.totalAmount.toLocaleString('en-US', {\n              style: 'currency',\n              currency: 'USD',\n              minimumFractionDigits: 2,\n            })}\n          />\n          <StatsCard\n            title=\"Recent (30 days)\"\n            value={statistics.recentAmount.toLocaleString('en-US', {\n              style: 'currency',\n              currency: 'USD',\n              minimumFractionDigits: 2,\n            })}\n          />\n        </div>\n      )}\n\n      {/* Payments Table */}\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n        <div className=\"px-4 py-5 sm:px-6 border-b border-gray-200\">\n          <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n            Payment History\n          </h3>\n        </div>\n\n        {filteredPayments && filteredPayments.length > 0 ? (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Description\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Amount\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Payment ID\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredPayments.map(payment => (\n                  <tr key={payment.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {format(new Date(payment.createdAt), 'MMM d, yyyy')}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {payment.description || 'Payment'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${payment.amount.toFixed(2)}{' '}\n                      {payment.currency.toUpperCase()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        {getStatusIcon(payment.status)}\n                        <span className=\"ml-2\">\n                          {getStatusBadge(payment.status)}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 font-mono\">\n                      {payment.stripePaymentIntentId.substring(0, 20)}...\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div className=\"p-12\">\n            <EmptyState\n              title=\"No payments found\"\n              message={\n                searchQuery || statusFilter.length > 0 || dateRange.start || dateRange.end\n                  ? \"No payments match your current filters. Try adjusting your search criteria.\"\n                  : \"Your payment history will appear here once you make a payment.\"\n              }\n              action={{\n                label: \"Set up Payment Methods\",\n                onClick: () => setShowPaymentMethods(true)\n              }}\n              showRetry={false}\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Payment Methods Modal */}\n      <PaymentMethodsModal\n        isOpen={showPaymentMethods}\n        onClose={() => setShowPaymentMethods(false)}\n        organizationId={primaryOrg.id}\n      />\n    </div>\n  )\n}\n\nexport default PaymentsPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/settings/SettingsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":19,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":71,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":71,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":71,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2313,2315],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'prefs.timezone ?? 'UTC'' will use Object's default stringification format ('[object Object]') when stringified.","line":73,"column":30,"nodeType":"LogicalExpression","messageId":"baseToString","endLine":73,"endColumn":53},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'prefs.language ?? 'en'' will use Object's default stringification format ('[object Object]') when stringified.","line":74,"column":30,"nodeType":"LogicalExpression","messageId":"baseToString","endLine":74,"endColumn":52},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":103,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":105,"endColumn":13},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":103,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":103,"endColumn":31,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3085,3091],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":117,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":117,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3425,3427],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3469,3471],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":119,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":119,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3522,3524],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":127,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":127,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":132,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":132,"endColumn":16},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":174,"column":28,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":174,"endColumn":52},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":299,"column":30,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":299,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":417,"column":38,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":417,"endColumn":117},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":417,"column":38,"nodeType":"Identifier","messageId":"unsafeCall","endLine":417,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":452,"column":38,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":452,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":452,"column":38,"nodeType":"Identifier","messageId":"unsafeCall","endLine":452,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":475,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":475,"endColumn":36}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport {\n  UserCircleIcon,\n  Cog6ToothIcon,\n  BellIcon,\n  ShieldCheckIcon,\n  KeyIcon,\n  TrashIcon,\n} from '@heroicons/react/24/outline'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\n\nimport { logger } from '../../utils/logger'\nimport {\n  useGetCurrentUserQuery,\n  useUpdateProfileMutation,\n} from '../../store/api/userApi'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport { LoadingCard, LoadingButton } from '../../components/ui/LoadingStates'\nimport { ApiErrorDisplay } from '../../components/ui/ErrorStates'\nimport { parseApiError } from '../../utils/apiError'\nimport { useCrossComponentSync } from '../../hooks/useDataSync'\nimport { useNotifications } from '../../components/ui/FeedbackSystem'\nimport PageHeader from '../../components/ui/PageHeader'\n\nconst profileSchema = z.object({\n  name: z\n    .string()\n    .min(1, 'Name is required')\n    .max(100, 'Name must be less than 100 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  timezone: z.string().optional(),\n  language: z.string().optional(),\n  notifications: z\n    .object({\n      email: z.boolean(),\n      push: z.boolean(),\n      sms: z.boolean(),\n    })\n    .optional(),\n})\n\ntype ProfileForm = z.infer<typeof profileSchema>\n\nconst SettingsPage: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('profile')\n  const { data: profile, isLoading, error } = useGetCurrentUserQuery()\n  const [updateProfile, { isLoading: isUpdating }] = useUpdateProfileMutation()\n  const { syncUserData } = useCrossComponentSync()\n  const { showSuccess, showError } = useNotifications()\n\n  const headerDescription = 'Manage your account settings and preferences.'\n  const renderHeader = () => (\n    <PageHeader title=\"Settings\" description={headerDescription} />\n  )\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<ProfileForm>({\n    resolver: zodResolver(profileSchema),\n    values: profile\n      ? (() => {\n          const prefs = (profile.preferences ?? {}) as Record<string, unknown>\n          const notif = (prefs.notifications as\n            | Record<string, unknown>\n            | undefined) ?? {}\n          return {\n            name: profile.name || '',\n            email: profile.email || '',\n            timezone: String(prefs.timezone ?? 'UTC'),\n            language: String(prefs.language ?? 'en'),\n            notifications: {\n              email: Boolean(notif.email ?? true),\n              push: Boolean(notif.push ?? true),\n              sms: Boolean(notif.sms ?? false),\n            },\n          }\n        })()\n      : undefined,\n  })\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <LoadingCard\n          title=\"Loading Settings\"\n          message=\"Fetching your profile and preferences...\"\n        />\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        {renderHeader()}\n\n        <ApiErrorDisplay\n          error={error}\n          onRetry={async () => {\n            window.location.reload()\n          }}\n          fallbackMessage=\"Failed to load settings. Please try again.\"\n        />\n      </div>\n    )\n  }\n\n  const onSubmit = async (data: ProfileForm) => {\n    try {\n      await updateProfile({\n        name: data.name,\n        preferences: {\n          timezone: data.timezone || 'UTC',\n          language: data.language || 'en',\n          notifications: data.notifications || {\n            email: true,\n            push: true,\n            sms: false,\n          },\n        },\n      }).unwrap()\n\n      showSuccess('Profile Updated', 'Your profile has been updated successfully.')\n      await syncUserData()\n    } catch (err) {\n      const parsed = parseApiError(err)\n      logger.error('Failed to update profile:', parsed)\n      showError('Update Failed', parsed.message || 'Failed to update profile. Please try again.')\n    }\n  }\n\n  const tabs = [\n    { id: 'profile', name: 'Profile', icon: UserCircleIcon },\n    { id: 'notifications', name: 'Notifications', icon: BellIcon },\n    { id: 'security', name: 'Security', icon: ShieldCheckIcon },\n    { id: 'account', name: 'Account', icon: Cog6ToothIcon },\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      {renderHeader()}\n\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n        {/* Tabs */}\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8 px-6\" aria-label=\"Tabs\">\n            {tabs.map(tab => {\n              const Icon = tab.icon\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`${\n                    activeTab === tab.id\n                      ? 'border-primary-500 text-primary-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2`}\n                >\n                  <Icon className=\"h-5 w-5\" />\n                  <span>{tab.name}</span>\n                </button>\n              )\n            })}\n          </nav>\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"p-6\">\n          {activeTab === 'profile' && (\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                  Profile Information\n                </h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Update your personal information and preferences.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div>\n                  <label\n                    htmlFor=\"name\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Full Name\n                  </label>\n                  <div className=\"mt-1\">\n                    <input\n                      {...register('name')}\n                      type=\"text\"\n                      className=\"shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                      placeholder=\"Your full name\"\n                    />\n                  </div>\n                  {errors.name && (\n                    <p className=\"mt-2 text-sm text-red-600\">\n                      {errors.name.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <label\n                    htmlFor=\"email\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Email Address\n                  </label>\n                  <div className=\"mt-1\">\n                    <input\n                      {...register('email')}\n                      type=\"email\"\n                      disabled\n                      className=\"shadow-sm bg-gray-50 focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                      placeholder=\"your@email.com\"\n                    />\n                  </div>\n                  <p className=\"mt-2 text-sm text-gray-500\">\n                    Email cannot be changed. Contact support if you need to\n                    update it.\n                  </p>\n                </div>\n\n                <div>\n                  <label\n                    htmlFor=\"timezone\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Timezone\n                  </label>\n                  <div className=\"mt-1\">\n                    <select\n                      {...register('timezone')}\n                      className=\"shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                    >\n                      <option value=\"UTC\">UTC</option>\n                      <option value=\"America/New_York\">Eastern Time</option>\n                      <option value=\"America/Chicago\">Central Time</option>\n                      <option value=\"America/Denver\">Mountain Time</option>\n                      <option value=\"America/Los_Angeles\">Pacific Time</option>\n                      <option value=\"Europe/London\">London</option>\n                      <option value=\"Europe/Paris\">Paris</option>\n                      <option value=\"Asia/Tokyo\">Tokyo</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <label\n                    htmlFor=\"language\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Language\n                  </label>\n                  <div className=\"mt-1\">\n                    <select\n                      {...register('language')}\n                      className=\"shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                    >\n                      <option value=\"en\">English</option>\n                      <option value=\"es\">Spanish</option>\n                      <option value=\"fr\">French</option>\n                      <option value=\"de\">German</option>\n                      <option value=\"ja\">Japanese</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <LoadingButton\n                  type=\"submit\"\n                  isLoading={isUpdating}\n                  variant=\"primary\"\n                  size=\"md\"\n                >\n                  Save Changes\n                </LoadingButton>\n              </div>\n            </form>\n          )}\n\n          {activeTab === 'notifications' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                  Notification Preferences\n                </h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Choose how you want to be notified about important updates.\n                </p>\n              </div>\n\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <label\n                        htmlFor=\"email-notifications\"\n                        className=\"text-sm font-medium text-gray-700\"\n                      >\n                        Email Notifications\n                      </label>\n                      <p className=\"text-sm text-gray-500\">\n                        Receive notifications via email about account activity.\n                      </p>\n                    </div>\n                    <input\n                      {...register('notifications.email')}\n                      type=\"checkbox\"\n                      className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <label\n                        htmlFor=\"push-notifications\"\n                        className=\"text-sm font-medium text-gray-700\"\n                      >\n                        Push Notifications\n                      </label>\n                      <p className=\"text-sm text-gray-500\">\n                        Receive push notifications in your browser.\n                      </p>\n                    </div>\n                    <input\n                      {...register('notifications.push')}\n                      type=\"checkbox\"\n                      className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <label\n                        htmlFor=\"sms-notifications\"\n                        className=\"text-sm font-medium text-gray-700\"\n                      >\n                        SMS Notifications\n                      </label>\n                      <p className=\"text-sm text-gray-500\">\n                        Receive text messages for critical updates.\n                      </p>\n                    </div>\n                    <input\n                      {...register('notifications.sms')}\n                      type=\"checkbox\"\n                      className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <LoadingButton\n                    type=\"submit\"\n                    isLoading={isUpdating}\n                    variant=\"primary\"\n                    size=\"md\"\n                  >\n                    Save Changes\n                  </LoadingButton>\n                </div>\n              </form>\n            </div>\n          )}\n\n          {activeTab === 'security' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                  Security Settings\n                </h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Manage your account security and authentication methods.\n                </p>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"flex items-center\">\n                    <KeyIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                    <div className=\"flex-1\">\n                      <h4 className=\"text-sm font-medium text-gray-900\">\n                        OAuth Authentication\n                      </h4>\n                      <p className=\"text-sm text-gray-500\">\n                        You&apos;re signed in with OAuth. Manage your authentication\n                        providers in your OAuth provider settings.\n                      </p>\n                    </div>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Active\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"flex items-center\">\n                    <ShieldCheckIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                    <div className=\"flex-1\">\n                      <h4 className=\"text-sm font-medium text-gray-900\">\n                        Two-Factor Authentication\n                      </h4>\n                      <p className=\"text-sm text-gray-500\">\n                        Add an extra layer of security to your account.\n                      </p>\n                    </div>\n                    <LoadingButton\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      onClick={() => showError('Not Available', 'Two-factor authentication is not yet implemented.')}\n                    >\n                      Enable\n                    </LoadingButton>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'account' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                  Account Management\n                </h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Manage your account settings and data.\n                </p>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-900\">\n                        Download Account Data\n                      </h4>\n                      <p className=\"text-sm text-gray-500\">\n                        Export all your account data and information.\n                      </p>\n                    </div>\n                    <LoadingButton\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      onClick={() => showError('Not Available', 'Data export is not yet implemented.')}\n                    >\n                      Export Data\n                    </LoadingButton>\n                  </div>\n                </div>\n\n                <div className=\"bg-red-50 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"text-sm font-medium text-red-900\">\n                        Delete Account\n                      </h4>\n                      <p className=\"text-sm text-red-700\">\n                        Permanently delete your account and all associated data.\n                        This action cannot be undone.\n                      </p>\n                    </div>\n                    <LoadingButton\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => {\n                        if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {\n                          showError('Not Available', 'Account deletion is not yet implemented. Please contact support.')\n                        }\n                      }}\n                    >\n                      <TrashIcon className=\"h-4 w-4 mr-1\" />\n                      Delete\n                    </LoadingButton>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SettingsPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/pages/subscription/SubscriptionPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DocumentTextIcon' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":20,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'plansError' is assigned a value but never used.","line":33,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":50},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":49,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":49,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2015,2017],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'invoicesError' is assigned a value but never used.","line":53,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":47},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":54,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":54,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2160,2162],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":94,"column":15,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":94,"endColumn":26},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":122,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":124,"endColumn":13},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":122,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":122,"endColumn":31,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4307,4313],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":139,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":142,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":184,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":184,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":189,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":189,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":202,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":202,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":208,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":208,"endColumn":16},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":262,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":262,"endColumn":55},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":272,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":272,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":287,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":287,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9459,9461],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport {\n  DocumentTextIcon,\n  ExclamationTriangleIcon,\n  ArrowUpIcon,\n  ReceiptRefundIcon,\n} from '@heroicons/react/24/outline'\nimport { format } from 'date-fns'\nimport { clsx } from 'clsx'\n\nimport { useGetUserOrganizationsQuery } from '../../store/api/organizationApi'\nimport { logger } from '../../utils/logger'\nimport {\n  useGetOrganizationSubscriptionQuery,\n  useGetAvailablePlansQuery,\n  useCancelSubscriptionMutation,\n  useReactivateSubscriptionMutation,\n  useGetOrganizationInvoicesQuery,\n} from '../../store/api/subscriptionApi'\nimport LoadingSpinner from '../../components/ui/LoadingSpinner'\nimport { LoadingCard, ListSkeleton, LoadingButton } from '../../components/ui/LoadingStates'\nimport { ApiErrorDisplay, EmptyState } from '../../components/ui/ErrorStates'\nimport UpgradePlanModal from '../../components/subscription/UpgradePlanModal'\nimport { useCrossComponentSync } from '../../hooks/useDataSync'\nimport { useNotifications } from '../../components/ui/FeedbackSystem'\nimport PageHeader from '../../components/ui/PageHeader'\nimport StatsCard from '../../components/ui/StatsCard'\n\nconst SubscriptionPage: React.FC = () => {\n  const [showUpgradeModal, setShowUpgradeModal] = useState(false)\n  const { data: organizations, isLoading: orgsLoading, error: orgsError } =\n    useGetUserOrganizationsQuery()\n  const { data: availablePlans, error: plansError } = useGetAvailablePlansQuery()\n  const { syncSubscriptionData, syncPaymentData } = useCrossComponentSync()\n  const { showSuccess, showError } = useNotifications()\n\n  const primaryOrg = organizations?.[0]\n\n  const headerDescription = 'Manage your subscription plan and view invoices.'\n  const renderHeader = (actions?: React.ReactNode) => (\n    <PageHeader title=\"Subscription\" description={headerDescription} actions={actions} />\n  )\n\n  const {\n    data: subscription,\n    isLoading: subLoading,\n    error: subError,\n    refetch: refetchSubscription,\n  } = useGetOrganizationSubscriptionQuery(primaryOrg?.id || '', {\n    skip: !primaryOrg?.id,\n  })\n\n  const { data: invoices, error: invoicesError } = useGetOrganizationInvoicesQuery(\n    primaryOrg?.id || '',\n    {\n      skip: !primaryOrg?.id,\n    }\n  )\n\n  const [cancelSubscription] = useCancelSubscriptionMutation()\n  const [reactivateSubscription] = useReactivateSubscriptionMutation()\n\n  const currentPlan = availablePlans?.find(p => p.id === subscription?.planId)\n\n  if (orgsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <LoadingCard\n          title=\"Loading Organizations\"\n          message=\"Fetching your organization data...\"\n        />\n      </div>\n    )\n  }\n\n  if (subLoading && !subscription) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Header Skeleton */}\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0 space-y-2\">\n            <div className=\"h-8 bg-gray-200 rounded animate-pulse w-48\" />\n            <div className=\"h-4 bg-gray-200 rounded animate-pulse w-64\" />\n          </div>\n        </div>\n\n        {/* Subscription Card Skeleton */}\n        <div className=\"bg-white shadow sm:rounded-lg animate-pulse\">\n          <div className=\"px-4 py-5 sm:px-6\">\n            <div className=\"h-6 bg-gray-200 rounded w-48 mb-2\" />\n            <div className=\"h-4 bg-gray-200 rounded w-64\" />\n          </div>\n          <div className=\"border-t border-gray-200\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"px-4 py-5 sm:px-6 border-b border-gray-100 last:border-b-0\">\n                <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\" />\n                <div className=\"h-5 bg-gray-200 rounded w-32\" />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Invoices Skeleton */}\n        <div className=\"bg-white shadow sm:rounded-lg\">\n          <div className=\"px-4 py-5 sm:px-6 border-b border-gray-200\">\n            <div className=\"h-6 bg-gray-200 rounded animate-pulse w-32\" />\n          </div>\n          <ListSkeleton items={3} />\n        </div>\n      </div>\n    )\n  }\n\n  // Error handling for organizations data\n  if (orgsError) {\n    return (\n      <div className=\"space-y-6\">\n        {renderHeader()}\n\n        <ApiErrorDisplay\n          error={orgsError}\n          onRetry={async () => {\n            window.location.reload()\n          }}\n          fallbackMessage=\"Failed to load organization data. Please try again.\"\n        />\n      </div>\n    )\n  }\n\n  // Error handling for subscription data\n  if (subError) {\n    return (\n      <div className=\"space-y-6\">\n        {renderHeader()}\n\n        <ApiErrorDisplay\n          error={subError}\n          onRetry={async () => {\n            await refetchSubscription()\n            await syncSubscriptionData()\n          }}\n          fallbackMessage=\"Failed to load subscription data. Please try again.\"\n        />\n      </div>\n    )\n  }\n\n  if (!primaryOrg) {\n    return (\n      <div className=\"space-y-6\">\n        {renderHeader()}\n\n        <EmptyState\n          title=\"No organization found\"\n          message=\"Please create an organization first to manage subscriptions.\"\n          action={{\n            label: \"Go to Organizations\",\n            onClick: () => window.location.href = '/organizations'\n          }}\n        />\n      </div>\n    )\n  }\n\n  const handleCancelSubscription = async () => {\n    if (!subscription) {return}\n\n    if (\n      !confirm(\n        'Are you sure you want to cancel your subscription? It will remain active until the end of the current billing period.'\n      )\n    ) {\n      return\n    }\n\n    try {\n      await cancelSubscription({\n        subscriptionId: subscription.id,\n        organizationId: primaryOrg.id,\n        immediate: false,\n      }).unwrap()\n\n      showSuccess('Subscription Canceled', 'Your subscription has been scheduled for cancellation at the end of the current billing period.')\n      await refetchSubscription()\n      await syncSubscriptionData()\n    } catch (error) {\n      logger.error('Failed to cancel subscription:', error)\n      showError('Failed to Cancel', 'Unable to cancel your subscription. Please try again.')\n    }\n  }\n\n  const handleReactivateSubscription = async () => {\n    if (!subscription) {return}\n\n    try {\n      await reactivateSubscription({\n        subscriptionId: subscription.id,\n        organizationId: primaryOrg.id,\n      }).unwrap()\n\n      showSuccess('Subscription Reactivated', 'Your subscription has been successfully reactivated.')\n      await refetchSubscription()\n      await syncSubscriptionData()\n      await syncPaymentData()\n    } catch (error) {\n      logger.error('Failed to reactivate subscription:', error)\n      showError('Reactivation Failed', 'Unable to reactivate your subscription. Please try again.')\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      ACTIVE: { color: 'bg-green-100 text-green-800', label: 'Active' },\n      TRIALING: { color: 'bg-blue-100 text-blue-800', label: 'Trial' },\n      PAST_DUE: { color: 'bg-red-100 text-red-800', label: 'Past Due' },\n      CANCELED: { color: 'bg-gray-100 text-gray-800', label: 'Canceled' },\n      UNPAID: { color: 'bg-red-100 text-red-800', label: 'Unpaid' },\n    }\n\n    const config = statusConfig[status as keyof typeof statusConfig] || {\n      color: 'bg-gray-100 text-gray-800',\n      label: status,\n    }\n\n    return (\n      <span\n        className={clsx(\n          'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',\n          config.color\n        )}\n      >\n        {config.label}\n      </span>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {renderHeader()}\n\n      {/* Current Subscription */}\n      {subscription ? (\n        <StatsCard\n          title=\"Current Subscription\"\n          description=\"Your subscription details and billing information.\"\n          className=\"shadow overflow-hidden sm:rounded-lg\"\n          contentClassName=\"px-4 py-5 sm:px-6\"\n          footer={(\n            <div className=\"flex justify-end space-x-3\">\n              {subscription.status === 'ACTIVE' && !subscription.cancelAt && (\n                <>\n                  <LoadingButton\n                    onClick={() => setShowUpgradeModal(true)}\n                    variant=\"primary\"\n                    size=\"md\"\n                  >\n                    <ArrowUpIcon className=\"-ml-1 mr-2 h-4 w-4\" />\n                    Change Plan\n                  </LoadingButton>\n                  <LoadingButton\n                    onClick={handleCancelSubscription}\n                    variant=\"secondary\"\n                    size=\"md\"\n                  >\n                    Cancel Subscription\n                  </LoadingButton>\n                </>\n              )}\n              {subscription.cancelAt && (\n                <LoadingButton\n                  onClick={handleReactivateSubscription}\n                  variant=\"success\"\n                  size=\"md\"\n                >\n                  Reactivate Subscription\n                </LoadingButton>\n              )}\n            </div>\n          )}\n        >\n          <div className=\"mt-4 border-t border-gray-200\">\n            <dl>\n              <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm font-medium text-gray-500\">Plan</dt>\n                <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  {currentPlan?.name || 'Unknown Plan'}\n                </dd>\n              </div>\n              <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm font-medium text-gray-500\">Status</dt>\n                <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  {getStatusBadge(subscription.status)}\n                </dd>\n              </div>\n              <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm font-medium text-gray-500\">Price</dt>\n                <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  ${currentPlan?.amount.toFixed(2)} /{' '}\n                  {currentPlan?.interval.toLowerCase()}\n                </dd>\n              </div>\n              <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm font-medium text-gray-500\">\n                  Current Period\n                </dt>\n                <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  {format(\n                    new Date(subscription.currentPeriodStart),\n                    'MMM d, yyyy'\n                  )}{' '}\n                  -{' '}\n                  {format(\n                    new Date(subscription.currentPeriodEnd),\n                    'MMM d, yyyy'\n                  )}\n                </dd>\n              </div>\n              {subscription.cancelAt && (\n                <div className=\"bg-yellow-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                  <dt className=\"text-sm font-medium text-gray-500\">\n                    <ExclamationTriangleIcon className=\"inline h-4 w-4 text-yellow-600 mr-1\" />\n                    Cancels On\n                  </dt>\n                  <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    {format(new Date(subscription.cancelAt), 'MMM d, yyyy')}\n                  </dd>\n                </div>\n              )}\n            </dl>\n          </div>\n        </StatsCard>\n      ) : (\n        <EmptyState\n          title=\"No Active Subscription\"\n          message=\"You don't have an active subscription. Choose a plan to get started and unlock all features.\"\n          action={{\n            label: \"Choose a Plan\",\n            onClick: () => setShowUpgradeModal(true)\n          }}\n          showRetry={false}\n        />\n      )}\n\n      {/* Invoices */}\n      {invoices && invoices.length > 0 && (\n        <StatsCard\n          title=\"Invoice History\"\n          className=\"shadow overflow-hidden sm:rounded-md\"\n          contentClassName=\"px-4 py-5 sm:px-6\"\n        >\n          <div className=\"mt-4 overflow-x-auto border-t border-gray-200\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Invoice Number\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Amount\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {invoices.map(invoice => (\n                  <tr key={invoice.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {invoice.invoiceNumber}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {format(new Date(invoice.createdAt), 'MMM d, yyyy')}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${invoice.totalAmount.toFixed(2)}{' '}\n                      {invoice.currency.toUpperCase()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={clsx(\n                          'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',\n                          invoice.status === 'PAID'\n                            ? 'bg-green-100 text-green-800'\n                            : invoice.status === 'OPEN'\n                              ? 'bg-yellow-100 text-yellow-800'\n                              : 'bg-gray-100 text-gray-800'\n                        )}\n                      >\n                        {invoice.status}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      <button className=\"text-primary-600 hover:text-primary-900\">\n                        <ReceiptRefundIcon className=\"h-5 w-5\" />\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </StatsCard>\n      )}\n\n      {/* Upgrade Plan Modal */}\n      <UpgradePlanModal\n        isOpen={showUpgradeModal}\n        onClose={() => setShowUpgradeModal(false)}\n        currentPlanId={subscription?.planId}\n        organizationId={primaryOrg?.id}\n        subscriptionId={subscription?.id}\n      />\n    </div>\n  )\n}\n\nexport default SubscriptionPage\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/services/analyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[154,157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[154,157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":20,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":20,"endColumn":83},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":20,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":20,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[460,462],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'sendMetrics' has no 'await' expression.","line":28,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":28,"endColumn":20,"suggestions":[{"messageId":"removeAsync","fix":{"range":[651,699],"text":"sendMetrics(metrics: any[]): void"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[678,681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[678,681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":44,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":44,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1067,1067],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1067,1067],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Analytics service for sending performance and user metrics\n */\n\ninterface AnalyticsEvent {\n  type: 'performance' | 'user_action' | 'error'\n  data: any\n  timestamp: number\n  sessionId: string\n  userId?: string\n}\n\nclass AnalyticsService {\n  private endpoint: string\n  private sessionId: string\n  private queue: AnalyticsEvent[] = []\n  private flushTimer: number | null = null\n\n  constructor() {\n    this.endpoint = import.meta.env.VITE_ANALYTICS_ENDPOINT || '/api/v1/analytics'\n    this.sessionId = this.generateSessionId()\n  }\n\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  async sendMetrics(metrics: any[]): Promise<void> {\n    const events: AnalyticsEvent[] = metrics.map(metric => ({\n      type: 'performance',\n      data: metric,\n      timestamp: Date.now(),\n      sessionId: this.sessionId\n    }))\n\n    this.queue.push(...events)\n    this.scheduleFlush()\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushTimer) return\n    \n    this.flushTimer = window.setTimeout(() => {\n      this.flush()\n      this.flushTimer = null\n    }, 1000)\n  }\n\n  private async flush(): Promise<void> {\n    if (this.queue.length === 0) return\n\n    const events = [...this.queue]\n    this.queue = []\n\n    try {\n      await fetch(this.endpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ events })\n      })\n    } catch (error) {\n      console.warn('Analytics send failed:', error)\n      // Re-queue events for retry\n      this.queue.unshift(...events)\n    }\n  }\n}\n\nexport const analyticsService = new AnalyticsService()\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/analyticsApi.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":24,"fix":{"range":[430,430],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnalyticsQuery' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":47,"endColumn":65},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":47,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":47,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1171,1173],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":198,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":198,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5514,5516],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":199,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":199,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5558,5560],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":318,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":318,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9416,9418],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":319,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":319,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9460,9462],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":423,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":423,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12854,12856],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":424,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":424,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12898,12900],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":719,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":719,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21587,21590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21587,21590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":720,"column":59,"nodeType":"Property","messageId":"anyAssignment","endLine":720,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":723,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":723,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21771,21774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21771,21774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `RootState<{ getMetric: QueryDefinition<{ metricId: MetricId; }, BaseQueryFn, \"Metric\" | \"MetricList\" | \"MetricData\" | \"Dashboard\" | \"DashboardList\" | \"Report\" | \"ReportList\" | \"Insight\" | \"AnalyticsQuery\" | \"AnalyticsStream\" | \"AnalyticsConfiguration\", Metric, \"analyticsApi\", unknown>; ... 31 more ...; getAnalyticsH...`.","line":724,"column":66,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":724,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `RootState<{ getMetric: QueryDefinition<{ metricId: MetricId; }, BaseQueryFn, \"Metric\" | \"MetricList\" | \"MetricData\" | \"Dashboard\" | \"DashboardList\" | \"Report\" | \"ReportList\" | \"Insight\" | \"AnalyticsQuery\" | \"AnalyticsStream\" | \"AnalyticsConfiguration\", Metric, \"analyticsApi\", unknown>; ... 31 more ...; getAnalyticsH...`.","line":725,"column":83,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":725,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `RootState<{ getMetric: QueryDefinition<{ metricId: MetricId; }, BaseQueryFn, \"Metric\" | \"MetricList\" | \"MetricData\" | \"Dashboard\" | \"DashboardList\" | \"Report\" | \"ReportList\" | \"Insight\" | \"AnalyticsQuery\" | \"AnalyticsStream\" | \"AnalyticsConfiguration\", Metric, \"analyticsApi\", unknown>; ... 31 more ...; getAnalyticsH...`.","line":726,"column":69,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":726,"endColumn":74},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":729,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":729,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[22057,22059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":733,"column":86,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":733,"endColumn":88,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[22295,22297],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Analytics API Service\n *\n * RTK Query API service for advanced analytics platform supporting:\n * - Metrics definition and data retrieval\n * - Dashboard creation and management\n * - Report generation and scheduling\n * - Real-time analytics streaming\n * - Machine learning insights and predictions\n * - Cross-tenant analytics and reporting\n */\n\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { z } from 'zod'\nimport { createValidatedBaseQuery, createValidatedEndpoint, wrapSuccessResponse } from '@/lib/api/validation'\nimport type {\n  Metric,\n  MetricId,\n  MetricData,\n  Dashboard,\n  DashboardId,\n  Report,\n  ReportId,\n  Insight,\n  AnalyticsQuery,\n  AnalyticsQueryResult,\n  AnalyticsConfiguration,\n  AnalyticsStream,\n  CreateMetricRequest,\n  UpdateMetricRequest,\n  CreateDashboardRequest,\n  UpdateDashboardRequest,\n  CreateReportRequest,\n  UpdateReportRequest,\n  AnalyticsQueryRequest,\n  MetricListResponse,\n  DashboardListResponse,\n  ReportListResponse,\n} from '@/types/analytics'\nimport {\n  MetricSchema,\n  DashboardSchema,\n  ReportSchema,\n  AnalyticsQuerySchema,\n} from '@/types/analytics'\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api'\n\n// Response schemas\nconst MetricResponseSchema = wrapSuccessResponse(MetricSchema)\nconst MetricListResponseSchema = wrapSuccessResponse(\n  z.object({\n    metrics: z.array(MetricSchema),\n    total: z.number(),\n    page: z.number(),\n    pageSize: z.number(),\n    hasNext: z.boolean(),\n  })\n)\n\nconst MetricDataResponseSchema = wrapSuccessResponse(\n  z.object({\n    metricId: z.string(),\n    period: z.enum(['hour', 'day', 'week', 'month', 'quarter', 'year']),\n    granularity: z.enum(['minute', 'hour', 'day', 'week', 'month']),\n    data: z.array(z.object({\n      timestamp: z.string(),\n      value: z.union([z.number(), z.string()]),\n      metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),\n    })),\n    aggregations: z.object({\n      sum: z.number().optional(),\n      avg: z.number().optional(),\n      min: z.number().optional(),\n      max: z.number().optional(),\n      count: z.number().optional(),\n      median: z.number().optional(),\n      percentiles: z.record(z.number()).optional(),\n    }).optional(),\n    metadata: z.object({\n      totalPoints: z.number(),\n      startTime: z.string(),\n      endTime: z.string(),\n      sampling: z.string().optional(),\n      quality: z.enum(['high', 'medium', 'low']),\n    }),\n  })\n)\n\nconst DashboardResponseSchema = wrapSuccessResponse(DashboardSchema)\nconst DashboardListResponseSchema = wrapSuccessResponse(\n  z.object({\n    dashboards: z.array(DashboardSchema),\n    total: z.number(),\n    page: z.number(),\n    pageSize: z.number(),\n    hasNext: z.boolean(),\n  })\n)\n\nconst ReportResponseSchema = wrapSuccessResponse(ReportSchema)\nconst ReportListResponseSchema = wrapSuccessResponse(\n  z.object({\n    reports: z.array(ReportSchema),\n    total: z.number(),\n    page: z.number(),\n    pageSize: z.number(),\n    hasNext: z.boolean(),\n  })\n)\n\nconst InsightResponseSchema = wrapSuccessResponse(\n  z.object({\n    id: z.string(),\n    type: z.enum(['trend', 'anomaly', 'correlation', 'prediction', 'recommendation']),\n    severity: z.enum(['low', 'medium', 'high', 'critical']),\n    confidence: z.number().min(0).max(1),\n    title: z.string(),\n    description: z.string(),\n    summary: z.string(),\n    metricIds: z.array(z.string()),\n    timeRange: z.object({\n      start: z.string(),\n      end: z.string(),\n    }),\n    model: z.object({\n      name: z.string(),\n      version: z.string(),\n      accuracy: z.number().optional(),\n      lastTrained: z.string().optional(),\n    }).optional(),\n    recommendations: z.array(z.object({\n      action: z.string(),\n      impact: z.enum(['low', 'medium', 'high']),\n      effort: z.enum(['low', 'medium', 'high']),\n      description: z.string(),\n      resources: z.array(z.string()).optional(),\n    })).optional(),\n    generatedAt: z.string(),\n    expiresAt: z.string().optional(),\n    viewedAt: z.string().optional(),\n    acknowledged: z.boolean().optional(),\n  })\n)\n\nconst AnalyticsQueryResultSchema = wrapSuccessResponse(\n  z.object({\n    query: AnalyticsQuerySchema,\n    data: z.array(MetricDataResponseSchema.shape.data),\n    insights: z.array(InsightResponseSchema.shape.data),\n    executionTime: z.number(),\n    cached: z.boolean(),\n    nextPageToken: z.string().optional(),\n  })\n)\n\nexport const analyticsApi = createApi({\n  reducerPath: 'analyticsApi',\n  baseQuery: createValidatedBaseQuery(`${API_BASE_URL}/analytics`),\n  tagTypes: [\n    'Metric',\n    'MetricList',\n    'MetricData',\n    'Dashboard',\n    'DashboardList',\n    'Report',\n    'ReportList',\n    'Insight',\n    'AnalyticsQuery',\n    'AnalyticsStream',\n    'AnalyticsConfiguration',\n  ],\n  endpoints: (builder) => ({\n    // Metrics management\n    getMetric: builder.query<Metric, { metricId: MetricId }>({\n      ...createValidatedEndpoint(MetricResponseSchema, {\n        query: ({ metricId }) => `/metrics/${metricId}`,\n      }),\n      providesTags: (result, error, { metricId }) => [\n        { type: 'Metric', id: metricId },\n      ],\n    }),\n\n    listMetrics: builder.query<MetricListResponse, {\n      page?: number\n      pageSize?: number\n      category?: string\n      type?: string\n      search?: string\n      tags?: string[]\n      sortBy?: string\n      sortOrder?: 'asc' | 'desc'\n    }>({\n      ...createValidatedEndpoint(MetricListResponseSchema, {\n        query: (params) => ({\n          url: '/metrics',\n          params: {\n            page: params.page || 1,\n            pageSize: params.pageSize || 20,\n            ...(params.category && { category: params.category }),\n            ...(params.type && { type: params.type }),\n            ...(params.search && { search: params.search }),\n            ...(params.tags && { tags: params.tags.join(',') }),\n            ...(params.sortBy && { sortBy: params.sortBy }),\n            ...(params.sortOrder && { sortOrder: params.sortOrder }),\n          },\n        }),\n      }),\n      providesTags: ['MetricList'],\n    }),\n\n    createMetric: builder.mutation<Metric, CreateMetricRequest>({\n      ...createValidatedEndpoint(MetricResponseSchema, {\n        query: (createRequest) => {\n          MetricSchema.parse(createRequest)\n          return {\n            url: '/metrics',\n            method: 'POST',\n            body: createRequest,\n          }\n        },\n      }),\n      invalidatesTags: ['MetricList'],\n    }),\n\n    updateMetric: builder.mutation<Metric, { metricId: MetricId; updates: UpdateMetricRequest }>({\n      ...createValidatedEndpoint(MetricResponseSchema, {\n        query: ({ metricId, updates }) => ({\n          url: `/metrics/${metricId}`,\n          method: 'PATCH',\n          body: updates,\n        }),\n      }),\n      invalidatesTags: (result, error, { metricId }) => [\n        { type: 'Metric', id: metricId },\n        'MetricList',\n      ],\n    }),\n\n    deleteMetric: builder.mutation<void, { metricId: MetricId }>({\n      query: ({ metricId }) => ({\n        url: `/metrics/${metricId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (result, error, { metricId }) => [\n        { type: 'Metric', id: metricId },\n        'MetricList',\n      ],\n    }),\n\n    // Metric data retrieval\n    getMetricData: builder.query<MetricData, {\n      metricId: MetricId\n      timeRange: {\n        start: string\n        end: string\n        granularity: 'minute' | 'hour' | 'day' | 'week' | 'month'\n      }\n      filters?: Record<string, string | number | boolean | string[]>\n      groupBy?: string[]\n    }>({\n      ...createValidatedEndpoint(MetricDataResponseSchema, {\n        query: ({ metricId, timeRange, filters, groupBy }) => ({\n          url: `/metrics/${metricId}/data`,\n          params: {\n            start: timeRange.start,\n            end: timeRange.end,\n            granularity: timeRange.granularity,\n            ...(filters && { filters: JSON.stringify(filters) }),\n            ...(groupBy && { groupBy: groupBy.join(',') }),\n          },\n        }),\n      }),\n      providesTags: (result, error, { metricId, timeRange }) => [\n        { type: 'MetricData', id: `${metricId}-${timeRange.start}-${timeRange.end}` },\n      ],\n    }),\n\n    // Analytics queries\n    executeAnalyticsQuery: builder.mutation<AnalyticsQueryResult, AnalyticsQueryRequest>({\n      ...createValidatedEndpoint(AnalyticsQueryResultSchema, {\n        query: (queryRequest) => {\n          AnalyticsQuerySchema.parse(queryRequest)\n          return {\n            url: '/query',\n            method: 'POST',\n            body: queryRequest,\n          }\n        },\n      }),\n      invalidatesTags: ['AnalyticsQuery'],\n    }),\n\n    // Dashboard management\n    getDashboard: builder.query<Dashboard, { dashboardId: DashboardId }>({\n      ...createValidatedEndpoint(DashboardResponseSchema, {\n        query: ({ dashboardId }) => `/dashboards/${dashboardId}`,\n      }),\n      providesTags: (result, error, { dashboardId }) => [\n        { type: 'Dashboard', id: dashboardId },\n      ],\n    }),\n\n    listDashboards: builder.query<DashboardListResponse, {\n      page?: number\n      pageSize?: number\n      category?: string\n      visibility?: string\n      search?: string\n      tags?: string[]\n      sortBy?: string\n      sortOrder?: 'asc' | 'desc'\n    }>({\n      ...createValidatedEndpoint(DashboardListResponseSchema, {\n        query: (params) => ({\n          url: '/dashboards',\n          params: {\n            page: params.page || 1,\n            pageSize: params.pageSize || 20,\n            ...(params.category && { category: params.category }),\n            ...(params.visibility && { visibility: params.visibility }),\n            ...(params.search && { search: params.search }),\n            ...(params.tags && { tags: params.tags.join(',') }),\n            ...(params.sortBy && { sortBy: params.sortBy }),\n            ...(params.sortOrder && { sortOrder: params.sortOrder }),\n          },\n        }),\n      }),\n      providesTags: ['DashboardList'],\n    }),\n\n    createDashboard: builder.mutation<Dashboard, CreateDashboardRequest>({\n      ...createValidatedEndpoint(DashboardResponseSchema, {\n        query: (createRequest) => {\n          DashboardSchema.parse(createRequest)\n          return {\n            url: '/dashboards',\n            method: 'POST',\n            body: createRequest,\n          }\n        },\n      }),\n      invalidatesTags: ['DashboardList'],\n    }),\n\n    updateDashboard: builder.mutation<Dashboard, { dashboardId: DashboardId; updates: UpdateDashboardRequest }>({\n      ...createValidatedEndpoint(DashboardResponseSchema, {\n        query: ({ dashboardId, updates }) => ({\n          url: `/dashboards/${dashboardId}`,\n          method: 'PATCH',\n          body: updates,\n        }),\n      }),\n      invalidatesTags: (result, error, { dashboardId }) => [\n        { type: 'Dashboard', id: dashboardId },\n        'DashboardList',\n      ],\n    }),\n\n    deleteDashboard: builder.mutation<void, { dashboardId: DashboardId }>({\n      query: ({ dashboardId }) => ({\n        url: `/dashboards/${dashboardId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (result, error, { dashboardId }) => [\n        { type: 'Dashboard', id: dashboardId },\n        'DashboardList',\n      ],\n    }),\n\n    cloneDashboard: builder.mutation<Dashboard, { dashboardId: DashboardId; name: string }>({\n      ...createValidatedEndpoint(DashboardResponseSchema, {\n        query: ({ dashboardId, name }) => ({\n          url: `/dashboards/${dashboardId}/clone`,\n          method: 'POST',\n          body: { name },\n        }),\n      }),\n      invalidatesTags: ['DashboardList'],\n    }),\n\n    shareDashboard: builder.mutation<Dashboard, {\n      dashboardId: DashboardId\n      shareWith: string[]\n      permissions: string[]\n    }>({\n      ...createValidatedEndpoint(DashboardResponseSchema, {\n        query: ({ dashboardId, shareWith, permissions }) => ({\n          url: `/dashboards/${dashboardId}/share`,\n          method: 'POST',\n          body: { shareWith, permissions },\n        }),\n      }),\n      invalidatesTags: (result, error, { dashboardId }) => [\n        { type: 'Dashboard', id: dashboardId },\n      ],\n    }),\n\n    // Report management\n    getReport: builder.query<Report, { reportId: ReportId }>({\n      ...createValidatedEndpoint(ReportResponseSchema, {\n        query: ({ reportId }) => `/reports/${reportId}`,\n      }),\n      providesTags: (result, error, { reportId }) => [\n        { type: 'Report', id: reportId },\n      ],\n    }),\n\n    listReports: builder.query<ReportListResponse, {\n      page?: number\n      pageSize?: number\n      category?: string\n      type?: string\n      status?: string\n      search?: string\n      sortBy?: string\n      sortOrder?: 'asc' | 'desc'\n    }>({\n      ...createValidatedEndpoint(ReportListResponseSchema, {\n        query: (params) => ({\n          url: '/reports',\n          params: {\n            page: params.page || 1,\n            pageSize: params.pageSize || 20,\n            ...(params.category && { category: params.category }),\n            ...(params.type && { type: params.type }),\n            ...(params.status && { status: params.status }),\n            ...(params.search && { search: params.search }),\n            ...(params.sortBy && { sortBy: params.sortBy }),\n            ...(params.sortOrder && { sortOrder: params.sortOrder }),\n          },\n        }),\n      }),\n      providesTags: ['ReportList'],\n    }),\n\n    createReport: builder.mutation<Report, CreateReportRequest>({\n      ...createValidatedEndpoint(ReportResponseSchema, {\n        query: (createRequest) => {\n          ReportSchema.parse(createRequest)\n          return {\n            url: '/reports',\n            method: 'POST',\n            body: createRequest,\n          }\n        },\n      }),\n      invalidatesTags: ['ReportList'],\n    }),\n\n    updateReport: builder.mutation<Report, { reportId: ReportId; updates: UpdateReportRequest }>({\n      ...createValidatedEndpoint(ReportResponseSchema, {\n        query: ({ reportId, updates }) => ({\n          url: `/reports/${reportId}`,\n          method: 'PATCH',\n          body: updates,\n        }),\n      }),\n      invalidatesTags: (result, error, { reportId }) => [\n        { type: 'Report', id: reportId },\n        'ReportList',\n      ],\n    }),\n\n    deleteReport: builder.mutation<void, { reportId: ReportId }>({\n      query: ({ reportId }) => ({\n        url: `/reports/${reportId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (result, error, { reportId }) => [\n        { type: 'Report', id: reportId },\n        'ReportList',\n      ],\n    }),\n\n    runReport: builder.mutation<{ reportId: ReportId; runId: string; downloadUrl?: string }, {\n      reportId: ReportId\n      parameters?: Record<string, string | number | boolean>\n    }>({\n      query: ({ reportId, parameters }) => ({\n        url: `/reports/${reportId}/run`,\n        method: 'POST',\n        body: { parameters },\n      }),\n      invalidatesTags: (result, error, { reportId }) => [\n        { type: 'Report', id: reportId },\n      ],\n    }),\n\n    scheduleReport: builder.mutation<Report, {\n      reportId: ReportId\n      schedule: {\n        frequency: string\n        interval: number\n        startDate: string\n        endDate?: string\n        timezone: string\n      }\n    }>({\n      ...createValidatedEndpoint(ReportResponseSchema, {\n        query: ({ reportId, schedule }) => ({\n          url: `/reports/${reportId}/schedule`,\n          method: 'POST',\n          body: schedule,\n        }),\n      }),\n      invalidatesTags: (result, error, { reportId }) => [\n        { type: 'Report', id: reportId },\n      ],\n    }),\n\n    // Insights and ML predictions\n    getInsights: builder.query<Insight[], {\n      metricIds?: MetricId[]\n      type?: string\n      severity?: string\n      acknowledged?: boolean\n      limit?: number\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(InsightResponseSchema.shape.data)), {\n        query: (params) => ({\n          url: '/insights',\n          params: {\n            ...(params.metricIds && { metricIds: params.metricIds.join(',') }),\n            ...(params.type && { type: params.type }),\n            ...(params.severity && { severity: params.severity }),\n            ...(params.acknowledged !== undefined && { acknowledged: params.acknowledged }),\n            ...(params.limit && { limit: params.limit }),\n          },\n        }),\n      }),\n      providesTags: ['Insight'],\n    }),\n\n    acknowledgeInsight: builder.mutation<Insight, { insightId: string }>({\n      ...createValidatedEndpoint(InsightResponseSchema, {\n        query: ({ insightId }) => ({\n          url: `/insights/${insightId}/acknowledge`,\n          method: 'POST',\n        }),\n      }),\n      invalidatesTags: ['Insight'],\n    }),\n\n    generateInsights: builder.mutation<Insight[], {\n      metricIds: MetricId[]\n      timeRange: {\n        start: string\n        end: string\n      }\n      types?: string[]\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(InsightResponseSchema.shape.data)), {\n        query: ({ metricIds, timeRange, types }) => ({\n          url: '/insights/generate',\n          method: 'POST',\n          body: {\n            metricIds,\n            timeRange,\n            types,\n          },\n        }),\n      }),\n      invalidatesTags: ['Insight'],\n    }),\n\n    // Real-time analytics streams\n    getAnalyticsStreams: builder.query<AnalyticsStream[], void>({\n      query: () => '/streams',\n      providesTags: ['AnalyticsStream'],\n    }),\n\n    createAnalyticsStream: builder.mutation<AnalyticsStream, Omit<AnalyticsStream, 'id'>>({\n      query: (streamConfig) => ({\n        url: '/streams',\n        method: 'POST',\n        body: streamConfig,\n      }),\n      invalidatesTags: ['AnalyticsStream'],\n    }),\n\n    updateAnalyticsStream: builder.mutation<AnalyticsStream, {\n      streamId: string\n      updates: Partial<AnalyticsStream>\n    }>({\n      query: ({ streamId, updates }) => ({\n        url: `/streams/${streamId}`,\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: ['AnalyticsStream'],\n    }),\n\n    deleteAnalyticsStream: builder.mutation<void, { streamId: string }>({\n      query: ({ streamId }) => ({\n        url: `/streams/${streamId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['AnalyticsStream'],\n    }),\n\n    // Analytics configuration\n    getAnalyticsConfiguration: builder.query<AnalyticsConfiguration, void>({\n      query: () => '/configuration',\n      providesTags: ['AnalyticsConfiguration'],\n    }),\n\n    updateAnalyticsConfiguration: builder.mutation<AnalyticsConfiguration, Partial<AnalyticsConfiguration>>({\n      query: (updates) => ({\n        url: '/configuration',\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: ['AnalyticsConfiguration'],\n    }),\n\n    // Export capabilities\n    exportMetricData: builder.mutation<{ exportId: string; downloadUrl: string }, {\n      metricIds: MetricId[]\n      timeRange: {\n        start: string\n        end: string\n      }\n      format: 'csv' | 'json' | 'excel'\n      includeMetadata?: boolean\n    }>({\n      query: ({ metricIds, timeRange, format, includeMetadata = false }) => ({\n        url: '/export/metrics',\n        method: 'POST',\n        body: {\n          metricIds,\n          timeRange,\n          format,\n          includeMetadata,\n        },\n      }),\n    }),\n\n    exportDashboard: builder.mutation<{ exportId: string; downloadUrl: string }, {\n      dashboardId: DashboardId\n      format: 'pdf' | 'png' | 'json'\n      options?: {\n        includeData?: boolean\n        theme?: 'light' | 'dark'\n        resolution?: 'low' | 'medium' | 'high'\n      }\n    }>({\n      query: ({ dashboardId, format, options }) => ({\n        url: `/export/dashboards/${dashboardId}`,\n        method: 'POST',\n        body: {\n          format,\n          options,\n        },\n      }),\n    }),\n\n    // Health and status\n    getAnalyticsHealth: builder.query<{\n      status: 'healthy' | 'degraded' | 'unhealthy'\n      components: Record<string, {\n        status: 'healthy' | 'degraded' | 'unhealthy'\n        lastCheck: string\n        details?: string\n      }>\n    }, void>({\n      query: () => '/health',\n    }),\n  }),\n})\n\n// Export hooks\nexport const {\n  useGetMetricQuery,\n  useListMetricsQuery,\n  useCreateMetricMutation,\n  useUpdateMetricMutation,\n  useDeleteMetricMutation,\n  useGetMetricDataQuery,\n  useExecuteAnalyticsQueryMutation,\n  useGetDashboardQuery,\n  useListDashboardsQuery,\n  useCreateDashboardMutation,\n  useUpdateDashboardMutation,\n  useDeleteDashboardMutation,\n  useCloneDashboardMutation,\n  useShareDashboardMutation,\n  useGetReportQuery,\n  useListReportsQuery,\n  useCreateReportMutation,\n  useUpdateReportMutation,\n  useDeleteReportMutation,\n  useRunReportMutation,\n  useScheduleReportMutation,\n  useGetInsightsQuery,\n  useAcknowledgeInsightMutation,\n  useGenerateInsightsMutation,\n  useGetAnalyticsStreamsQuery,\n  useCreateAnalyticsStreamMutation,\n  useUpdateAnalyticsStreamMutation,\n  useDeleteAnalyticsStreamMutation,\n  useGetAnalyticsConfigurationQuery,\n  useUpdateAnalyticsConfigurationMutation,\n  useExportMetricDataMutation,\n  useExportDashboardMutation,\n  useGetAnalyticsHealthQuery,\n} = analyticsApi\n\n// Utility selectors\nexport const selectMetricById = (metricId: MetricId) =>\n  analyticsApi.endpoints.getMetric.select({ metricId })\n\nexport const selectDashboardById = (dashboardId: DashboardId) =>\n  analyticsApi.endpoints.getDashboard.select({ dashboardId })\n\nexport const selectReportById = (reportId: ReportId) =>\n  analyticsApi.endpoints.getReport.select({ reportId })\n\nexport const selectMetricData = (metricId: MetricId, timeRange: any) =>\n  analyticsApi.endpoints.getMetricData.select({ metricId, timeRange })\n\n// Advanced selectors for analytics context\nexport const createAnalyticsContextSelector = () => (state: any) => {\n  const insights = analyticsApi.endpoints.getInsights.select({})(state)\n  const configuration = analyticsApi.endpoints.getAnalyticsConfiguration.select()(state)\n  const health = analyticsApi.endpoints.getAnalyticsHealth.select()(state)\n\n  return {\n    insights: insights.data || [],\n    configuration: configuration.data,\n    health: health.data,\n    isLoading: insights.isLoading || configuration.isLoading || health.isLoading,\n    hasUnacknowledgedInsights: insights.data?.some(insight => !insight.acknowledged) || false,\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/authApi.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":131,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .displayName on an `error` typed value.","line":132,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .iconUrl on an `error` typed value.","line":133,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authUrl on an `error` typed value.","line":134,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .iconUrl on an `error` typed value.","line":144,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":145,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `error` typed value.","line":158,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .session on an `error` typed value.","line":159,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .provider on an `error` typed value.","line":168,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .redirectUri on an `error` typed value.","line":169,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":178,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .password on an `error` typed value.","line":179,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":189,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .password on an `error` typed value.","line":190,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":191,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .methods on an `error` typed value.","line":201,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .passwordAuthEnabled on an `error` typed value.","line":202,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .oauth2Providers on an `error` typed value.","line":203,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":52}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest'\n\nimport {\n  authApi,\n  type OAuth2Provider,\n  type SessionInfo,\n  type LoginRequest,\n  type PasswordLoginRequest,\n  type PasswordRegisterRequest,\n  type AuthMethodsResponse,\n} from './authApi'\n\nimport { createMockUser } from '@/test/fixtures/users'\n\n// Mock import.meta.env\nvi.mock('import.meta.env', () => ({\n  VITE_API_BASE_URL: 'http://localhost:8082/api/v1',\n}))\n\ndescribe('authApi', () => {\n  describe('API configuration', () => {\n    it('should have correct reducer path', () => {\n      expect(authApi.reducerPath).toBe('authApi')\n    })\n\n    it('should have endpoints defined', () => {\n      expect(authApi.endpoints).toBeDefined()\n      expect(typeof authApi.endpoints).toBe('object')\n    })\n\n    it('should export reducer', () => {\n      expect(authApi.reducer).toBeDefined()\n      expect(typeof authApi.reducer).toBe('function')\n    })\n\n    it('should export middleware', () => {\n      expect(authApi.middleware).toBeDefined()\n      expect(typeof authApi.middleware).toBe('function')\n    })\n  })\n\n  describe('endpoint definitions', () => {\n    it('should have getAuthMethods endpoint', () => {\n      expect(authApi.endpoints.getAuthMethods).toBeDefined()\n    })\n\n    it('should have passwordLogin endpoint', () => {\n      expect(authApi.endpoints.passwordLogin).toBeDefined()\n    })\n\n    it('should have passwordRegister endpoint', () => {\n      expect(authApi.endpoints.passwordRegister).toBeDefined()\n    })\n\n    it('should have getAuthUrl endpoint', () => {\n      expect(authApi.endpoints.getAuthUrl).toBeDefined()\n    })\n\n    it('should have getSession endpoint', () => {\n      expect(authApi.endpoints.getSession).toBeDefined()\n    })\n\n    it('should have handleCallback endpoint', () => {\n      expect(authApi.endpoints.handleCallback).toBeDefined()\n    })\n\n    it('should have logout endpoint', () => {\n      expect(authApi.endpoints.logout).toBeDefined()\n    })\n\n    it('should have refreshToken endpoint', () => {\n      expect(authApi.endpoints.refreshToken).toBeDefined()\n    })\n  })\n\n  describe('exported hooks', () => {\n    it('should export useGetAuthMethodsQuery hook', () => {\n      const {\n        useGetAuthMethodsQuery,\n      } = authApi\n\n      expect(typeof useGetAuthMethodsQuery).toBe('function')\n    })\n\n    it('should export mutation hooks', () => {\n      const {\n        usePasswordLoginMutation,\n        usePasswordRegisterMutation,\n        useHandleCallbackMutation,\n        useLogoutMutation,\n        useRefreshTokenMutation,\n      } = authApi\n\n      expect(typeof usePasswordLoginMutation).toBe('function')\n      expect(typeof usePasswordRegisterMutation).toBe('function')\n      expect(typeof useHandleCallbackMutation).toBe('function')\n      expect(typeof useLogoutMutation).toBe('function')\n      expect(typeof useRefreshTokenMutation).toBe('function')\n    })\n\n    it('should export query hooks', () => {\n      const {\n        useGetAuthUrlQuery,\n        useGetSessionQuery,\n      } = authApi\n\n      expect(typeof useGetAuthUrlQuery).toBe('function')\n      expect(typeof useGetSessionQuery).toBe('function')\n    })\n\n    it('should export lazy query hooks', () => {\n      const {\n        useLazyGetAuthUrlQuery,\n        useLazyGetSessionQuery,\n      } = authApi\n\n      expect(typeof useLazyGetAuthUrlQuery).toBe('function')\n      expect(typeof useLazyGetSessionQuery).toBe('function')\n    })\n  })\n\n  describe('type definitions', () => {\n    it('should define OAuth2Provider type correctly', () => {\n      const provider: OAuth2Provider = {\n        name: 'google',\n        displayName: 'Google',\n        iconUrl: 'https://example.com/google-icon.png',\n        authUrl: 'https://accounts.google.com/oauth/authorize',\n      }\n\n      expect(provider.name).toBe('google')\n      expect(provider.displayName).toBe('Google')\n      expect(provider.iconUrl).toBeDefined()\n      expect(provider.authUrl).toBeDefined()\n    })\n\n    it('should allow OAuth2Provider without iconUrl', () => {\n      const provider: OAuth2Provider = {\n        name: 'github',\n        displayName: 'GitHub',\n        authUrl: 'https://github.com/login/oauth/authorize',\n      }\n\n      expect(provider.iconUrl).toBeUndefined()\n      expect(provider.name).toBe('github')\n    })\n\n    it('should define SessionInfo type correctly', () => {\n      const sessionInfo: SessionInfo = {\n        user: createMockUser({ id: '123', name: 'Test User' }),\n        session: {\n          activeTokens: 1,\n          lastActiveAt: '2024-01-15T10:30:00Z',\n          createdAt: '2024-01-01T09:00:00Z',\n        },\n      }\n\n      expect(sessionInfo.user.id).toBe('123')\n      expect(sessionInfo.session.activeTokens).toBe(1)\n    })\n\n    it('should define LoginRequest type correctly', () => {\n      const request: LoginRequest = {\n        provider: 'google',\n        redirectUri: 'http://localhost:3000/auth/callback',\n      }\n\n      expect(request.provider).toBe('google')\n      expect(request.redirectUri).toBe('http://localhost:3000/auth/callback')\n    })\n\n    it('should define PasswordLoginRequest type correctly', () => {\n      const request: PasswordLoginRequest = {\n        email: 'test@example.com',\n        password: 'password123',\n      }\n\n      expect(request.email).toBe('test@example.com')\n      expect(request.password).toBe('password123')\n    })\n\n    it('should define PasswordRegisterRequest type correctly', () => {\n      const request: PasswordRegisterRequest = {\n        email: 'newuser@example.com',\n        password: 'newpassword123',\n        name: 'New User',\n      }\n\n      expect(request.email).toBe('newuser@example.com')\n      expect(request.password).toBe('newpassword123')\n      expect(request.name).toBe('New User')\n    })\n\n    it('should define AuthMethodsResponse type correctly', () => {\n      const response: AuthMethodsResponse = {\n        methods: ['password', 'oauth2'],\n        passwordAuthEnabled: true,\n        oauth2Providers: ['google', 'github', 'microsoft'],\n      }\n\n      expect(Array.isArray(response.methods)).toBe(true)\n      expect(typeof response.passwordAuthEnabled).toBe('boolean')\n      expect(Array.isArray(response.oauth2Providers)).toBe(true)\n    })\n  })\n\n  describe('API base configuration', () => {\n    it('should have correct API configuration structure', () => {\n      expect(authApi.reducerPath).toBe('authApi')\n      expect(authApi.endpoints).toBeDefined()\n    })\n  })\n\n  describe('validation helpers', () => {\n    it('should validate email format in requests', () => {\n      const validEmail = 'user@example.com'\n      const invalidEmail = 'invalid-email'\n\n      // Basic email validation test\n      expect(validEmail.includes('@')).toBe(true)\n      expect(invalidEmail.includes('@')).toBe(false)\n    })\n\n    it('should handle different password requirements', () => {\n      const strongPassword = 'StrongPass123!'\n      const weakPassword = '123'\n\n      expect(strongPassword.length).toBeGreaterThan(8)\n      expect(weakPassword.length).toBeLessThan(8)\n    })\n\n    it('should handle provider names correctly', () => {\n      const validProviders = ['google', 'github', 'microsoft']\n      const testProvider = 'google'\n\n      expect(validProviders).toContain(testProvider)\n    })\n  })\n\n  describe('API response structures', () => {\n    it('should handle successful authentication response', () => {\n      const authResponse = {\n        user: {\n          id: '123',\n          name: 'User',\n          email: 'user@example.com',\n          provider: 'google',\n          preferences: {},\n          createdAt: '2024-01-01T00:00:00Z',\n          lastActiveAt: null,\n        },\n        token: 'auth-token',\n      }\n\n      expect(authResponse.user).toBeDefined()\n      expect(authResponse.token).toBeDefined()\n      expect(typeof authResponse.token).toBe('string')\n    })\n\n    it('should handle auth URL response', () => {\n      const authUrlResponse = {\n        authUrl: 'https://accounts.google.com/oauth/authorize?client_id=123',\n      }\n\n      expect(authUrlResponse.authUrl).toBeDefined()\n      expect(authUrlResponse.authUrl.startsWith('https://')).toBe(true)\n    })\n\n    it('should handle callback response', () => {\n      const callbackData = {\n        code: 'auth-code-123',\n        state: 'random-state',\n      }\n\n      expect(callbackData.code).toBeDefined()\n      expect(callbackData.state).toBeDefined()\n      expect(typeof callbackData.code).toBe('string')\n    })\n\n    it('should handle refresh token response', () => {\n      const refreshResponse = {\n        token: 'new-access-token',\n      }\n\n      expect(refreshResponse.token).toBeDefined()\n      expect(typeof refreshResponse.token).toBe('string')\n    })\n  })\n\n  describe('error handling types', () => {\n    it('should handle authentication errors', () => {\n      const authError = {\n        status: 401,\n        message: 'Invalid credentials',\n      }\n\n      expect(authError.status).toBe(401)\n      expect(authError.message).toBe('Invalid credentials')\n    })\n\n    it('should handle validation errors', () => {\n      const validationError = {\n        status: 400,\n        message: 'Email is required',\n        field: 'email',\n      }\n\n      expect(validationError.status).toBe(400)\n      expect(validationError.field).toBe('email')\n    })\n\n    it('should handle network errors', () => {\n      const networkError = {\n        message: 'Network request failed',\n        type: 'NetworkError',\n      }\n\n      expect(networkError.type).toBe('NetworkError')\n      expect(networkError.message).toBeDefined()\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/authApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserSchema' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OAuth2Provider' is defined but never used.","line":17,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":25,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":26,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":26,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":26,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[686,688],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createApi } from '@reduxjs/toolkit/query/react'\n\nimport { withAuthHeader } from './utils'\n\nimport { createValidatedBaseQuery, createValidatedEndpoint, wrapSuccessResponse } from '@/lib/api/validation'\nimport {\n  UserSchema,\n  AuthMethodsResponseSchema,\n  LoginResponseSchema,\n  AuthUrlResponseSchema,\n  SessionInfoSchema,\n  PasswordLoginRequestSchema,\n  PasswordRegisterRequestSchema,\n  LoginRequestSchema,\n  CallbackRequestSchema,\n  type User,\n  type OAuth2Provider,\n  type SessionInfo,\n  type LoginRequest,\n  type PasswordLoginRequest,\n  type PasswordRegisterRequest,\n  type AuthMethodsResponse,\n} from '@/types/api'\n\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || '/api/v1'\n\nexport const authApi = createApi({\n  reducerPath: 'authApi',\n  baseQuery: createValidatedBaseQuery(`${API_BASE_URL}/auth`, {\n    prepareHeaders: (headers, { getState }) => withAuthHeader(headers, getState),\n  }),\n  tagTypes: ['Session'],\n  endpoints: builder => ({\n    getAuthMethods: builder.query<AuthMethodsResponse, void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(AuthMethodsResponseSchema), {\n        query: () => '/methods',\n      }),\n    }),\n\n    passwordLogin: builder.mutation<\n      { user: User; token: string },\n      PasswordLoginRequest\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(LoginResponseSchema), {\n        query: credentials => {\n          // Validate request data\n          PasswordLoginRequestSchema.parse(credentials);\n          return {\n            url: '/mock-login',\n            method: 'POST',\n            body: credentials,\n          };\n        },\n        method: 'POST',\n      }),\n      invalidatesTags: ['Session'],\n    }),\n\n    passwordRegister: builder.mutation<\n      { user: User; token: string },\n      PasswordRegisterRequest\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(LoginResponseSchema), {\n        query: userData => {\n          // Validate request data\n          PasswordRegisterRequestSchema.parse(userData);\n          return {\n            url: '/register',\n            method: 'POST',\n            body: userData,\n          };\n        },\n        method: 'POST',\n      }),\n      invalidatesTags: ['Session'],\n    }),\n\n    getAuthUrl: builder.query<{ authUrl: string }, LoginRequest>({\n      ...createValidatedEndpoint(wrapSuccessResponse(AuthUrlResponseSchema), {\n        query: ({ provider, redirectUri }) => {\n          // Validate request data\n          LoginRequestSchema.parse({ provider, redirectUri });\n          return {\n            url: '/authorize',\n            params: { provider, redirect_uri: redirectUri },\n          };\n        },\n      }),\n    }),\n\n    getSession: builder.query<SessionInfo, void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(SessionInfoSchema), {\n        query: () => '/session',\n      }),\n      providesTags: ['Session'],\n    }),\n\n    handleCallback: builder.mutation<\n      { user: User; token: string },\n      { code: string; state?: string }\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(LoginResponseSchema), {\n        query: ({ code, state }) => {\n          // Validate request data\n          CallbackRequestSchema.parse({ code, state });\n          return {\n            url: '/callback',\n            method: 'POST',\n            body: { code, state },\n          };\n        },\n        method: 'POST',\n      }),\n      invalidatesTags: ['Session'],\n    }),\n\n    logout: builder.mutation<void, void>({\n      query: () => ({\n        url: '/logout',\n        method: 'POST',\n      }),\n      invalidatesTags: ['Session'],\n      async onQueryStarted(_, { dispatch, queryFulfilled }) {\n        try {\n          await queryFulfilled\n          // Clear auth state on successful logout\n          dispatch(authApi.util.resetApiState())\n        } catch {\n          // Even if logout fails on server, clear local state\n          dispatch(authApi.util.resetApiState())\n        }\n      },\n    }),\n\n    // Refresh token endpoint (if implementing token refresh)\n    refreshToken: builder.mutation<{ token: string }, void>({\n      query: () => ({\n        url: '/refresh',\n        method: 'POST',\n      }),\n    }),\n  }),\n})\n\nexport const {\n  useGetAuthMethodsQuery,\n  usePasswordLoginMutation,\n  usePasswordRegisterMutation,\n  useGetAuthUrlQuery,\n  useGetSessionQuery,\n  useHandleCallbackMutation,\n  useLogoutMutation,\n  useRefreshTokenMutation,\n  // Export for lazy queries\n  useLazyGetAuthUrlQuery,\n  useLazyGetSessionQuery,\n} = authApi\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/mfaApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TOTPMethod' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SMSMethod' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmailMethod' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BackupCodesMethod' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BiometricMethod' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":103,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":103,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":103,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2775,2777],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":121,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":124,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7527,7530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7527,7530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":313,"column":145,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":148,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10202,10205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10202,10205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MFA API Service\n *\n * RTK Query API service for Multi-Factor Authentication operations:\n * - MFA method setup and management\n * - Verification and challenges\n * - Recovery and backup codes\n * - WebAuthn integration\n * - Security analytics\n */\n\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { z } from 'zod'\n\nimport { createValidatedBaseQuery, createValidatedEndpoint, wrapSuccessResponse } from '@/lib/api/validation'\nimport {\n  AnyMFAMethod,\n  MFASettings,\n  MFASetupRequest,\n  MFASetupResponse,\n  MFAVerificationRequest,\n  MFAVerificationResponse,\n  MFAChallenge,\n  MFAChallengeResponse,\n  MFARecoveryRequest,\n  MFARecoveryResponse,\n  MFAAnalytics,\n  MFAAuditEvent,\n  MFACapabilities,\n  TOTPMethod,\n  SMSMethod,\n  EmailMethod,\n  BackupCodesMethod,\n  WebAuthnMethod,\n  BiometricMethod,\n} from '@/types/mfa'\n\n// Validation schemas\nconst MFAMethodSchema = z.object({\n  id: z.string(),\n  type: z.enum(['totp', 'sms', 'email', 'backup_codes', 'webauthn', 'biometric']),\n  name: z.string(),\n  isEnabled: z.boolean(),\n  isPrimary: z.boolean(),\n  createdAt: z.string(),\n  lastUsed: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n})\n\nconst MFASettingsSchema = z.object({\n  isEnabled: z.boolean(),\n  requiredForLogin: z.boolean(),\n  requiredForSensitiveActions: z.boolean(),\n  backupCodesEnabled: z.boolean(),\n  trustedDevices: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    deviceFingerprint: z.string(),\n    userAgent: z.string(),\n    ipAddress: z.string(),\n    location: z.string().optional(),\n    createdAt: z.string(),\n    lastUsed: z.string(),\n    expiresAt: z.string(),\n  })),\n  securityNotifications: z.object({\n    emailOnMethodChange: z.boolean(),\n    emailOnSuccessfulAuth: z.boolean(),\n    emailOnFailedAttempts: z.boolean(),\n  }),\n  lockoutPolicy: z.object({\n    maxAttempts: z.number(),\n    lockoutDurationMinutes: z.number(),\n    progressiveLockout: z.boolean(),\n  }),\n})\n\nconst MFASetupRequestSchema = z.object({\n  type: z.enum(['totp', 'sms', 'email', 'backup_codes', 'webauthn', 'biometric']),\n  name: z.string().min(1, 'Method name is required'),\n  phoneNumber: z.string().optional(),\n  emailAddress: z.string().email().optional(),\n  deviceName: z.string().optional(),\n})\n\nconst MFAVerificationRequestSchema = z.object({\n  methodId: z.string(),\n  code: z.string().optional(),\n  backupCode: z.string().optional(),\n  webauthnResponse: z.any().optional(),\n  biometricResponse: z.any().optional(),\n})\n\nconst MFAChallengeResponseSchema = z.object({\n  challengeId: z.string(),\n  methodId: z.string(),\n  code: z.string().optional(),\n  backupCode: z.string().optional(),\n  webauthnResponse: z.any().optional(),\n  biometricResponse: z.any().optional(),\n})\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api/v1'\n\nexport const mfaApi = createApi({\n  reducerPath: 'mfaApi',\n  baseQuery: createValidatedBaseQuery(`${API_BASE_URL}/mfa`),\n  tagTypes: ['MFAMethod', 'MFASettings', 'MFAAnalytics', 'MFACapabilities'],\n  endpoints: (builder) => ({\n\n    // Get user's MFA methods\n    getMFAMethods: builder.query<AnyMFAMethod[], void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(MFAMethodSchema)), {\n        query: () => '/methods',\n      }),\n      providesTags: ['MFAMethod'],\n    }),\n\n    // Get MFA capabilities (what the browser/device supports)\n    getMFACapabilities: builder.query<MFACapabilities, void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        supportedMethods: z.array(z.enum(['totp', 'sms', 'email', 'backup_codes', 'webauthn', 'biometric'])),\n        webauthnSupported: z.boolean(),\n        biometricSupported: z.boolean(),\n        platformAuthenticatorAvailable: z.boolean(),\n        securityKeySupported: z.boolean(),\n      })), {\n        query: () => '/capabilities',\n      }),\n      providesTags: ['MFACapabilities'],\n    }),\n\n    // Setup new MFA method\n    setupMFAMethod: builder.mutation<MFASetupResponse, MFASetupRequest>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        method: MFAMethodSchema,\n        setupData: z.object({\n          qrCode: z.string().optional(),\n          secretKey: z.string().optional(),\n          backupCodes: z.array(z.string()).optional(),\n          verificationCode: z.string().optional(),\n          challengeOptions: z.any().optional(), // PublicKeyCredentialCreationOptions\n        }).optional(),\n        nextStep: z.enum(['verify', 'complete', 'backup_codes']),\n      })), {\n        query: (setupRequest) => {\n          MFASetupRequestSchema.parse(setupRequest)\n          return {\n            url: '/methods/setup',\n            method: 'POST',\n            body: setupRequest,\n          }\n        },\n      }),\n      invalidatesTags: ['MFAMethod'],\n    }),\n\n    // Verify MFA method during setup\n    verifyMFASetup: builder.mutation<{ success: boolean; method: AnyMFAMethod }, MFAVerificationRequest>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        success: z.boolean(),\n        method: MFAMethodSchema,\n      })), {\n        query: (verificationRequest) => {\n          MFAVerificationRequestSchema.parse(verificationRequest)\n          return {\n            url: '/methods/verify-setup',\n            method: 'POST',\n            body: verificationRequest,\n          }\n        },\n      }),\n      invalidatesTags: ['MFAMethod'],\n    }),\n\n    // Update MFA method (enable/disable, rename, etc.)\n    updateMFAMethod: builder.mutation<AnyMFAMethod, { methodId: string; updates: Partial<Pick<AnyMFAMethod, 'name' | 'isEnabled' | 'isPrimary'>> }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(MFAMethodSchema), {\n        query: ({ methodId, updates }) => ({\n          url: `/methods/${methodId}`,\n          method: 'PATCH',\n          body: updates,\n        }),\n      }),\n      invalidatesTags: ['MFAMethod'],\n    }),\n\n    // Delete MFA method\n    deleteMFAMethod: builder.mutation<{ success: boolean }, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({ success: z.boolean() })), {\n        query: (methodId) => ({\n          url: `/methods/${methodId}`,\n          method: 'DELETE',\n        }),\n      }),\n      invalidatesTags: ['MFAMethod'],\n    }),\n\n    // Get backup codes\n    getBackupCodes: builder.query<string[], void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.string())), {\n        query: () => '/backup-codes',\n      }),\n    }),\n\n    // Generate new backup codes\n    generateBackupCodes: builder.mutation<string[], void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.string())), {\n        query: () => ({\n          url: '/backup-codes/generate',\n          method: 'POST',\n        }),\n      }),\n      invalidatesTags: ['MFAMethod'],\n    }),\n\n    // Get MFA settings\n    getMFASettings: builder.query<MFASettings, void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(MFASettingsSchema), {\n        query: () => '/settings',\n      }),\n      providesTags: ['MFASettings'],\n    }),\n\n    // Update MFA settings\n    updateMFASettings: builder.mutation<MFASettings, Partial<MFASettings>>({\n      ...createValidatedEndpoint(wrapSuccessResponse(MFASettingsSchema), {\n        query: (settings) => ({\n          url: '/settings',\n          method: 'PATCH',\n          body: settings,\n        }),\n      }),\n      invalidatesTags: ['MFASettings'],\n    }),\n\n    // Challenge-based verification (for login and sensitive actions)\n    createMFAChallenge: builder.mutation<MFAChallenge, { action: 'login' | 'sensitive_action'; context?: Record<string, any> }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        challengeId: z.string(),\n        requiredMethods: z.array(z.enum(['totp', 'sms', 'email', 'backup_codes', 'webauthn', 'biometric'])),\n        availableMethods: z.array(z.object({\n          id: z.string(),\n          type: z.enum(['totp', 'sms', 'email', 'backup_codes', 'webauthn', 'biometric']),\n          name: z.string(),\n          metadata: z.record(z.any()),\n        })),\n        expiresAt: z.string(),\n        attemptCount: z.number(),\n        maxAttempts: z.number(),\n      })), {\n        query: (challengeRequest) => ({\n          url: '/challenges',\n          method: 'POST',\n          body: challengeRequest,\n        }),\n      }),\n    }),\n\n    // Respond to MFA challenge\n    respondToMFAChallenge: builder.mutation<MFAVerificationResponse, MFAChallengeResponse>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        success: z.boolean(),\n        methodId: z.string(),\n        remainingAttempts: z.number().optional(),\n        lockoutUntil: z.string().optional(),\n        backupCodesRemaining: z.number().optional(),\n        error: z.object({\n          code: z.string(),\n          message: z.string(),\n          details: z.record(z.any()).optional(),\n        }).optional(),\n      })), {\n        query: (challengeResponse) => {\n          MFAChallengeResponseSchema.parse(challengeResponse)\n          return {\n            url: '/challenges/respond',\n            method: 'POST',\n            body: challengeResponse,\n          }\n        },\n      }),\n    }),\n\n    // MFA recovery\n    initiateMFARecovery: builder.mutation<MFARecoveryResponse, MFARecoveryRequest>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        recoveryId: z.string(),\n        method: z.string(),\n        nextStep: z.enum(['verify_identity', 'wait_approval', 'reset_available']),\n        estimatedTime: z.string().optional(),\n      })), {\n        query: (recoveryRequest) => ({\n          url: '/recovery/initiate',\n          method: 'POST',\n          body: recoveryRequest,\n        }),\n      }),\n    }),\n\n    // Check recovery status\n    checkMFARecoveryStatus: builder.query<{ status: string; canReset: boolean; nextStep?: string }, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        status: z.string(),\n        canReset: z.boolean(),\n        nextStep: z.string().optional(),\n      })), {\n        query: (recoveryId) => `/recovery/${recoveryId}/status`,\n      }),\n    }),\n\n    // Complete MFA recovery\n    completeMFARecovery: builder.mutation<{ success: boolean; temporaryToken?: string }, { recoveryId: string; verificationData: Record<string, any> }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        success: z.boolean(),\n        temporaryToken: z.string().optional(),\n      })), {\n        query: ({ recoveryId, verificationData }) => ({\n          url: `/recovery/${recoveryId}/complete`,\n          method: 'POST',\n          body: verificationData,\n        }),\n      }),\n      invalidatesTags: ['MFAMethod', 'MFASettings'],\n    }),\n\n    // Get MFA analytics\n    getMFAAnalytics: builder.query<MFAAnalytics, void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        userId: z.string(),\n        totalMethods: z.number(),\n        methodBreakdown: z.record(z.number()),\n        loginAttempts: z.object({\n          successful: z.number(),\n          failed: z.number(),\n          locked: z.number(),\n        }),\n        securityScore: z.number(),\n        recommendations: z.array(z.string()),\n        lastActivity: z.string(),\n      })), {\n        query: () => '/analytics',\n      }),\n      providesTags: ['MFAAnalytics'],\n    }),\n\n    // Get MFA audit log\n    getMFAAuditLog: builder.query<MFAAuditEvent[], { limit?: number; offset?: number }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.object({\n        id: z.string(),\n        userId: z.string(),\n        action: z.enum(['setup', 'verify', 'disable', 'recover', 'login_attempt']),\n        methodType: z.enum(['totp', 'sms', 'email', 'backup_codes', 'webauthn', 'biometric']).optional(),\n        methodId: z.string().optional(),\n        success: z.boolean(),\n        ipAddress: z.string(),\n        userAgent: z.string(),\n        location: z.string().optional(),\n        timestamp: z.string(),\n        details: z.record(z.any()).optional(),\n      }))), {\n        query: ({ limit = 50, offset = 0 }) => ({\n          url: '/audit',\n          params: { limit, offset },\n        }),\n      }),\n    }),\n\n    // WebAuthn specific endpoints\n    beginWebAuthnRegistration: builder.mutation<PublicKeyCredentialCreationOptions, { deviceName: string }>({\n      query: ({ deviceName }) => ({\n        url: '/webauthn/register/begin',\n        method: 'POST',\n        body: { deviceName },\n      }),\n    }),\n\n    completeWebAuthnRegistration: builder.mutation<WebAuthnMethod, {\n      deviceName: string;\n      credential: PublicKeyCredential\n    }>({\n      query: ({ deviceName, credential }) => ({\n        url: '/webauthn/register/complete',\n        method: 'POST',\n        body: { deviceName, credential },\n      }),\n      invalidatesTags: ['MFAMethod'],\n    }),\n\n    beginWebAuthnAuthentication: builder.mutation<PublicKeyCredentialRequestOptions, { challengeId: string }>({\n      query: ({ challengeId }) => ({\n        url: '/webauthn/authenticate/begin',\n        method: 'POST',\n        body: { challengeId },\n      }),\n    }),\n\n    // Trusted device management\n    getTrustedDevices: builder.query<MFASettings['trustedDevices'], void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.object({\n        id: z.string(),\n        name: z.string(),\n        deviceFingerprint: z.string(),\n        userAgent: z.string(),\n        ipAddress: z.string(),\n        location: z.string().optional(),\n        createdAt: z.string(),\n        lastUsed: z.string(),\n        expiresAt: z.string(),\n      }))), {\n        query: () => '/trusted-devices',\n      }),\n      providesTags: ['MFASettings'],\n    }),\n\n    revokeTrustedDevice: builder.mutation<{ success: boolean }, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({ success: z.boolean() })), {\n        query: (deviceId) => ({\n          url: `/trusted-devices/${deviceId}`,\n          method: 'DELETE',\n        }),\n      }),\n      invalidatesTags: ['MFASettings'],\n    }),\n  }),\n})\n\n// Export hooks\nexport const {\n  useGetMFAMethodsQuery,\n  useGetMFACapabilitiesQuery,\n  useSetupMFAMethodMutation,\n  useVerifyMFASetupMutation,\n  useUpdateMFAMethodMutation,\n  useDeleteMFAMethodMutation,\n  useGetBackupCodesQuery,\n  useGenerateBackupCodesMutation,\n  useGetMFASettingsQuery,\n  useUpdateMFASettingsMutation,\n  useCreateMFAChallengeMutation,\n  useRespondToMFAChallengeMutation,\n  useInitiateMFARecoveryMutation,\n  useCheckMFARecoveryStatusQuery,\n  useCompleteMFARecoveryMutation,\n  useGetMFAAnalyticsQuery,\n  useGetMFAAuditLogQuery,\n  useBeginWebAuthnRegistrationMutation,\n  useCompleteWebAuthnRegistrationMutation,\n  useBeginWebAuthnAuthenticationMutation,\n  useGetTrustedDevicesQuery,\n  useRevokeTrustedDeviceMutation,\n} = mfaApi","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/organizationApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":5,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":6,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":6,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":6,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[173,175],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nimport { withAuthHeader } from './utils'\n\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || '/api/v1'\n\nexport interface Organization {\n  id: string\n  name: string\n  slug: string\n  ownerId: string\n  settings: Record<string, unknown>\n  createdAt: string\n  updatedAt: string\n}\n\nexport type OrganizationMemberRole = 'OWNER' | 'ADMIN' | 'MEMBER'\n\nexport interface OrganizationMember {\n  id: string\n  userId: string\n  organizationId: string\n  role: OrganizationMemberRole\n  joinedAt: string\n}\n\nexport interface OrganizationMemberInfo {\n  userId: string\n  userEmail: string\n  userName: string\n  role: OrganizationMemberRole\n  joinedAt: string\n}\n\nexport interface Invitation {\n  id: string\n  organizationId: string\n  invitedBy: string\n  email: string\n  role: OrganizationMemberRole\n  status: 'PENDING' | 'ACCEPTED' | 'DECLINED' | 'EXPIRED' | 'REVOKED'\n  token: string\n  expiresAt: string\n  createdAt: string\n}\n\nexport interface CreateOrganizationRequest {\n  name: string\n  slug: string\n  settings?: Record<string, unknown>\n}\n\nexport interface UpdateOrganizationRequest {\n  name: string\n  settings?: Record<string, unknown>\n}\n\nexport interface UpdateSettingsRequest {\n  settings: Record<string, unknown>\n}\n\nexport interface InviteUserRequest {\n  email: string\n  role: OrganizationMemberRole\n}\n\nexport interface UpdateMemberRoleRequest {\n  role: OrganizationMemberRole\n}\n\nexport const organizationApi = createApi({\n  reducerPath: 'organizationApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/organizations`,\n    prepareHeaders: (headers, { getState }) => withAuthHeader(headers, getState),\n  }),\n  tagTypes: ['Organization', 'OrganizationMember', 'Invitation'],\n  endpoints: builder => ({\n    createOrganization: builder.mutation<\n      Organization,\n      CreateOrganizationRequest\n    >({\n      query: body => ({\n        url: '',\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Organization'],\n    }),\n\n    getOrganization: builder.query<Organization, string>({\n      query: organizationId => `/${organizationId}`,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'Organization', id: organizationId },\n      ],\n    }),\n\n    getOrganizationBySlug: builder.query<Organization, string>({\n      query: slug => `/slug/${slug}`,\n      providesTags: result =>\n        result ? [{ type: 'Organization', id: result.id }] : [],\n    }),\n\n    getUserOrganizations: builder.query<Organization[], void>({\n      query: () => '',\n      providesTags: ['Organization'],\n    }),\n\n    updateOrganization: builder.mutation<\n      Organization,\n      {\n        organizationId: string\n      } & UpdateOrganizationRequest\n    >({\n      query: ({ organizationId, ...body }) => ({\n        url: `/${organizationId}`,\n        method: 'PUT',\n        body,\n      }),\n      invalidatesTags: (_result, _error, { organizationId }) => [\n        { type: 'Organization', id: organizationId },\n      ],\n    }),\n\n    updateSettings: builder.mutation<\n      Organization,\n      {\n        organizationId: string\n      } & UpdateSettingsRequest\n    >({\n      query: ({ organizationId, ...body }) => ({\n        url: `/${organizationId}/settings`,\n        method: 'PUT',\n        body,\n      }),\n      invalidatesTags: (_result, _error, { organizationId }) => [\n        { type: 'Organization', id: organizationId },\n      ],\n    }),\n\n    deleteOrganization: builder.mutation<void, string>({\n      query: organizationId => ({\n        url: `/${organizationId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Organization'],\n    }),\n\n    getOrganizationMembers: builder.query<OrganizationMemberInfo[], string>({\n      query: organizationId => `/${organizationId}/members`,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'OrganizationMember', id: organizationId },\n      ],\n    }),\n\n    inviteUser: builder.mutation<\n      Invitation,\n      {\n        organizationId: string\n      } & InviteUserRequest\n    >({\n      query: ({ organizationId, ...body }) => ({\n        url: `/${organizationId}/invitations`,\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: (_result, _error, { organizationId }) => [\n        { type: 'Invitation', id: organizationId },\n      ],\n    }),\n\n    acceptInvitation: builder.mutation<OrganizationMember, string>({\n      query: token => ({\n        url: `/invitations/${token}/accept`,\n        method: 'POST',\n      }),\n      invalidatesTags: ['Organization', 'OrganizationMember'],\n    }),\n\n    declineInvitation: builder.mutation<void, string>({\n      query: token => ({\n        url: `/invitations/${token}/decline`,\n        method: 'POST',\n      }),\n      invalidatesTags: ['Invitation'],\n    }),\n\n    getPendingInvitations: builder.query<Invitation[], string>({\n      query: organizationId => `/${organizationId}/invitations`,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'Invitation', id: organizationId },\n      ],\n    }),\n\n    revokeInvitation: builder.mutation<void, string>({\n      query: invitationId => ({\n        url: `/invitations/${invitationId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Invitation'],\n    }),\n\n    removeMember: builder.mutation<\n      void,\n      {\n        organizationId: string\n        userId: string\n      }\n    >({\n      query: ({ organizationId, userId }) => ({\n        url: `/${organizationId}/members/${userId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (_result, _error, { organizationId }) => [\n        { type: 'OrganizationMember', id: organizationId },\n      ],\n    }),\n\n    updateMemberRole: builder.mutation<\n      OrganizationMember,\n      {\n        organizationId: string\n        userId: string\n      } & UpdateMemberRoleRequest\n    >({\n      query: ({ organizationId, userId, ...body }) => ({\n        url: `/${organizationId}/members/${userId}/role`,\n        method: 'PUT',\n        body,\n      }),\n      invalidatesTags: (_result, _error, { organizationId }) => [\n        { type: 'OrganizationMember', id: organizationId },\n      ],\n    }),\n  }),\n})\n\nexport const {\n  useCreateOrganizationMutation,\n  useGetOrganizationQuery,\n  useGetOrganizationBySlugQuery,\n  useGetUserOrganizationsQuery,\n  useUpdateOrganizationMutation,\n  useUpdateSettingsMutation,\n  useDeleteOrganizationMutation,\n  useGetOrganizationMembersQuery,\n  useInviteUserMutation,\n  useAcceptInvitationMutation,\n  useDeclineInvitationMutation,\n  useGetPendingInvitationsQuery,\n  useRevokeInvitationMutation,\n  useRemoveMemberMutation,\n  useUpdateMemberRoleMutation,\n  // Export for lazy queries\n  useLazyGetOrganizationQuery,\n  useLazyGetOrganizationBySlugQuery,\n} = organizationApi\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/paymentApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":15,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":16,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":16,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":16,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[427,429],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4617,4620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4617,4620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":148,"column":45,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":148,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":148,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5245,5248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5245,5248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":168,"column":45,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":168,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":168,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5784,5787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5784,5787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":181,"column":45,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":181,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":181,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7931,7934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7931,7934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":254,"column":45,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":254,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":254,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":58}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createApi } from '@reduxjs/toolkit/query/react'\nimport { z } from 'zod'\n\nimport { withAuthHeader } from './utils'\n\nimport { createValidatedBaseQuery, createValidatedEndpoint, wrapSuccessResponse } from '@/lib/api/validation'\nimport {\n  PaymentSchema,\n  PaymentMethodSchema,\n  PaginatedResponseSchema,\n  type Payment,\n  type PaymentMethod,\n} from '@/types/api'\n\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || '/api/v1'\n\n// Payment Intent schemas\nconst PaymentIntentSchema = z.object({\n  id: z.string(),\n  clientSecret: z.string(),\n  status: z.string(),\n  amount: z.number().positive(),\n  currency: z.string().length(3),\n  description: z.string().nullable(),\n  metadata: z.record(z.string()).nullable(),\n});\n\n// Setup Intent schemas for adding payment methods\nconst SetupIntentSchema = z.object({\n  id: z.string(),\n  client_secret: z.string(),\n  status: z.string(),\n  usage: z.string().optional(),\n});\n\nconst CreateSetupIntentRequestSchema = z.object({\n  organizationId: z.string().uuid(),\n  usage: z.string().default('off_session').optional(),\n});\n\nconst PaymentStatisticsSchema = z.object({\n  totalSuccessfulPayments: z.number().nonnegative(),\n  totalAmount: z.number().nonnegative(),\n  recentAmount: z.number().nonnegative(),\n});\n\nconst CreatePaymentIntentRequestSchema = z.object({\n  organizationId: z.string().uuid(),\n  amount: z.number().positive(),\n  currency: z.string().length(3),\n  description: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n});\n\nconst ConfirmPaymentIntentRequestSchema = z.object({\n  paymentMethodId: z.string(),\n});\n\nconst AttachPaymentMethodRequestSchema = z.object({\n  organizationId: z.string().uuid(),\n  stripePaymentMethodId: z.string(),\n});\n\n// Export types\nexport type PaymentIntent = z.infer<typeof PaymentIntentSchema>;\nexport type SetupIntent = z.infer<typeof SetupIntentSchema>;\nexport type PaymentStatistics = z.infer<typeof PaymentStatisticsSchema>;\nexport type CreatePaymentIntentRequest = z.infer<typeof CreatePaymentIntentRequestSchema>;\nexport type CreateSetupIntentRequest = z.infer<typeof CreateSetupIntentRequestSchema>;\nexport type ConfirmPaymentIntentRequest = z.infer<typeof ConfirmPaymentIntentRequestSchema>;\nexport type AttachPaymentMethodRequest = z.infer<typeof AttachPaymentMethodRequestSchema>;\n\nexport const paymentApi = createApi({\n  reducerPath: 'paymentApi',\n  baseQuery: createValidatedBaseQuery(`${API_BASE_URL}/payments`, {\n    prepareHeaders: (headers, { getState }) => withAuthHeader(headers, getState),\n  }),\n  tagTypes: ['Payment', 'PaymentMethod', 'PaymentStatistics', 'SetupIntent'],\n  endpoints: builder => ({\n    createSetupIntent: builder.mutation<\n      SetupIntent,\n      CreateSetupIntentRequest\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(SetupIntentSchema), {\n        query: body => {\n          // Validate request data\n          CreateSetupIntentRequestSchema.parse(body);\n          return {\n            url: '/setup-intents',\n            method: 'POST',\n            body,\n          };\n        },\n        method: 'POST',\n      }),\n      invalidatesTags: ['SetupIntent'],\n    }),\n\n    createPaymentIntent: builder.mutation<\n      PaymentIntent,\n      CreatePaymentIntentRequest\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(PaymentIntentSchema), {\n        query: body => {\n          // Validate request data\n          CreatePaymentIntentRequestSchema.parse(body);\n          return {\n            url: '/intents',\n            method: 'POST',\n            body,\n          };\n        },\n        method: 'POST',\n      }),\n      invalidatesTags: ['Payment'],\n    }),\n\n    confirmPaymentIntent: builder.mutation<\n      PaymentIntent,\n      {\n        paymentIntentId: string\n      } & ConfirmPaymentIntentRequest\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(PaymentIntentSchema), {\n        query: ({ paymentIntentId, ...body }) => {\n          // Validate request data\n          ConfirmPaymentIntentRequestSchema.parse(body);\n          z.string().uuid().parse(paymentIntentId);\n          return {\n            url: `/intents/${paymentIntentId}/confirm`,\n            method: 'POST',\n            body,\n          };\n        },\n        method: 'POST',\n      }),\n      invalidatesTags: ['Payment', 'PaymentStatistics'],\n    }),\n\n    getOrganizationPayments: builder.query<Payment[], string>({\n      ...createValidatedEndpoint(PaginatedResponseSchema(PaymentSchema), {\n        query: organizationId => {\n          z.string().uuid().parse(organizationId);\n          return `/organizations/${organizationId}`;\n        },\n      }),\n      transformResponse: (response: any) => response.data.items,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'Payment', id: organizationId },\n      ],\n    }),\n\n    getPaymentsByStatus: builder.query<\n      Payment[],\n      {\n        organizationId: string\n        status: string\n      }\n    >({\n      ...createValidatedEndpoint(PaginatedResponseSchema(PaymentSchema), {\n        query: ({ organizationId, status }) => {\n          z.string().uuid().parse(organizationId);\n          z.string().parse(status);\n          return `/organizations/${organizationId}/status/${status}`;\n        },\n      }),\n      transformResponse: (response: any) => response.data.items,\n      providesTags: (_result, _error, { organizationId, status }) => [\n        { type: 'Payment', id: `${organizationId}-${status}` },\n      ],\n    }),\n\n    getPaymentStatistics: builder.query<PaymentStatistics, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(PaymentStatisticsSchema), {\n        query: organizationId => {\n          z.string().uuid().parse(organizationId);\n          return `/organizations/${organizationId}/statistics`;\n        },\n      }),\n      transformResponse: (response: any) => response.data,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'PaymentStatistics', id: organizationId },\n      ],\n    }),\n\n    attachPaymentMethod: builder.mutation<\n      PaymentMethod,\n      AttachPaymentMethodRequest\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(PaymentMethodSchema), {\n        query: body => {\n          // Validate request data\n          AttachPaymentMethodRequestSchema.parse(body);\n          return {\n            url: '/methods',\n            method: 'POST',\n            body,\n          };\n        },\n        method: 'POST',\n      }),\n      invalidatesTags: ['PaymentMethod'],\n    }),\n\n    detachPaymentMethod: builder.mutation<\n      void,\n      {\n        paymentMethodId: string\n        organizationId: string\n      }\n    >({\n      query: ({ paymentMethodId, organizationId }) => {\n        z.string().parse(paymentMethodId);\n        z.string().uuid().parse(organizationId);\n        return {\n          url: `/methods/${paymentMethodId}`,\n          method: 'DELETE',\n          params: { organizationId },\n        };\n      },\n      invalidatesTags: ['PaymentMethod'],\n    }),\n\n    setDefaultPaymentMethod: builder.mutation<\n      PaymentMethod,\n      {\n        paymentMethodId: string\n        organizationId: string\n      }\n    >({\n      ...createValidatedEndpoint(wrapSuccessResponse(PaymentMethodSchema), {\n        query: ({ paymentMethodId, organizationId }) => {\n          z.string().parse(paymentMethodId);\n          z.string().uuid().parse(organizationId);\n          return {\n            url: `/methods/${paymentMethodId}/default`,\n            method: 'PUT',\n            params: { organizationId },\n          };\n        },\n        method: 'PUT',\n      }),\n      invalidatesTags: ['PaymentMethod'],\n    }),\n\n    getOrganizationPaymentMethods: builder.query<PaymentMethod[], string>({\n      ...createValidatedEndpoint(PaginatedResponseSchema(PaymentMethodSchema), {\n        query: organizationId => {\n          z.string().uuid().parse(organizationId);\n          return `/methods/organizations/${organizationId}`;\n        },\n      }),\n      transformResponse: (response: any) => response.data.items,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'PaymentMethod', id: organizationId },\n      ],\n    }),\n  }),\n})\n\nexport const {\n  useCreateSetupIntentMutation,\n  useCreatePaymentIntentMutation,\n  useConfirmPaymentIntentMutation,\n  useGetOrganizationPaymentsQuery,\n  useGetPaymentsByStatusQuery,\n  useGetPaymentStatisticsQuery,\n  useAttachPaymentMethodMutation,\n  useDetachPaymentMethodMutation,\n  useSetDefaultPaymentMethodMutation,\n  useGetOrganizationPaymentMethodsQuery,\n  // Export for lazy queries\n  useLazyGetOrganizationPaymentsQuery,\n  useLazyGetPaymentStatisticsQuery,\n} = paymentApi\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/rbacApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccessReviewCampaign' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":118,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":118,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3807,3809],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'organizationId' is defined but never used.","line":277,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":277,"endColumn":64}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * RBAC API Service\n *\n * RTK Query API service for Role-Based Access Control operations:\n * - Role and permission management\n * - User role assignments\n * - Permission evaluation\n * - Audit trails and compliance\n * - Access reviews and approval workflows\n */\n\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { z } from 'zod'\n\nimport { createValidatedBaseQuery, createValidatedEndpoint, wrapSuccessResponse } from '@/lib/api/validation'\nimport {\n  Role,\n  Permission,\n  UserRoleAssignment,\n  RoleTemplate,\n  PermissionGroup,\n  RBACAnalytics,\n  RBACauditEvent,\n  PermissionEvaluationResult,\n  PermissionRequest,\n  AccessReviewCampaign,\n  RBACConfiguration,\n  CreateRoleForm,\n  AssignRoleForm,\n  PermissionRequestForm,\n  PermissionContext,\n  UserWithRoles,\n} from '@/types/rbac'\n\n// Validation schemas\nconst PermissionSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  resource: z.enum(['organization', 'user', 'payment', 'subscription', 'billing', 'analytics', 'audit', 'settings', 'mfa', 'api_keys', 'webhooks', 'integrations']),\n  action: z.enum(['create', 'read', 'update', 'delete', 'manage', 'approve', 'export', 'invite', 'revoke']),\n  conditions: z.array(z.object({\n    field: z.string(),\n    operator: z.enum(['equals', 'not_equals', 'in', 'not_in', 'greater_than', 'less_than', 'contains']),\n    value: z.union([z.string(), z.array(z.string()), z.number(), z.boolean()]),\n    description: z.string().optional(),\n  })).optional(),\n  scope: z.enum(['organization', 'system', 'personal']),\n  category: z.string(),\n  isSystemPermission: z.boolean(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n})\n\nconst RoleSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  slug: z.string(),\n  permissions: z.array(PermissionSchema),\n  isSystemRole: z.boolean(),\n  isCustomRole: z.boolean(),\n  organizationId: z.string().optional(),\n  hierarchy: z.number(),\n  inheritsFrom: z.array(z.string()).optional(),\n  color: z.string(),\n  icon: z.string().optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  createdBy: z.string(),\n  statistics: z.object({\n    userCount: z.number(),\n    lastAssigned: z.string().optional(),\n  }),\n})\n\nconst UserRoleAssignmentSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  roleId: z.string(),\n  organizationId: z.string().optional(),\n  assignedBy: z.string(),\n  assignedAt: z.string(),\n  expiresAt: z.string().optional(),\n  conditions: z.array(z.object({\n    type: z.enum(['time_based', 'ip_restricted', 'device_restricted', 'location_restricted']),\n    parameters: z.record(z.any()),\n    description: z.string(),\n  })).optional(),\n  isActive: z.boolean(),\n  metadata: z.record(z.any()).optional(),\n})\n\nconst CreateRoleSchema = z.object({\n  name: z.string().min(1, 'Role name is required').max(50, 'Role name must be 50 characters or less'),\n  description: z.string().max(200, 'Description must be 200 characters or less'),\n  permissions: z.array(z.string()),\n  color: z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Color must be a valid hex color'),\n  inheritsFrom: z.array(z.string()).optional(),\n})\n\nconst AssignRoleSchema = z.object({\n  userId: z.string(),\n  roleIds: z.array(z.string()).min(1, 'At least one role must be assigned'),\n  expiresAt: z.string().optional(),\n  justification: z.string().optional(),\n})\n\nconst PermissionRequestSchema = z.object({\n  targetUserId: z.string().optional(),\n  requestType: z.enum(['role_assignment', 'permission_grant', 'resource_access']),\n  requestedRoles: z.array(z.string()).optional(),\n  requestedPermissions: z.array(z.string()).optional(),\n  justification: z.string().min(10, 'Justification must be at least 10 characters'),\n  urgency: z.enum(['low', 'medium', 'high']),\n})\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api/v1'\n\nexport const rbacApi = createApi({\n  reducerPath: 'rbacApi',\n  baseQuery: createValidatedBaseQuery(`${API_BASE_URL}/rbac`),\n  tagTypes: [\n    'Role',\n    'Permission',\n    'UserRoleAssignment',\n    'RoleTemplate',\n    'PermissionGroup',\n    'RBACAnalytics',\n    'PermissionRequest',\n    'AccessReview',\n    'RBACConfiguration',\n    'AuditEvent',\n  ],\n  endpoints: (builder) => ({\n\n    // ==== ROLES MANAGEMENT ====\n\n    // Get all roles for organization\n    getRoles: builder.query<Role[], { organizationId?: string; includeSystem?: boolean }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(RoleSchema)), {\n        query: ({ organizationId, includeSystem = true }) => ({\n          url: '/roles',\n          params: { organizationId, includeSystem },\n        }),\n      }),\n      providesTags: ['Role'],\n    }),\n\n    // Get specific role by ID\n    getRole: builder.query<Role, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(RoleSchema), {\n        query: (roleId) => `/roles/${roleId}`,\n      }),\n      providesTags: (result, error, roleId) => [{ type: 'Role', id: roleId }],\n    }),\n\n    // Create new role\n    createRole: builder.mutation<Role, CreateRoleForm & { organizationId: string }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(RoleSchema), {\n        query: (roleData) => {\n          CreateRoleSchema.parse(roleData)\n          return {\n            url: '/roles',\n            method: 'POST',\n            body: roleData,\n          }\n        },\n      }),\n      invalidatesTags: ['Role', 'RBACAnalytics'],\n    }),\n\n    // Update existing role\n    updateRole: builder.mutation<Role, { roleId: string; updates: Partial<CreateRoleForm> }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(RoleSchema), {\n        query: ({ roleId, updates }) => ({\n          url: `/roles/${roleId}`,\n          method: 'PATCH',\n          body: updates,\n        }),\n      }),\n      invalidatesTags: (result, error, { roleId }) => [\n        { type: 'Role', id: roleId },\n        'Role',\n        'UserRoleAssignment',\n        'RBACAnalytics',\n      ],\n    }),\n\n    // Delete role\n    deleteRole: builder.mutation<{ success: boolean }, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({ success: z.boolean() })), {\n        query: (roleId) => ({\n          url: `/roles/${roleId}`,\n          method: 'DELETE',\n        }),\n      }),\n      invalidatesTags: ['Role', 'UserRoleAssignment', 'RBACAnalytics'],\n    }),\n\n    // ==== PERMISSIONS MANAGEMENT ====\n\n    // Get all permissions\n    getPermissions: builder.query<Permission[], { category?: string; resource?: string }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(PermissionSchema)), {\n        query: ({ category, resource }) => ({\n          url: '/permissions',\n          params: { category, resource },\n        }),\n      }),\n      providesTags: ['Permission'],\n    }),\n\n    // Get permission groups for UI organization\n    getPermissionGroups: builder.query<PermissionGroup[], void>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.object({\n        id: z.string(),\n        name: z.string(),\n        description: z.string(),\n        category: z.string(),\n        permissions: z.array(PermissionSchema),\n        icon: z.string().optional(),\n        order: z.number(),\n      }))), {\n        query: () => '/permissions/groups',\n      }),\n      providesTags: ['PermissionGroup'],\n    }),\n\n    // ==== USER ROLE ASSIGNMENTS ====\n\n    // Get user's role assignments\n    getUserRoleAssignments: builder.query<UserRoleAssignment[], string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(UserRoleAssignmentSchema)), {\n        query: (userId) => `/users/${userId}/role-assignments`,\n      }),\n      providesTags: (result, error, userId) => [\n        { type: 'UserRoleAssignment', id: userId },\n      ],\n    }),\n\n    // Get organization's role assignments\n    getOrganizationRoleAssignments: builder.query<UserRoleAssignment[], string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(UserRoleAssignmentSchema)), {\n        query: (organizationId) => `/organizations/${organizationId}/role-assignments`,\n      }),\n      providesTags: ['UserRoleAssignment'],\n    }),\n\n    // Get users with their roles (for organization overview)\n    getUsersWithRoles: builder.query<UserWithRoles[], string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.object({\n        id: z.string(),\n        name: z.string(),\n        email: z.string(),\n        assignments: z.array(UserRoleAssignmentSchema),\n        effectiveRoles: z.array(RoleSchema),\n        effectivePermissions: z.array(PermissionSchema),\n      }))), {\n        query: (organizationId) => `/organizations/${organizationId}/users-with-roles`,\n      }),\n      providesTags: ['UserRoleAssignment'],\n    }),\n\n    // Assign roles to user\n    assignRoles: builder.mutation<UserRoleAssignment[], AssignRoleForm & { organizationId: string }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(UserRoleAssignmentSchema)), {\n        query: (assignmentData) => {\n          AssignRoleSchema.parse(assignmentData)\n          return {\n            url: '/role-assignments',\n            method: 'POST',\n            body: assignmentData,\n          }\n        },\n      }),\n      invalidatesTags: (result, error, { userId, organizationId }) => [\n        { type: 'UserRoleAssignment', id: userId },\n        'UserRoleAssignment',\n        'RBACAnalytics',\n      ],\n    }),\n\n    // Revoke role assignment\n    revokeRoleAssignment: builder.mutation<{ success: boolean }, { assignmentId: string; reason?: string }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({ success: z.boolean() })), {\n        query: ({ assignmentId, reason }) => ({\n          url: `/role-assignments/${assignmentId}`,\n          method: 'DELETE',\n          body: { reason },\n        }),\n      }),\n      invalidatesTags: ['UserRoleAssignment', 'RBACAnalytics'],\n    }),\n\n    // ==== PERMISSION EVALUATION ====\n\n    // Check if user has permission for specific action\n    checkPermission: builder.query<PermissionEvaluationResult, PermissionContext>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        allowed: z.boolean(),\n        reason: z.string(),\n        matchedPermissions: z.array(PermissionSchema),\n        deniedBy: z.array(PermissionSchema).optional(),\n        conditions: z.array(z.object({\n          field: z.string(),\n          operator: z.enum(['equals', 'not_equals', 'in', 'not_in', 'greater_than', 'less_than', 'contains']),\n          value: z.union([z.string(), z.array(z.string()), z.number(), z.boolean()]),\n          description: z.string().optional(),\n        })).optional(),\n        requiresApproval: z.boolean().optional(),\n      })), {\n        query: (context) => ({\n          url: '/permissions/check',\n          method: 'POST',\n          body: context,\n        }),\n      }),\n    }),\n\n    // Get user's effective permissions (all permissions from all roles)\n    getUserEffectivePermissions: builder.query<Permission[], { userId: string; organizationId?: string }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(PermissionSchema)), {\n        query: ({ userId, organizationId }) => ({\n          url: `/users/${userId}/effective-permissions`,\n          params: { organizationId },\n        }),\n      }),\n    }),\n\n    // ==== ROLE TEMPLATES ====\n\n    // Get available role templates\n    getRoleTemplates: builder.query<RoleTemplate[], { category?: string }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.object({\n        id: z.string(),\n        name: z.string(),\n        description: z.string(),\n        category: z.enum(['management', 'financial', 'technical', 'support', 'custom']),\n        permissions: z.array(z.string()),\n        recommendedFor: z.array(z.string()),\n        tags: z.array(z.string()),\n        isPopular: z.boolean(),\n      }))), {\n        query: ({ category }) => ({\n          url: '/role-templates',\n          params: { category },\n        }),\n      }),\n      providesTags: ['RoleTemplate'],\n    }),\n\n    // Create role from template\n    createRoleFromTemplate: builder.mutation<Role, {\n      templateId: string;\n      organizationId: string;\n      customizations?: Partial<CreateRoleForm>;\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(RoleSchema), {\n        query: ({ templateId, organizationId, customizations }) => ({\n          url: `/role-templates/${templateId}/create-role`,\n          method: 'POST',\n          body: { organizationId, customizations },\n        }),\n      }),\n      invalidatesTags: ['Role', 'RBACAnalytics'],\n    }),\n\n    // ==== PERMISSION REQUESTS & APPROVAL ====\n\n    // Get permission requests (for approval)\n    getPermissionRequests: builder.query<PermissionRequest[], {\n      status?: 'pending' | 'approved' | 'denied' | 'expired';\n      organizationId: string;\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.object({\n        id: z.string(),\n        requesterId: z.string(),\n        requesterName: z.string(),\n        targetUserId: z.string().optional(),\n        targetUserName: z.string().optional(),\n        organizationId: z.string(),\n        requestType: z.enum(['role_assignment', 'permission_grant', 'resource_access']),\n        requestedRoles: z.array(z.string()).optional(),\n        requestedPermissions: z.array(z.string()).optional(),\n        resourceDetails: z.object({\n          type: z.enum(['organization', 'user', 'payment', 'subscription', 'billing', 'analytics', 'audit', 'settings', 'mfa', 'api_keys', 'webhooks', 'integrations']),\n          id: z.string(),\n          actions: z.array(z.enum(['create', 'read', 'update', 'delete', 'manage', 'approve', 'export', 'invite', 'revoke'])),\n        }).optional(),\n        justification: z.string(),\n        urgency: z.enum(['low', 'medium', 'high']),\n        status: z.enum(['pending', 'approved', 'denied', 'expired']),\n        reviewers: z.array(z.object({\n          userId: z.string(),\n          userName: z.string(),\n          status: z.enum(['pending', 'approved', 'denied']),\n          comment: z.string().optional(),\n          reviewedAt: z.string().optional(),\n        })),\n        createdAt: z.string(),\n        expiresAt: z.string(),\n        approvedAt: z.string().optional(),\n        deniedAt: z.string().optional(),\n        metadata: z.record(z.any()).optional(),\n      }))), {\n        query: ({ status, organizationId }) => ({\n          url: '/permission-requests',\n          params: { status, organizationId },\n        }),\n      }),\n      providesTags: ['PermissionRequest'],\n    }),\n\n    // Create permission request\n    createPermissionRequest: builder.mutation<PermissionRequest, PermissionRequestForm & { organizationId: string }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        id: z.string(),\n        requesterId: z.string(),\n        requesterName: z.string(),\n        organizationId: z.string(),\n        requestType: z.enum(['role_assignment', 'permission_grant', 'resource_access']),\n        status: z.enum(['pending', 'approved', 'denied', 'expired']),\n        createdAt: z.string(),\n        expiresAt: z.string(),\n      })), {\n        query: (requestData) => {\n          PermissionRequestSchema.parse(requestData)\n          return {\n            url: '/permission-requests',\n            method: 'POST',\n            body: requestData,\n          }\n        },\n      }),\n      invalidatesTags: ['PermissionRequest'],\n    }),\n\n    // Review permission request (approve/deny)\n    reviewPermissionRequest: builder.mutation<PermissionRequest, {\n      requestId: string;\n      action: 'approve' | 'deny';\n      comment?: string;\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        id: z.string(),\n        status: z.enum(['pending', 'approved', 'denied', 'expired']),\n        reviewedAt: z.string(),\n      })), {\n        query: ({ requestId, action, comment }) => ({\n          url: `/permission-requests/${requestId}/review`,\n          method: 'POST',\n          body: { action, comment },\n        }),\n      }),\n      invalidatesTags: ['PermissionRequest', 'UserRoleAssignment'],\n    }),\n\n    // ==== ANALYTICS & REPORTING ====\n\n    // Get RBAC analytics\n    getRBACAnalytics: builder.query<RBACAnalytics, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        totalRoles: z.number(),\n        totalPermissions: z.number(),\n        totalAssignments: z.number(),\n        roleDistribution: z.record(z.number()),\n        permissionUsage: z.record(z.number()),\n        riskScore: z.number(),\n        recommendations: z.array(z.object({\n          type: z.enum(['security', 'efficiency', 'compliance']),\n          severity: z.enum(['low', 'medium', 'high', 'critical']),\n          title: z.string(),\n          description: z.string(),\n          action: z.string(),\n          impact: z.string(),\n        })),\n        complianceStatus: z.object({\n          soxCompliant: z.boolean(),\n          gdprCompliant: z.boolean(),\n          iso27001Compliant: z.boolean(),\n          pciCompliant: z.boolean(),\n          customCompliance: z.record(z.boolean()),\n          lastAuditDate: z.string().optional(),\n          nextAuditDate: z.string().optional(),\n        }),\n      })), {\n        query: (organizationId) => `/organizations/${organizationId}/analytics`,\n      }),\n      providesTags: ['RBACAnalytics'],\n    }),\n\n    // Get RBAC audit events\n    getRBACAuditLog: builder.query<RBACauditEvent[], {\n      organizationId: string;\n      eventType?: string;\n      limit?: number;\n      offset?: number;\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.array(z.object({\n        id: z.string(),\n        eventType: z.enum(['role_created', 'role_updated', 'role_deleted', 'permission_granted', 'permission_revoked', 'assignment_created', 'assignment_expired']),\n        entityType: z.enum(['role', 'permission', 'assignment']),\n        entityId: z.string(),\n        actorId: z.string(),\n        actorName: z.string(),\n        targetUserId: z.string().optional(),\n        targetUserName: z.string().optional(),\n        organizationId: z.string().optional(),\n        changes: z.record(z.object({\n          from: z.any(),\n          to: z.any(),\n        })),\n        reason: z.string().optional(),\n        ipAddress: z.string(),\n        userAgent: z.string(),\n        timestamp: z.string(),\n        metadata: z.record(z.any()).optional(),\n      }))), {\n        query: ({ organizationId, eventType, limit = 50, offset = 0 }) => ({\n          url: `/organizations/${organizationId}/audit`,\n          params: { eventType, limit, offset },\n        }),\n      }),\n      providesTags: ['AuditEvent'],\n    }),\n\n    // ==== CONFIGURATION ====\n\n    // Get RBAC configuration\n    getRBACConfiguration: builder.query<RBACConfiguration, string>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        organizationId: z.string(),\n        settings: z.object({\n          enableRoleInheritance: z.boolean(),\n          enableDynamicRoles: z.boolean(),\n          enableApprovalWorkflows: z.boolean(),\n          defaultRoleForNewUsers: z.string().optional(),\n          maxRolesPerUser: z.number(),\n          roleAssignmentRequiresApproval: z.boolean(),\n          sensitivePermissionsRequireApproval: z.array(z.string()),\n          auditRetentionDays: z.number(),\n          enableResourceOwnership: z.boolean(),\n        }),\n        complianceSettings: z.object({\n          enableSoxCompliance: z.boolean(),\n          enableGdprCompliance: z.boolean(),\n          enableAuditLogging: z.boolean(),\n          requireJustificationForRoleChanges: z.boolean(),\n          enablePeriodicAccessReview: z.boolean(),\n          accessReviewFrequencyDays: z.number(),\n        }),\n        notifications: z.object({\n          notifyOnRoleChanges: z.boolean(),\n          notifyOnPermissionChanges: z.boolean(),\n          notifyOnAccessRequests: z.boolean(),\n          notifyOnComplianceViolations: z.boolean(),\n        }),\n      })), {\n        query: (organizationId) => `/organizations/${organizationId}/configuration`,\n      }),\n      providesTags: ['RBACConfiguration'],\n    }),\n\n    // Update RBAC configuration\n    updateRBACConfiguration: builder.mutation<RBACConfiguration, {\n      organizationId: string;\n      updates: Partial<RBACConfiguration>;\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        organizationId: z.string(),\n        settings: z.record(z.any()),\n        complianceSettings: z.record(z.any()),\n        notifications: z.record(z.any()),\n      })), {\n        query: ({ organizationId, updates }) => ({\n          url: `/organizations/${organizationId}/configuration`,\n          method: 'PATCH',\n          body: updates,\n        }),\n      }),\n      invalidatesTags: ['RBACConfiguration'],\n    }),\n\n  }),\n})\n\n// Export hooks\nexport const {\n  useGetRolesQuery,\n  useGetRoleQuery,\n  useCreateRoleMutation,\n  useUpdateRoleMutation,\n  useDeleteRoleMutation,\n  useGetPermissionsQuery,\n  useGetPermissionGroupsQuery,\n  useGetUserRoleAssignmentsQuery,\n  useGetOrganizationRoleAssignmentsQuery,\n  useGetUsersWithRolesQuery,\n  useAssignRolesMutation,\n  useRevokeRoleAssignmentMutation,\n  useCheckPermissionQuery,\n  useGetUserEffectivePermissionsQuery,\n  useGetRoleTemplatesQuery,\n  useCreateRoleFromTemplateMutation,\n  useGetPermissionRequestsQuery,\n  useCreatePermissionRequestMutation,\n  useReviewPermissionRequestMutation,\n  useGetRBACAnalyticsQuery,\n  useGetRBACAuditLogQuery,\n  useGetRBACConfigurationQuery,\n  useUpdateRBACConfigurationMutation,\n} = rbacApi","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/subscriptionApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":5,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":6,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":6,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":6,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[173,175],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nimport { withAuthHeader } from './utils'\n\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || '/api/v1'\n\nexport type SubscriptionStatus =\n  | 'ACTIVE'\n  | 'TRIALING'\n  | 'PAST_DUE'\n  | 'CANCELED'\n  | 'UNPAID'\n  | 'INCOMPLETE'\n  | 'INCOMPLETE_EXPIRED'\n\nexport interface Subscription {\n  id: string\n  organizationId: string\n  planId: string\n  stripeSubscriptionId: string\n  status: SubscriptionStatus\n  currentPeriodStart: string\n  currentPeriodEnd: string\n  trialEnd: string | null\n  cancelAt: string | null\n  createdAt: string\n  updatedAt: string\n}\n\nexport type PlanInterval = 'DAY' | 'WEEK' | 'MONTH' | 'YEAR'\n\nexport interface Plan {\n  id: string\n  name: string\n  slug: string\n  description: string\n  amount: number\n  currency: string\n  interval: PlanInterval\n  intervalCount: number\n  trialDays: number | null\n  active: boolean\n  displayOrder: number\n  features: Record<string, unknown>\n  createdAt: string\n  updatedAt: string\n}\n\nexport type InvoiceStatus = 'DRAFT' | 'OPEN' | 'PAID' | 'VOID' | 'UNCOLLECTIBLE'\n\nexport interface Invoice {\n  id: string\n  organizationId: string\n  subscriptionId: string\n  stripeInvoiceId: string\n  invoiceNumber: string\n  status: InvoiceStatus\n  subtotalAmount: number\n  taxAmount: number\n  totalAmount: number\n  currency: string\n  dueDate: string | null\n  paidAt: string | null\n  createdAt: string\n}\n\nexport interface SubscriptionStatistics {\n  status: SubscriptionStatus | null\n  totalInvoices: number\n  totalAmount: number\n  recentAmount: number\n}\n\nexport interface CreateSubscriptionRequest {\n  organizationId: string\n  planId: string\n  paymentMethodId?: string\n  trialEligible?: boolean\n}\n\nexport interface ChangePlanRequest {\n  organizationId: string\n  newPlanId: string\n  prorationBehavior?: boolean\n}\n\nexport interface CancelSubscriptionRequest {\n  organizationId: string\n  immediate?: boolean\n  cancelAt?: string\n}\n\nexport interface ReactivateSubscriptionRequest {\n  organizationId: string\n}\n\nexport const subscriptionApi = createApi({\n  reducerPath: 'subscriptionApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}`,\n    prepareHeaders: (headers, { getState }) => withAuthHeader(headers, getState),\n  }),\n  tagTypes: ['Subscription', 'Plan', 'Invoice', 'SubscriptionStatistics'],\n  endpoints: builder => ({\n    // Subscription endpoints\n    createSubscription: builder.mutation<\n      Subscription,\n      CreateSubscriptionRequest\n    >({\n      query: body => ({\n        url: '/subscriptions',\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Subscription', 'SubscriptionStatistics'],\n    }),\n\n    getOrganizationSubscription: builder.query<Subscription, string>({\n      query: organizationId => `/subscriptions/organizations/${organizationId}`,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'Subscription', id: organizationId },\n      ],\n    }),\n\n    changeSubscriptionPlan: builder.mutation<\n      Subscription,\n      {\n        subscriptionId: string\n      } & ChangePlanRequest\n    >({\n      query: ({ subscriptionId, ...body }) => ({\n        url: `/subscriptions/${subscriptionId}/plan`,\n        method: 'PUT',\n        body,\n      }),\n      invalidatesTags: ['Subscription', 'SubscriptionStatistics'],\n    }),\n\n    cancelSubscription: builder.mutation<\n      Subscription,\n      {\n        subscriptionId: string\n      } & CancelSubscriptionRequest\n    >({\n      query: ({ subscriptionId, ...body }) => ({\n        url: `/subscriptions/${subscriptionId}/cancel`,\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Subscription', 'SubscriptionStatistics'],\n    }),\n\n    reactivateSubscription: builder.mutation<\n      Subscription,\n      {\n        subscriptionId: string\n      } & ReactivateSubscriptionRequest\n    >({\n      query: ({ subscriptionId, ...body }) => ({\n        url: `/subscriptions/${subscriptionId}/reactivate`,\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Subscription', 'SubscriptionStatistics'],\n    }),\n\n    getSubscriptionStatistics: builder.query<SubscriptionStatistics, string>({\n      query: organizationId =>\n        `/subscriptions/organizations/${organizationId}/statistics`,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'SubscriptionStatistics', id: organizationId },\n      ],\n    }),\n\n    getOrganizationInvoices: builder.query<Invoice[], string>({\n      query: organizationId =>\n        `/subscriptions/organizations/${organizationId}/invoices`,\n      providesTags: (_result, _error, organizationId) => [\n        { type: 'Invoice', id: organizationId },\n      ],\n    }),\n\n    // Plan endpoints\n    getAvailablePlans: builder.query<Plan[], void>({\n      query: () => '/plans',\n      providesTags: ['Plan'],\n    }),\n\n    getPlansByInterval: builder.query<Plan[], PlanInterval>({\n      query: interval => `/plans/interval/${interval}`,\n      providesTags: ['Plan'],\n    }),\n\n    getPlanBySlug: builder.query<Plan, string>({\n      query: slug => `/plans/slug/${slug}`,\n      providesTags: result => (result ? [{ type: 'Plan', id: result.id }] : []),\n    }),\n  }),\n})\n\nexport const {\n  useCreateSubscriptionMutation,\n  useGetOrganizationSubscriptionQuery,\n  useChangeSubscriptionPlanMutation,\n  useCancelSubscriptionMutation,\n  useReactivateSubscriptionMutation,\n  useGetSubscriptionStatisticsQuery,\n  useGetOrganizationInvoicesQuery,\n  useGetAvailablePlansQuery,\n  useGetPlansByIntervalQuery,\n  useGetPlanBySlugQuery,\n  // Export for lazy queries\n  useLazyGetOrganizationSubscriptionQuery,\n  useLazyGetSubscriptionStatisticsQuery,\n  useLazyGetPlanBySlugQuery,\n} = subscriptionApi\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/tenantApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TenantAnalyticsRequest' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TenantAnalyticsRequestSchema' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":38,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":65},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":38,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":38,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[981,983],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":231,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":231,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6297,6299],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":232,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":232,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6341,6343],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":387,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11398,11401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11398,11401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":399,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":399,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11812,11815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11812,11815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":401,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11858,11861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11858,11861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":406,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":406,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":454,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13465,13468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13465,13468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":498,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14834,14837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14834,14837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":504,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":504,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":556,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":556,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16563,16566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16563,16566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `RootState<{ getTenant: QueryDefinition<{ tenantId: TenantId; }, BaseQueryFn, \"Tenant\" | \"TenantList\" | \"TenantSettings\" | \"TenantAnalytics\" | \"TenantQuotas\" | \"TenantHierarchy\" | \"CrossTenantData\", Tenant, \"tenantApi\", unknown>; ... 19 more ...; importTenantData: MutationDefinition<...>; }, \"Tenant\" | ... 5 more ......`.","line":557,"column":51,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":557,"endColumn":56}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tenant Management API\n *\n * RTK Query API service for multi-tenant operations supporting:\n * - Tenant CRUD operations with validation\n * - Tenant hierarchy management\n * - Cross-tenant analytics and reporting\n * - Tenant-aware routing and middleware\n * - Resource quota management\n */\n\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { z } from 'zod'\n\nimport { createValidatedBaseQuery, createValidatedEndpoint, wrapSuccessResponse } from '@/lib/api/validation'\nimport type {\n  Tenant,\n  TenantId,\n  TenantSlug,\n  TenantContext,\n  TenantAnalytics,\n  TenantSettings,\n  TenantListResponse,\n  TenantCreationResponse,\n  CrossTenantQuery,\n  CrossTenantResult,\n  CreateTenantRequest,\n  UpdateTenantRequest,\n  TenantAnalyticsRequest,\n} from '@/types/multitenancy'\nimport {\n  TenantSchema,\n  CreateTenantRequestSchema,\n  UpdateTenantRequestSchema,\n  TenantAnalyticsRequestSchema,\n} from '@/types/multitenancy'\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api'\n\n// Response schemas\nconst TenantResponseSchema = wrapSuccessResponse(TenantSchema)\nconst TenantListResponseSchema = wrapSuccessResponse(\n  z.object({\n    tenants: z.array(TenantSchema),\n    total: z.number(),\n    page: z.number(),\n    pageSize: z.number(),\n    hasNext: z.boolean(),\n  })\n)\n\nconst TenantCreationResponseSchema = wrapSuccessResponse(\n  z.object({\n    tenant: TenantSchema,\n    setupUrl: z.string().url(),\n    adminCredentials: z.object({\n      username: z.string(),\n      temporaryPassword: z.string(),\n    }).optional(),\n  })\n)\n\nconst TenantAnalyticsResponseSchema = wrapSuccessResponse(\n  z.object({\n    tenantId: z.string(),\n    period: z.enum(['day', 'week', 'month', 'quarter', 'year']),\n    usage: z.object({\n      activeUsers: z.number(),\n      totalSessions: z.number(),\n      apiCalls: z.number(),\n      storageUsed: z.number(),\n      bandwidthUsed: z.number(),\n    }),\n    business: z.object({\n      revenue: z.number(),\n      subscriptions: z.number(),\n      churnRate: z.number(),\n      growthRate: z.number(),\n    }),\n    performance: z.object({\n      avgResponseTime: z.number(),\n      errorRate: z.number(),\n      uptime: z.number(),\n    }),\n    security: z.object({\n      failedLogins: z.number(),\n      suspiciousActivity: z.number(),\n      mfaAdoption: z.number(),\n    }),\n  })\n)\n\nconst TenantSettingsResponseSchema = wrapSuccessResponse(\n  z.object({\n    tenantId: z.string(),\n    general: z.object({\n      allowUserRegistration: z.boolean(),\n      defaultUserRole: z.string(),\n      emailVerificationRequired: z.boolean(),\n      userInviteExpirationDays: z.number(),\n    }),\n    security: z.object({\n      passwordPolicy: z.object({\n        minLength: z.number(),\n        requireUppercase: z.boolean(),\n        requireLowercase: z.boolean(),\n        requireNumbers: z.boolean(),\n        requireSpecialChars: z.boolean(),\n        preventReuse: z.number(),\n        expirationDays: z.number().optional(),\n      }),\n      sessionSettings: z.object({\n        timeoutMinutes: z.number(),\n        maxConcurrentSessions: z.number(),\n        requireReauthForSensitive: z.boolean(),\n      }),\n      auditSettings: z.object({\n        enabled: z.boolean(),\n        retentionDays: z.number(),\n        logLevel: z.enum(['basic', 'detailed', 'comprehensive']),\n        realTimeAlerts: z.boolean(),\n      }),\n    }),\n    integrations: z.object({\n      stripe: z.object({\n        publishableKey: z.string(),\n        webhookSecret: z.string(),\n        enabledPaymentMethods: z.array(z.string()),\n        currency: z.string(),\n      }),\n      oauth: z.object({\n        providers: z.array(z.object({\n          name: z.string(),\n          clientId: z.string(),\n          enabled: z.boolean(),\n          scopes: z.array(z.string()),\n        })),\n        allowedDomains: z.array(z.string()).optional(),\n        autoProvision: z.boolean(),\n      }),\n      smtp: z.object({\n        host: z.string(),\n        port: z.number(),\n        username: z.string(),\n        fromAddress: z.string(),\n        encryption: z.enum(['none', 'tls', 'ssl']),\n      }),\n    }),\n    notifications: z.object({\n      emailNotifications: z.object({\n        welcomeEmails: z.boolean(),\n        billingNotifications: z.boolean(),\n        securityAlerts: z.boolean(),\n        systemUpdates: z.boolean(),\n      }),\n      webhookNotifications: z.object({\n        endpoints: z.array(z.object({\n          url: z.string().url(),\n          events: z.array(z.string()),\n          active: z.boolean(),\n          secret: z.string(),\n        })),\n        retryPolicy: z.object({\n          maxRetries: z.number(),\n          retryDelayMs: z.number(),\n          backoffMultiplier: z.number(),\n        }),\n      }),\n    }),\n  })\n)\n\nconst CrossTenantResultSchema = wrapSuccessResponse(\n  z.array(z.object({\n    tenantId: z.string(),\n    data: z.any(),\n    metadata: z.object({\n      executionTime: z.number(),\n      recordCount: z.number(),\n      hasMore: z.boolean(),\n    }),\n  }))\n)\n\nexport const tenantApi = createApi({\n  reducerPath: 'tenantApi',\n  baseQuery: createValidatedBaseQuery(`${API_BASE_URL}/tenants`),\n  tagTypes: [\n    'Tenant',\n    'TenantList',\n    'TenantSettings',\n    'TenantAnalytics',\n    'TenantQuotas',\n    'TenantHierarchy',\n    'CrossTenantData',\n  ],\n  endpoints: (builder) => ({\n    // Tenant CRUD operations\n    getTenant: builder.query<Tenant, { tenantId: TenantId }>({\n      ...createValidatedEndpoint(TenantResponseSchema, {\n        query: ({ tenantId }) => `/${tenantId}`,\n      }),\n      providesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n      ],\n    }),\n\n    getTenantBySlug: builder.query<Tenant, { slug: TenantSlug }>({\n      ...createValidatedEndpoint(TenantResponseSchema, {\n        query: ({ slug }) => `/slug/${slug}`,\n      }),\n      providesTags: (result, error, { slug }) => [\n        { type: 'Tenant', id: slug },\n      ],\n    }),\n\n    listTenants: builder.query<TenantListResponse, {\n      page?: number\n      pageSize?: number\n      status?: string\n      tier?: string\n      search?: string\n      sortBy?: string\n      sortOrder?: 'asc' | 'desc'\n      parentTenantId?: TenantId\n    }>({\n      ...createValidatedEndpoint(TenantListResponseSchema, {\n        query: (params) => ({\n          url: '',\n          params: {\n            page: params.page || 1,\n            pageSize: params.pageSize || 20,\n            ...(params.status && { status: params.status }),\n            ...(params.tier && { tier: params.tier }),\n            ...(params.search && { search: params.search }),\n            ...(params.sortBy && { sortBy: params.sortBy }),\n            ...(params.sortOrder && { sortOrder: params.sortOrder }),\n            ...(params.parentTenantId && { parentTenantId: params.parentTenantId }),\n          },\n        }),\n      }),\n      providesTags: ['TenantList'],\n    }),\n\n    createTenant: builder.mutation<TenantCreationResponse, CreateTenantRequest>({\n      ...createValidatedEndpoint(TenantCreationResponseSchema, {\n        query: (createRequest) => {\n          CreateTenantRequestSchema.parse(createRequest)\n          return {\n            url: '',\n            method: 'POST',\n            body: createRequest,\n          }\n        },\n      }),\n      invalidatesTags: ['TenantList'],\n    }),\n\n    updateTenant: builder.mutation<Tenant, { tenantId: TenantId; updates: UpdateTenantRequest }>({\n      ...createValidatedEndpoint(TenantResponseSchema, {\n        query: ({ tenantId, updates }) => {\n          UpdateTenantRequestSchema.parse(updates)\n          return {\n            url: `/${tenantId}`,\n            method: 'PATCH',\n            body: updates,\n          }\n        },\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n        'TenantList',\n      ],\n    }),\n\n    deleteTenant: builder.mutation<void, { tenantId: TenantId; cascade?: boolean }>({\n      query: ({ tenantId, cascade = false }) => ({\n        url: `/${tenantId}`,\n        method: 'DELETE',\n        params: { cascade },\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n        'TenantList',\n        'TenantHierarchy',\n      ],\n    }),\n\n    // Tenant settings management\n    getTenantSettings: builder.query<TenantSettings, { tenantId: TenantId }>({\n      ...createValidatedEndpoint(TenantSettingsResponseSchema, {\n        query: ({ tenantId }) => `/${tenantId}/settings`,\n      }),\n      providesTags: (result, error, { tenantId }) => [\n        { type: 'TenantSettings', id: tenantId },\n      ],\n    }),\n\n    updateTenantSettings: builder.mutation<TenantSettings, {\n      tenantId: TenantId\n      settings: Partial<TenantSettings>\n    }>({\n      ...createValidatedEndpoint(TenantSettingsResponseSchema, {\n        query: ({ tenantId, settings }) => ({\n          url: `/${tenantId}/settings`,\n          method: 'PATCH',\n          body: settings,\n        }),\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'TenantSettings', id: tenantId },\n        { type: 'Tenant', id: tenantId },\n      ],\n    }),\n\n    // Tenant analytics and reporting\n    getTenantAnalytics: builder.query<TenantAnalytics, {\n      tenantId: TenantId\n      period: 'day' | 'week' | 'month' | 'quarter' | 'year'\n      startDate?: string\n      endDate?: string\n      metrics?: string[]\n    }>({\n      ...createValidatedEndpoint(TenantAnalyticsResponseSchema, {\n        query: ({ tenantId, period, startDate, endDate, metrics }) => ({\n          url: `/${tenantId}/analytics`,\n          params: {\n            period,\n            ...(startDate && { startDate }),\n            ...(endDate && { endDate }),\n            ...(metrics && { metrics: metrics.join(',') }),\n          },\n        }),\n      }),\n      providesTags: (result, error, { tenantId, period }) => [\n        { type: 'TenantAnalytics', id: `${tenantId}-${period}` },\n      ],\n    }),\n\n    // Cross-tenant operations\n    executeCrossTenantQuery: builder.mutation<CrossTenantResult[], CrossTenantQuery>({\n      ...createValidatedEndpoint(CrossTenantResultSchema, {\n        query: (query) => ({\n          url: '/cross-tenant/query',\n          method: 'POST',\n          body: query,\n        }),\n      }),\n      invalidatesTags: ['CrossTenantData'],\n    }),\n\n    // Tenant hierarchy operations\n    getTenantHierarchy: builder.query<{ tenant: Tenant; children: Tenant[]; ancestors: Tenant[] }, {\n      tenantId: TenantId\n    }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        tenant: TenantSchema,\n        children: z.array(TenantSchema),\n        ancestors: z.array(TenantSchema),\n      })), {\n        query: ({ tenantId }) => `/${tenantId}/hierarchy`,\n      }),\n      providesTags: (result, error, { tenantId }) => [\n        { type: 'TenantHierarchy', id: tenantId },\n      ],\n    }),\n\n    moveTenant: builder.mutation<Tenant, {\n      tenantId: TenantId\n      newParentId?: TenantId\n    }>({\n      ...createValidatedEndpoint(TenantResponseSchema, {\n        query: ({ tenantId, newParentId }) => ({\n          url: `/${tenantId}/move`,\n          method: 'POST',\n          body: { newParentId },\n        }),\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n        'TenantList',\n        'TenantHierarchy',\n      ],\n    }),\n\n    // Tenant resource management\n    getTenantQuotas: builder.query<{ tenantId: TenantId; quotas: any }, { tenantId: TenantId }>({\n      ...createValidatedEndpoint(wrapSuccessResponse(z.object({\n        tenantId: z.string(),\n        quotas: z.any(), // TenantQuotas type\n      })), {\n        query: ({ tenantId }) => `/${tenantId}/quotas`,\n      }),\n      providesTags: (result, error, { tenantId }) => [\n        { type: 'TenantQuotas', id: tenantId },\n      ],\n    }),\n\n    updateTenantQuotas: builder.mutation<any, {\n      tenantId: TenantId\n      quotas: any // Partial<TenantQuotas>\n    }>({\n      query: ({ tenantId, quotas }) => ({\n        url: `/${tenantId}/quotas`,\n        method: 'PATCH',\n        body: quotas,\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'TenantQuotas', id: tenantId },\n        { type: 'Tenant', id: tenantId },\n      ],\n    }),\n\n    // Tenant status operations\n    suspendTenant: builder.mutation<Tenant, { tenantId: TenantId; reason: string }>({\n      ...createValidatedEndpoint(TenantResponseSchema, {\n        query: ({ tenantId, reason }) => ({\n          url: `/${tenantId}/suspend`,\n          method: 'POST',\n          body: { reason },\n        }),\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n        'TenantList',\n      ],\n    }),\n\n    activateTenant: builder.mutation<Tenant, { tenantId: TenantId }>({\n      ...createValidatedEndpoint(TenantResponseSchema, {\n        query: ({ tenantId }) => ({\n          url: `/${tenantId}/activate`,\n          method: 'POST',\n        }),\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n        'TenantList',\n      ],\n    }),\n\n    // Tenant domain management\n    validateCustomDomain: builder.mutation<{ valid: boolean; errors?: string[] }, {\n      tenantId: TenantId\n      domain: string\n    }>({\n      query: ({ tenantId, domain }) => ({\n        url: `/${tenantId}/domains/validate`,\n        method: 'POST',\n        body: { domain },\n      }),\n    }),\n\n    configureTenantDomain: builder.mutation<{ tenant: Tenant; dnsRecords: any[] }, {\n      tenantId: TenantId\n      domain: string\n      sslEnabled?: boolean\n    }>({\n      query: ({ tenantId, domain, sslEnabled = true }) => ({\n        url: `/${tenantId}/domains/configure`,\n        method: 'POST',\n        body: { domain, sslEnabled },\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n      ],\n    }),\n\n    // Tenant impersonation (admin only)\n    generateTenantAccessToken: builder.mutation<{ token: string; expiresAt: string }, {\n      tenantId: TenantId\n      userId?: string\n      duration?: number\n    }>({\n      query: ({ tenantId, userId, duration = 3600 }) => ({\n        url: `/${tenantId}/impersonate`,\n        method: 'POST',\n        body: { userId, duration },\n      }),\n    }),\n\n    // Tenant export/import\n    exportTenantData: builder.mutation<{ exportId: string; downloadUrl: string }, {\n      tenantId: TenantId\n      includeUsers?: boolean\n      includeAnalytics?: boolean\n      format?: 'json' | 'csv'\n    }>({\n      query: ({ tenantId, includeUsers = false, includeAnalytics = false, format = 'json' }) => ({\n        url: `/${tenantId}/export`,\n        method: 'POST',\n        body: { includeUsers, includeAnalytics, format },\n      }),\n    }),\n\n    importTenantData: builder.mutation<{ importId: string; status: string }, {\n      tenantId: TenantId\n      data: any\n      overwrite?: boolean\n    }>({\n      query: ({ tenantId, data, overwrite = false }) => ({\n        url: `/${tenantId}/import`,\n        method: 'POST',\n        body: { data, overwrite },\n      }),\n      invalidatesTags: (result, error, { tenantId }) => [\n        { type: 'Tenant', id: tenantId },\n        'TenantList',\n      ],\n    }),\n  }),\n})\n\n// Export hooks\nexport const {\n  useGetTenantQuery,\n  useGetTenantBySlugQuery,\n  useListTenantsQuery,\n  useCreateTenantMutation,\n  useUpdateTenantMutation,\n  useDeleteTenantMutation,\n  useGetTenantSettingsQuery,\n  useUpdateTenantSettingsMutation,\n  useGetTenantAnalyticsQuery,\n  useExecuteCrossTenantQueryMutation,\n  useGetTenantHierarchyQuery,\n  useMoveTenantMutation,\n  useGetTenantQuotasQuery,\n  useUpdateTenantQuotasMutation,\n  useSuspendTenantMutation,\n  useActivateTenantMutation,\n  useValidateCustomDomainMutation,\n  useConfigureTenantDomainMutation,\n  useGenerateTenantAccessTokenMutation,\n  useExportTenantDataMutation,\n  useImportTenantDataMutation,\n} = tenantApi\n\n// Utility selectors\nexport const selectTenantById = (tenantId: TenantId) =>\n  tenantApi.endpoints.getTenant.select({ tenantId })\n\nexport const selectTenantBySlug = (slug: TenantSlug) =>\n  tenantApi.endpoints.getTenantBySlug.select({ slug })\n\nexport const selectTenantSettings = (tenantId: TenantId) =>\n  tenantApi.endpoints.getTenantSettings.select({ tenantId })\n\nexport const selectTenantAnalytics = (tenantId: TenantId, period: string) =>\n  tenantApi.endpoints.getTenantAnalytics.select({\n    tenantId,\n    period: period as 'day' | 'week' | 'month' | 'quarter' | 'year'\n  })\n\n// Advanced selectors for multi-tenant context\nexport const createTenantContextSelector = (tenantId: TenantId) => (state: any): TenantContext | null => {\n  const tenantResult = selectTenantById(tenantId)(state)\n  if (!tenantResult.data) return null\n\n  const tenant = tenantResult.data\n  return {\n    tenantId: tenant.id,\n    tenantSlug: tenant.slug,\n    tier: tenant.tier,\n    features: tenant.features,\n    quotas: tenant.quotas,\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/userApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":7,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":8,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":8,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":8,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[214,216],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nimport { withAuthHeader } from './utils'\n\nimport type { User } from '@/types/api'\n\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || '/api/v1'\n\nexport interface UpdateProfileRequest {\n  name: string\n  preferences: Record<string, unknown>\n}\n\nexport interface UpdatePreferencesRequest {\n  preferences: Record<string, unknown>\n}\n\nexport interface UserStatistics {\n  totalUsers: number\n  newUsersThisWeek: number\n  usersByProvider: Record<string, number>\n}\n\nexport interface PagedUserResponse {\n  users: User[]\n  page: number\n  size: number\n  totalElements: number\n  totalPages: number\n  first: boolean\n  last: boolean\n}\n\nexport const userApi = createApi({\n  reducerPath: 'userApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/users`,\n    prepareHeaders: (headers, { getState }) => withAuthHeader(headers, getState),\n  }),\n  tagTypes: ['User', 'UserProfile'],\n  endpoints: builder => ({\n    getCurrentUser: builder.query<User, void>({\n      query: () => '/me',\n      providesTags: ['UserProfile'],\n    }),\n\n    getUserById: builder.query<User, string>({\n      query: userId => `/${userId}`,\n      providesTags: (_result, _error, userId) => [{ type: 'User', id: userId }],\n    }),\n\n    updateProfile: builder.mutation<User, UpdateProfileRequest>({\n      query: body => ({\n        url: '/me/profile',\n        method: 'PUT',\n        body,\n      }),\n      invalidatesTags: ['UserProfile'],\n    }),\n\n    updatePreferences: builder.mutation<User, UpdatePreferencesRequest>({\n      query: body => ({\n        url: '/me/preferences',\n        method: 'PUT',\n        body,\n      }),\n      invalidatesTags: ['UserProfile'],\n    }),\n\n    deleteCurrentUser: builder.mutation<void, void>({\n      query: () => ({\n        url: '/me',\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['UserProfile'],\n    }),\n\n    searchUsers: builder.query<User[], string>({\n      query: name => ({\n        url: '/search',\n        params: { name },\n      }),\n      providesTags: ['User'],\n    }),\n\n    getAllUsers: builder.query<\n      PagedUserResponse,\n      {\n        page?: number\n        size?: number\n        sortBy?: string\n        sortDirection?: 'asc' | 'desc'\n      }\n    >({\n      query: ({\n        page = 0,\n        size = 20,\n        sortBy = 'createdAt',\n        sortDirection = 'desc',\n      }) => ({\n        url: '',\n        params: { page, size, sortBy, sortDirection },\n      }),\n      providesTags: ['User'],\n    }),\n\n    getRecentUsers: builder.query<User[], string>({\n      query: since => ({\n        url: '/recent',\n        params: { since },\n      }),\n      providesTags: ['User'],\n    }),\n\n    getUserStatistics: builder.query<UserStatistics, void>({\n      query: () => '/statistics',\n      providesTags: ['User'],\n    }),\n\n    countActiveUsers: builder.query<number, void>({\n      query: () => '/count',\n      providesTags: ['User'],\n    }),\n\n    getUsersByProvider: builder.query<User[], string>({\n      query: provider => `/providers/${provider}`,\n      providesTags: ['User'],\n    }),\n\n    restoreUser: builder.mutation<User, string>({\n      query: userId => ({\n        url: `/${userId}/restore`,\n        method: 'POST',\n      }),\n      invalidatesTags: ['User'],\n    }),\n  }),\n})\n\nexport const {\n  useGetCurrentUserQuery,\n  useGetUserByIdQuery,\n  useUpdateProfileMutation,\n  useUpdatePreferencesMutation,\n  useDeleteCurrentUserMutation,\n  useSearchUsersQuery,\n  useGetAllUsersQuery,\n  useGetRecentUsersQuery,\n  useGetUserStatisticsQuery,\n  useCountActiveUsersQuery,\n  useGetUsersByProviderQuery,\n  useRestoreUserMutation,\n  // Export for lazy queries\n  useLazySearchUsersQuery,\n  useLazyGetAllUsersQuery,\n} = userApi\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/api/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/hooks.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used.","line":1,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":18,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":18,"endColumn":32,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[507,534],"text":"// @ts-expect-error - JSX element"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest'\nimport React from 'react'\nimport { renderHook } from '@testing-library/react'\nimport { Provider } from 'react-redux'\nimport type { ReactNode } from 'react'\n\nimport { useAppDispatch, useAppSelector } from './hooks'\n\nimport {\n  createMockStore,\n  type MockStore,\n} from '@/test/utils/mockStore'\nimport { createMockUser } from '@/test/fixtures/users'\n\nconst createWrapper = (store: MockStore) => {\n   \n  return ({ children }: { children: ReactNode }) => (\n    // @ts-ignore - JSX element\n    React.createElement(Provider, { store }, children)\n  )\n}\n\ndescribe('Redux hooks', () => {\n  describe('useAppSelector', () => {\n    it('should select auth state', () => {\n      const store = createMockStore({\n        auth: {\n          isAuthenticated: true,\n          user: createMockUser({ id: '123', name: 'Test User' }),\n        },\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.auth.isAuthenticated),\n        { wrapper }\n      )\n\n      expect(result.current).toBe(true)\n    })\n\n    it('should select auth user', () => {\n      const mockUser = createMockUser({\n        id: '456',\n        name: 'Hook User',\n        email: 'hook@example.com',\n        provider: 'github',\n      })\n\n      const store = createMockStore({\n        auth: { user: mockUser }\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.auth.user),\n        { wrapper }\n      )\n\n      expect(result.current).toEqual(mockUser)\n    })\n\n    it('should select auth loading state', () => {\n      const store = createMockStore({\n        auth: { isLoading: true }\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.auth.isLoading),\n        { wrapper }\n      )\n\n      expect(result.current).toBe(true)\n    })\n\n    it('should select ui theme', () => {\n      const store = createMockStore({\n        ui: { theme: 'dark' }\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.ui.theme),\n        { wrapper }\n      )\n\n      expect(result.current).toBe('dark')\n    })\n\n    it('should select ui sidebar state', () => {\n      const store = createMockStore({\n        ui: { sidebarOpen: true }\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.ui.sidebarOpen),\n        { wrapper }\n      )\n\n      expect(result.current).toBe(true)\n    })\n\n    it('should select ui notifications', () => {\n      const mockNotifications = [\n        {\n          id: '1',\n          type: 'success' as const,\n          title: 'Success',\n          message: 'Operation completed',\n        }\n      ]\n\n      const store = createMockStore({\n        ui: { notifications: mockNotifications }\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.ui.notifications),\n        { wrapper }\n      )\n\n      expect(result.current).toEqual(mockNotifications)\n    })\n\n    it('should select ui modals state', () => {\n      const store = createMockStore({\n        ui: {\n          modals: {\n            isPaymentMethodModalOpen: true,\n            isSubscriptionModalOpen: false,\n            isInviteUserModalOpen: true,\n          }\n        }\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.ui.modals),\n        { wrapper }\n      )\n\n      expect(result.current.isPaymentMethodModalOpen).toBe(true)\n      expect(result.current.isSubscriptionModalOpen).toBe(false)\n      expect(result.current.isInviteUserModalOpen).toBe(true)\n    })\n\n    it('should select ui loading states', () => {\n      const store = createMockStore({\n        ui: {\n          loading: {\n            global: true,\n            components: {\n              userProfile: false,\n              paymentForm: true,\n            }\n          }\n        }\n      })\n\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => useAppSelector(state => state.ui.loading),\n        { wrapper }\n      )\n\n      expect(result.current.global).toBe(true)\n      expect(result.current.components.userProfile).toBe(false)\n      expect(result.current.components.paymentForm).toBe(true)\n    })\n  })\n\n  describe('useAppDispatch', () => {\n    it('should return dispatch function', () => {\n      const store = createMockStore()\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(() => useAppDispatch(), { wrapper })\n\n      expect(typeof result.current).toBe('function')\n    })\n\n    it('should be able to dispatch actions', () => {\n      const store = createMockStore()\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(() => useAppDispatch(), { wrapper })\n\n      // Should not throw when calling dispatch\n      expect(() => {\n        result.current({ type: 'test/action' })\n      }).not.toThrow()\n    })\n\n    it('should dispatch auth actions', () => {\n      const store = createMockStore()\n      const wrapper = createWrapper(store)\n      const mockAction = { type: 'auth/setLoading', payload: true }\n\n      const { result } = renderHook(() => useAppDispatch(), { wrapper })\n\n      expect(() => {\n        result.current(mockAction)\n      }).not.toThrow()\n    })\n\n    it('should dispatch ui actions', () => {\n      const store = createMockStore()\n      const wrapper = createWrapper(store)\n      const mockAction = { type: 'ui/setTheme', payload: 'dark' }\n\n      const { result } = renderHook(() => useAppDispatch(), { wrapper })\n\n      expect(() => {\n        result.current(mockAction)\n      }).not.toThrow()\n    })\n  })\n\n  describe('hook integration', () => {\n    it('should work together for state management', () => {\n      const store = createMockStore({\n        auth: { isAuthenticated: false },\n      })\n      const wrapper = createWrapper(store)\n\n      const { result: selectorResult } = renderHook(\n        () => useAppSelector(state => state.auth.isAuthenticated),\n        { wrapper }\n      )\n\n      const { result: dispatchResult } = renderHook(\n        () => useAppDispatch(),\n        { wrapper }\n      )\n\n      expect(selectorResult.current).toBe(false)\n      expect(typeof dispatchResult.current).toBe('function')\n    })\n\n    it('should handle complex state selection', () => {\n      const complexState = {\n        auth: {\n          user: {\n            id: '789',\n            name: 'Complex User',\n            email: 'complex@example.com',\n            provider: 'microsoft',\n            preferences: { theme: 'auto', notifications: true },\n            createdAt: '2024-01-01T00:00:00Z',\n            lastActiveAt: '2024-01-15T10:30:00Z',\n          },\n          isAuthenticated: true,\n          isLoading: false,\n        },\n        ui: {\n          theme: 'dark',\n          sidebarOpen: true,\n          notifications: [\n            { id: '1', type: 'info', title: 'Info', message: 'Test' },\n            { id: '2', type: 'warning', title: 'Warning', message: 'Test' },\n          ]\n        }\n      }\n\n      const store = createMockStore(complexState)\n      const wrapper = createWrapper(store)\n\n      const { result } = renderHook(\n        () => ({\n          user: useAppSelector(state => state.auth.user),\n          isAuthenticated: useAppSelector(state => state.auth.isAuthenticated),\n          theme: useAppSelector(state => state.ui.theme),\n          notifications: useAppSelector(state => state.ui.notifications),\n        }),\n        { wrapper }\n      )\n\n      expect(result.current.user?.name).toBe('Complex User')\n      expect(result.current.isAuthenticated).toBe(true)\n      expect(result.current.theme).toBe('dark')\n      expect(result.current.notifications).toHaveLength(2)\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/middleware/cacheEnhancer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1287,1290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1287,1290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":144,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":144,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4234,4236],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6422,6425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6422,6425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":219,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":220,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":220,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6474,6477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6474,6477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":220,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .usedJSHeapSize on an `any` value.","line":221,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalJSHeapSize on an `any` value.","line":221,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":72},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":237,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":237,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7067,7069],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7294,7297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7294,7297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":247,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":248,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":248,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7346,7349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7346,7349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":248,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":248,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":250,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":250,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .usedJSHeapSize on an `any` value.","line":250,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":251,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":251,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalJSHeapSize on an `any` value.","line":251,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":251,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":252,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":252,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .jsHeapSizeLimit on an `any` value.","line":252,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .usedJSHeapSize on an `any` value.","line":253,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":253,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalJSHeapSize on an `any` value.","line":253,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":253,"endColumn":70},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":271,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":271,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7981,7981],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7981,7981],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":280,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":280,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[8216,8216],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[8216,8216],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'refreshEndpoint' has no 'await' expression.","line":315,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":315,"endColumn":32,"suggestions":[{"messageId":"removeAsync","fix":{"range":[9234,9288],"text":"refreshEndpoint(endpoint: string): void"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'effect' has no 'await' expression.","line":469,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":469,"endColumn":19,"suggestions":[{"messageId":"removeAsync","fix":{"range":[14051,14057],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'listenerApi' is defined but never used.","line":469,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":469,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":474,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":474,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .arg on an `any` value.","line":474,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":474,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":476,"column":52,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":476,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":482,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":482,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .arg on an `any` value.","line":482,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":482,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .arg on an `any` value.","line":483,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":483,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":486,"column":37,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":486,"endColumn":45}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced RTK Query Cache Management\n *\n * Advanced caching strategies for optimal performance:\n * - Intelligent cache invalidation\n * - Predictive prefetching\n * - Background refresh strategies\n * - Cache analytics and optimization\n * - Memory pressure management\n */\n\nimport { createListenerMiddleware, isAnyOf } from '@reduxjs/toolkit'\nimport type { AnyAction, Middleware } from '@reduxjs/toolkit'\n\nimport { logger } from '../../utils/logger'\nimport { performanceMonitor } from '../../utils/performance'\n\n// Types for cache management\nexport interface CachePolicy {\n  maxAge?: number           // Cache lifetime in milliseconds\n  staleTime?: number        // Time before data becomes stale\n  gcTime?: number           // Time before garbage collection\n  refetchOnFocus?: boolean  // Refetch when window gains focus\n  refetchOnReconnect?: boolean  // Refetch when network reconnects\n  backgroundRefresh?: boolean   // Enable background refresh\n  prefetchRelated?: string[]    // Related endpoints to prefetch\n}\n\nexport interface CacheMetrics {\n  endpoint: string\n  hitCount: number\n  missCount: number\n  totalQueries: number\n  avgResponseTime: number\n  lastAccessed: number\n  cacheSize: number\n}\n\nexport interface CacheStrategy {\n  name: string\n  apply: (endpoint: string, data: any) => CachePolicy\n}\n\n// Cache strategy implementations\nconst cacheStrategies: CacheStrategy[] = [\n  // Static data strategy - long cache times\n  {\n    name: 'static',\n    apply: (endpoint) => {\n      if (endpoint.includes('auth/methods') || endpoint.includes('config')) {\n        return {\n          maxAge: 30 * 60 * 1000, // 30 minutes\n          staleTime: 15 * 60 * 1000, // 15 minutes\n          refetchOnFocus: false,\n          backgroundRefresh: false\n        }\n      }\n      return {}\n    }\n  },\n\n  // User data strategy - moderate cache times with focus refresh\n  {\n    name: 'user-data',\n    apply: (endpoint) => {\n      if (endpoint.includes('user') || endpoint.includes('profile')) {\n        return {\n          maxAge: 5 * 60 * 1000,  // 5 minutes\n          staleTime: 2 * 60 * 1000, // 2 minutes\n          refetchOnFocus: true,\n          refetchOnReconnect: true,\n          backgroundRefresh: true\n        }\n      }\n      return {}\n    }\n  },\n\n  // Financial data strategy - short cache times with immediate updates\n  {\n    name: 'financial',\n    apply: (endpoint) => {\n      if (endpoint.includes('payment') || endpoint.includes('subscription') || endpoint.includes('billing')) {\n        return {\n          maxAge: 60 * 1000,      // 1 minute\n          staleTime: 30 * 1000,   // 30 seconds\n          refetchOnFocus: true,\n          refetchOnReconnect: true,\n          backgroundRefresh: true,\n          prefetchRelated: ['statistics', 'history']\n        }\n      }\n      return {}\n    }\n  },\n\n  // Organization data strategy - moderate cache with team focus\n  {\n    name: 'organization',\n    apply: (endpoint) => {\n      if (endpoint.includes('organization') || endpoint.includes('member')) {\n        return {\n          maxAge: 3 * 60 * 1000,  // 3 minutes\n          staleTime: 90 * 1000,   // 90 seconds\n          refetchOnFocus: true,\n          backgroundRefresh: true,\n          prefetchRelated: ['members', 'settings']\n        }\n      }\n      return {}\n    }\n  },\n\n  // Analytics data strategy - longer cache for heavy computations\n  {\n    name: 'analytics',\n    apply: (endpoint) => {\n      if (endpoint.includes('analytics') || endpoint.includes('statistics') || endpoint.includes('report')) {\n        return {\n          maxAge: 10 * 60 * 1000, // 10 minutes\n          staleTime: 5 * 60 * 1000, // 5 minutes\n          refetchOnFocus: false,\n          backgroundRefresh: true\n        }\n      }\n      return {}\n    }\n  }\n]\n\n// Cache analytics tracker\nclass CacheAnalytics {\n  private metrics = new Map<string, CacheMetrics>()\n  private queryTimes = new Map<string, number>()\n\n  public recordQueryStart(endpoint: string): void {\n    this.queryTimes.set(endpoint, performance.now())\n  }\n\n  public recordQueryComplete(endpoint: string, wasHit: boolean): void {\n    const startTime = this.queryTimes.get(endpoint)\n    const responseTime = startTime ? performance.now() - startTime : 0\n\n    const existing = this.metrics.get(endpoint) || {\n      endpoint,\n      hitCount: 0,\n      missCount: 0,\n      totalQueries: 0,\n      avgResponseTime: 0,\n      lastAccessed: Date.now(),\n      cacheSize: 0\n    }\n\n    const newMetrics: CacheMetrics = {\n      ...existing,\n      hitCount: wasHit ? existing.hitCount + 1 : existing.hitCount,\n      missCount: !wasHit ? existing.missCount + 1 : existing.missCount,\n      totalQueries: existing.totalQueries + 1,\n      avgResponseTime: (existing.avgResponseTime + responseTime) / 2,\n      lastAccessed: Date.now()\n    }\n\n    this.metrics.set(endpoint, newMetrics)\n    this.queryTimes.delete(endpoint)\n  }\n\n  public getMetrics(): CacheMetrics[] {\n    return Array.from(this.metrics.values())\n  }\n\n  public getHitRate(endpoint?: string): number {\n    if (endpoint) {\n      const metric = this.metrics.get(endpoint)\n      if (!metric || metric.totalQueries === 0) return 0\n      return metric.hitCount / metric.totalQueries\n    }\n\n    // Overall hit rate\n    let totalHits = 0\n    let totalQueries = 0\n    this.metrics.forEach(metric => {\n      totalHits += metric.hitCount\n      totalQueries += metric.totalQueries\n    })\n\n    return totalQueries > 0 ? totalHits / totalQueries : 0\n  }\n\n  public getRecommendations(): string[] {\n    const recommendations: string[] = []\n    const overallHitRate = this.getHitRate()\n\n    if (overallHitRate < 0.7) {\n      recommendations.push('Consider increasing cache times for frequently accessed endpoints')\n    }\n\n    this.metrics.forEach(metric => {\n      const hitRate = metric.hitCount / metric.totalQueries\n\n      if (hitRate < 0.5 && metric.totalQueries > 10) {\n        recommendations.push(`Low hit rate for ${metric.endpoint} (${(hitRate * 100).toFixed(1)}%)`)\n      }\n\n      if (metric.avgResponseTime > 1000) {\n        recommendations.push(`Slow response time for ${metric.endpoint} (${metric.avgResponseTime.toFixed(0)}ms)`)\n      }\n    })\n\n    return recommendations\n  }\n}\n\n// Memory pressure manager\nclass MemoryPressureManager {\n  private readonly maxCacheSize = 50 * 1024 * 1024 // 50MB\n  private readonly warningThreshold = 0.8\n\n  public shouldEvictCache(): boolean {\n    if ('memory' in performance && 'usedJSHeapSize' in (performance as any).memory) {\n      const memory = (performance as any).memory\n      const usageRatio = memory.usedJSHeapSize / memory.totalJSHeapSize\n      return usageRatio > this.warningThreshold\n    }\n\n    // Fallback to simple heuristic\n    const cacheCount = this.estimateCacheCount()\n    return cacheCount > 1000\n  }\n\n  private estimateCacheCount(): number {\n    // Simple estimation based on localStorage usage (fallback)\n    try {\n      let totalSize = 0\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i)\n        if (key?.startsWith('rtk-query-')) {\n          totalSize += localStorage.getItem(key)?.length || 0\n        }\n      }\n      return totalSize / 1000 // Rough estimate of cache entries\n    } catch {\n      return 0\n    }\n  }\n\n  public getMemoryStats() {\n    if ('memory' in performance && 'usedJSHeapSize' in (performance as any).memory) {\n      const memory = (performance as any).memory\n      return {\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n        usagePercent: (memory.usedJSHeapSize / memory.totalJSHeapSize) * 100\n      }\n    }\n\n    return null\n  }\n}\n\n// Background refresh manager\nclass BackgroundRefreshManager {\n  private refreshQueue = new Set<string>()\n  private refreshInterval: number | null = null\n  private isRefreshing = false\n\n  public queueRefresh(endpoint: string, priority: 'high' | 'medium' | 'low' = 'medium'): void {\n    this.refreshQueue.add(endpoint)\n\n    if (priority === 'high' && !this.isRefreshing) {\n      this.processQueue()\n    }\n  }\n\n  public startBackgroundRefresh(): void {\n    if (this.refreshInterval) return\n\n    this.refreshInterval = window.setInterval(() => {\n      if (this.refreshQueue.size > 0 && !this.isRefreshing) {\n        this.processQueue()\n      }\n    }, 30000) // Process queue every 30 seconds\n  }\n\n  public stopBackgroundRefresh(): void {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval)\n      this.refreshInterval = null\n    }\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.isRefreshing || this.refreshQueue.size === 0) return\n\n    this.isRefreshing = true\n    const endpointsToRefresh = Array.from(this.refreshQueue)\n    this.refreshQueue.clear()\n\n    logger.info(`Processing background refresh queue: ${endpointsToRefresh.length} endpoints`)\n\n    // Process refreshes with throttling\n    for (const endpoint of endpointsToRefresh) {\n      try {\n        // Actual refresh would be handled by RTK Query\n        await this.refreshEndpoint(endpoint)\n        await new Promise(resolve => setTimeout(resolve, 100)) // Throttle requests\n      } catch (error) {\n        logger.error(`Background refresh failed for ${endpoint}:`, error)\n      }\n    }\n\n    this.isRefreshing = false\n  }\n\n  private async refreshEndpoint(endpoint: string): Promise<void> {\n    // This would integrate with RTK Query's invalidatesTags or refetch mechanisms\n    logger.debug(`Background refreshing: ${endpoint}`)\n\n    // Performance tracking for background refreshes\n    performanceMonitor.addJourneyCheckpoint('cache-management', 'background-refresh', {\n      endpoint\n    })\n  }\n}\n\n// Main cache enhancer\nexport class CacheEnhancer {\n  private analytics: CacheAnalytics\n  private memoryManager: MemoryPressureManager\n  private backgroundRefresh: BackgroundRefreshManager\n  private policies = new Map<string, CachePolicy>()\n\n  constructor() {\n    this.analytics = new CacheAnalytics()\n    this.memoryManager = new MemoryPressureManager()\n    this.backgroundRefresh = new BackgroundRefreshManager()\n\n    this.initializeEnhancer()\n  }\n\n  private initializeEnhancer(): void {\n    // Start background refresh\n    this.backgroundRefresh.startBackgroundRefresh()\n\n    // Memory pressure monitoring\n    setInterval(() => {\n      if (this.memoryManager.shouldEvictCache()) {\n        logger.warn('Memory pressure detected - considering cache eviction')\n        this.handleMemoryPressure()\n      }\n    }, 60000) // Check every minute\n\n    // Periodic analytics reporting\n    setInterval(() => {\n      this.reportAnalytics()\n    }, 5 * 60 * 1000) // Report every 5 minutes\n  }\n\n  public getCachePolicy(endpoint: string): CachePolicy {\n    // Check if we have a cached policy\n    if (this.policies.has(endpoint)) {\n      return this.policies.get(endpoint)!\n    }\n\n    // Apply cache strategies\n    let policy: CachePolicy = {\n      maxAge: 60 * 1000, // Default 1 minute\n      staleTime: 30 * 1000, // Default 30 seconds\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n      backgroundRefresh: false\n    }\n\n    // Apply strategies in order\n    for (const strategy of cacheStrategies) {\n      const strategyPolicy = strategy.apply(endpoint, null)\n      policy = { ...policy, ...strategyPolicy }\n    }\n\n    // Cache the policy\n    this.policies.set(endpoint, policy)\n    logger.debug(`Cache policy for ${endpoint}:`, policy)\n\n    return policy\n  }\n\n  public recordQuery(endpoint: string, wasHit: boolean): void {\n    this.analytics.recordQueryComplete(endpoint, wasHit)\n\n    // Queue background refresh if needed\n    const policy = this.getCachePolicy(endpoint)\n    if (policy.backgroundRefresh && !wasHit) {\n      this.backgroundRefresh.queueRefresh(endpoint, 'medium')\n    }\n  }\n\n  private handleMemoryPressure(): void {\n    // Get memory stats\n    const memoryStats = this.memoryManager.getMemoryStats()\n    if (memoryStats) {\n      logger.info('Memory stats:', memoryStats)\n    }\n\n    // Get least recently used endpoints for eviction\n    const metrics = this.analytics.getMetrics()\n    const candidatesForEviction = metrics\n      .sort((a, b) => a.lastAccessed - b.lastAccessed)\n      .slice(0, Math.floor(metrics.length * 0.3)) // Evict oldest 30%\n\n    logger.info('Cache eviction candidates:', candidatesForEviction.map(m => m.endpoint))\n\n    // Actual eviction would be handled by RTK Query\n    performanceMonitor.addJourneyCheckpoint('cache-management', 'memory-pressure', {\n      candidatesCount: candidatesForEviction.length,\n      totalMetrics: metrics.length\n    })\n  }\n\n  private reportAnalytics(): void {\n    const hitRate = this.analytics.getHitRate()\n    const recommendations = this.analytics.getRecommendations()\n    const metrics = this.analytics.getMetrics()\n\n    logger.info('Cache Analytics Report:', {\n      overallHitRate: (hitRate * 100).toFixed(1) + '%',\n      totalEndpoints: metrics.length,\n      recommendations: recommendations.length\n    })\n\n    if (recommendations.length > 0) {\n      logger.info('Cache Optimization Recommendations:', recommendations)\n    }\n\n    // Send to performance monitoring\n    performanceMonitor.addJourneyCheckpoint('cache-management', 'analytics-report', {\n      hitRate,\n      endpointCount: metrics.length,\n      recommendationCount: recommendations.length\n    })\n  }\n\n  public getAnalytics() {\n    return {\n      hitRate: this.analytics.getHitRate(),\n      metrics: this.analytics.getMetrics(),\n      recommendations: this.analytics.getRecommendations(),\n      memoryStats: this.memoryManager.getMemoryStats()\n    }\n  }\n\n  public destroy(): void {\n    this.backgroundRefresh.stopBackgroundRefresh()\n  }\n}\n\n// Global cache enhancer instance\nexport const cacheEnhancer = new CacheEnhancer()\n\n// RTK Query middleware factory\nexport const createCacheEnhancerMiddleware = (): Middleware => {\n  const listenerMiddleware = createListenerMiddleware()\n\n  // Listen for RTK Query actions\n  listenerMiddleware.startListening({\n    matcher: isAnyOf(\n      // Add matchers for RTK Query actions\n      // This would be configured with actual RTK Query action creators\n    ),\n    effect: async (action: AnyAction, listenerApi) => {\n      const { type, meta } = action\n\n      if (type.endsWith('/pending')) {\n        // Query started\n        const endpoint = meta?.arg?.endpointName\n        if (endpoint) {\n          cacheEnhancer.analytics.recordQueryStart(endpoint)\n        }\n      }\n\n      if (type.endsWith('/fulfilled') || type.endsWith('/rejected')) {\n        // Query completed\n        const endpoint = meta?.arg?.endpointName\n        const fromCache = meta?.arg?.originalArgs?.forceRefetch === false\n\n        if (endpoint) {\n          cacheEnhancer.recordQuery(endpoint, fromCache)\n        }\n      }\n    }\n  })\n\n  return listenerMiddleware.middleware\n}\n\n// React hooks for cache management\nexport const useCacheAnalytics = () => {\n  const [analytics, setAnalytics] = React.useState(cacheEnhancer.getAnalytics())\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setAnalytics(cacheEnhancer.getAnalytics())\n    }, 5000) // Update every 5 seconds\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return analytics\n}\n\nexport const useCachePolicy = (endpoint: string) => {\n  return React.useMemo(() => {\n    return cacheEnhancer.getCachePolicy(endpoint)\n  }, [endpoint])\n}\n\n// Auto-initialize cache enhancer\nif (typeof window !== 'undefined') {\n  // Clean up on page unload\n  window.addEventListener('beforeunload', () => {\n    cacheEnhancer.destroy()\n  })\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/slices/authSlice.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/slices/authSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/slices/uiSlice.test.ts","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":72,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":72,"endColumn":34},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":79,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":79,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\n\nimport uiReducer, {\n  setTheme,\n  toggleSidebar,\n  setSidebarOpen,\n  setGlobalLoading,\n  setComponentLoading,\n  addNotification,\n  removeNotification,\n  clearNotifications,\n  openModal,\n  closeModal,\n  closeAllModals,\n  selectTheme,\n  selectSidebarOpen,\n  selectGlobalLoading,\n  selectComponentLoading,\n  selectNotifications,\n  selectModals,\n  type UiState,\n  type Theme,\n  type Notification\n} from './uiSlice'\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  removeItem: vi.fn(),\n  clear: vi.fn()\n}\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock\n})\n\ndescribe('uiSlice', () => {\n  const initialState: UiState = {\n    theme: 'light',\n    sidebarOpen: false,\n    loading: {\n      global: false,\n      components: {},\n    },\n    notifications: [],\n    modals: {\n      isPaymentMethodModalOpen: false,\n      isSubscriptionModalOpen: false,\n      isInviteUserModalOpen: false,\n    },\n  }\n\n  beforeEach(() => {\n    vi.clearAllMocks()\n  })\n\n  afterEach(() => {\n    vi.restoreAllMocks()\n  })\n\n  describe('initial state', () => {\n    it('should return the initial state', () => {\n      expect(uiReducer(undefined, { type: 'unknown' })).toEqual(initialState)\n    })\n  })\n\n  describe('theme actions', () => {\n    it('should handle setTheme to dark', () => {\n      const actual = uiReducer(initialState, setTheme('dark'))\n      expect(actual.theme).toBe('dark')\n      expect(localStorage.setItem).toHaveBeenCalledWith('theme', 'dark')\n    })\n\n    it('should handle setTheme to light', () => {\n      const darkState = { ...initialState, theme: 'dark' as Theme }\n      const actual = uiReducer(darkState, setTheme('light'))\n      expect(actual.theme).toBe('light')\n      expect(localStorage.setItem).toHaveBeenCalledWith('theme', 'light')\n    })\n  })\n\n  describe('sidebar actions', () => {\n    it('should handle toggleSidebar from closed', () => {\n      const actual = uiReducer(initialState, toggleSidebar())\n      expect(actual.sidebarOpen).toBe(true)\n    })\n\n    it('should handle toggleSidebar from open', () => {\n      const openState = { ...initialState, sidebarOpen: true }\n      const actual = uiReducer(openState, toggleSidebar())\n      expect(actual.sidebarOpen).toBe(false)\n    })\n\n    it('should handle setSidebarOpen true', () => {\n      const actual = uiReducer(initialState, setSidebarOpen(true))\n      expect(actual.sidebarOpen).toBe(true)\n    })\n\n    it('should handle setSidebarOpen false', () => {\n      const openState = { ...initialState, sidebarOpen: true }\n      const actual = uiReducer(openState, setSidebarOpen(false))\n      expect(actual.sidebarOpen).toBe(false)\n    })\n  })\n\n  describe('loading actions', () => {\n    it('should handle setGlobalLoading true', () => {\n      const actual = uiReducer(initialState, setGlobalLoading(true))\n      expect(actual.loading.global).toBe(true)\n    })\n\n    it('should handle setGlobalLoading false', () => {\n      const loadingState = {\n        ...initialState,\n        loading: { ...initialState.loading, global: true }\n      }\n      const actual = uiReducer(loadingState, setGlobalLoading(false))\n      expect(actual.loading.global).toBe(false)\n    })\n\n    it('should handle setComponentLoading', () => {\n      const actual = uiReducer(initialState, setComponentLoading({\n        component: 'userProfile',\n        loading: true\n      }))\n      expect(actual.loading.components.userProfile).toBe(true)\n    })\n\n    it('should handle multiple component loading states', () => {\n      let state = uiReducer(initialState, setComponentLoading({\n        component: 'userProfile',\n        loading: true\n      }))\n      state = uiReducer(state, setComponentLoading({\n        component: 'paymentForm',\n        loading: true\n      }))\n      state = uiReducer(state, setComponentLoading({\n        component: 'userProfile',\n        loading: false\n      }))\n\n      expect(state.loading.components.userProfile).toBe(false)\n      expect(state.loading.components.paymentForm).toBe(true)\n    })\n  })\n\n  describe('notification actions', () => {\n    it('should handle addNotification', () => {\n      const notification = {\n        type: 'success' as const,\n        title: 'Success',\n        message: 'Operation completed',\n        duration: 5000\n      }\n\n      const actual = uiReducer(initialState, addNotification(notification))\n\n      expect(actual.notifications).toHaveLength(1)\n      expect(actual.notifications[0]).toMatchObject({\n        type: 'success',\n        title: 'Success',\n        message: 'Operation completed',\n        duration: 5000\n      })\n      expect(actual.notifications[0].id).toBeDefined()\n      expect(typeof actual.notifications[0].id).toBe('string')\n    })\n\n    it('should handle addNotification without duration', () => {\n      const notification = {\n        type: 'error' as const,\n        title: 'Error',\n        message: 'Something went wrong'\n      }\n\n      const actual = uiReducer(initialState, addNotification(notification))\n\n      expect(actual.notifications).toHaveLength(1)\n      expect(actual.notifications[0]).toMatchObject({\n        type: 'error',\n        title: 'Error',\n        message: 'Something went wrong'\n      })\n      expect(actual.notifications[0].duration).toBeUndefined()\n    })\n\n    it('should handle addNotification with actions', () => {\n      const mockAction = vi.fn()\n      const notification = {\n        type: 'warning' as const,\n        title: 'Warning',\n        message: 'Action required',\n        actions: [{ label: 'Retry', action: mockAction }]\n      }\n\n      const actual = uiReducer(initialState, addNotification(notification))\n\n      expect(actual.notifications).toHaveLength(1)\n      expect(actual.notifications[0].actions).toHaveLength(1)\n      expect(actual.notifications[0].actions![0].label).toBe('Retry')\n    })\n\n    it('should generate unique IDs for notifications', () => {\n      const notification1 = { type: 'info' as const, title: 'Info 1', message: 'Message 1' }\n      const notification2 = { type: 'info' as const, title: 'Info 2', message: 'Message 2' }\n\n      let state = uiReducer(initialState, addNotification(notification1))\n      state = uiReducer(state, addNotification(notification2))\n\n      expect(state.notifications).toHaveLength(2)\n      expect(state.notifications[0].id).not.toBe(state.notifications[1].id)\n    })\n\n    it('should handle removeNotification', () => {\n      const stateWithNotifications: UiState = {\n        ...initialState,\n        notifications: [\n          { id: '1', type: 'success', title: 'Success', message: 'Test 1' },\n          { id: '2', type: 'error', title: 'Error', message: 'Test 2' },\n          { id: '3', type: 'info', title: 'Info', message: 'Test 3' }\n        ]\n      }\n\n      const actual = uiReducer(stateWithNotifications, removeNotification('2'))\n\n      expect(actual.notifications).toHaveLength(2)\n      expect(actual.notifications.find(n => n.id === '2')).toBeUndefined()\n      expect(actual.notifications.find(n => n.id === '1')).toBeDefined()\n      expect(actual.notifications.find(n => n.id === '3')).toBeDefined()\n    })\n\n    it('should handle clearNotifications', () => {\n      const stateWithNotifications: UiState = {\n        ...initialState,\n        notifications: [\n          { id: '1', type: 'success', title: 'Success', message: 'Test 1' },\n          { id: '2', type: 'error', title: 'Error', message: 'Test 2' }\n        ]\n      }\n\n      const actual = uiReducer(stateWithNotifications, clearNotifications())\n      expect(actual.notifications).toHaveLength(0)\n    })\n  })\n\n  describe('modal actions', () => {\n    it('should handle openModal', () => {\n      const actual = uiReducer(initialState, openModal('isPaymentMethodModalOpen'))\n      expect(actual.modals.isPaymentMethodModalOpen).toBe(true)\n      expect(actual.modals.isSubscriptionModalOpen).toBe(false)\n      expect(actual.modals.isInviteUserModalOpen).toBe(false)\n    })\n\n    it('should handle multiple openModal calls', () => {\n      let state = uiReducer(initialState, openModal('isPaymentMethodModalOpen'))\n      state = uiReducer(state, openModal('isSubscriptionModalOpen'))\n\n      expect(state.modals.isPaymentMethodModalOpen).toBe(true)\n      expect(state.modals.isSubscriptionModalOpen).toBe(true)\n      expect(state.modals.isInviteUserModalOpen).toBe(false)\n    })\n\n    it('should handle closeModal', () => {\n      const stateWithOpenModals: UiState = {\n        ...initialState,\n        modals: {\n          isPaymentMethodModalOpen: true,\n          isSubscriptionModalOpen: true,\n          isInviteUserModalOpen: true\n        }\n      }\n\n      const actual = uiReducer(stateWithOpenModals, closeModal('isPaymentMethodModalOpen'))\n      expect(actual.modals.isPaymentMethodModalOpen).toBe(false)\n      expect(actual.modals.isSubscriptionModalOpen).toBe(true)\n      expect(actual.modals.isInviteUserModalOpen).toBe(true)\n    })\n\n    it('should handle closeAllModals', () => {\n      const stateWithOpenModals: UiState = {\n        ...initialState,\n        modals: {\n          isPaymentMethodModalOpen: true,\n          isSubscriptionModalOpen: true,\n          isInviteUserModalOpen: true\n        }\n      }\n\n      const actual = uiReducer(stateWithOpenModals, closeAllModals())\n      expect(actual.modals.isPaymentMethodModalOpen).toBe(false)\n      expect(actual.modals.isSubscriptionModalOpen).toBe(false)\n      expect(actual.modals.isInviteUserModalOpen).toBe(false)\n    })\n  })\n\n  describe('selectors', () => {\n    const mockState = {\n      ui: {\n        theme: 'dark' as Theme,\n        sidebarOpen: true,\n        loading: {\n          global: true,\n          components: {\n            userProfile: true,\n            paymentForm: false\n          }\n        },\n        notifications: [\n          { id: '1', type: 'success', title: 'Success', message: 'Test' }\n        ] as Notification[],\n        modals: {\n          isPaymentMethodModalOpen: true,\n          isSubscriptionModalOpen: false,\n          isInviteUserModalOpen: false\n        }\n      }\n    }\n\n    it('should select theme', () => {\n      expect(selectTheme(mockState)).toBe('dark')\n    })\n\n    it('should select sidebar open state', () => {\n      expect(selectSidebarOpen(mockState)).toBe(true)\n    })\n\n    it('should select global loading state', () => {\n      expect(selectGlobalLoading(mockState)).toBe(true)\n    })\n\n    it('should select component loading state', () => {\n      expect(selectComponentLoading('userProfile')(mockState)).toBe(true)\n      expect(selectComponentLoading('paymentForm')(mockState)).toBe(false)\n      expect(selectComponentLoading('nonExistent')(mockState)).toBe(false)\n    })\n\n    it('should select notifications', () => {\n      const notifications = selectNotifications(mockState)\n      expect(notifications).toHaveLength(1)\n      expect(notifications[0].title).toBe('Success')\n    })\n\n    it('should select modals', () => {\n      const modals = selectModals(mockState)\n      expect(modals.isPaymentMethodModalOpen).toBe(true)\n      expect(modals.isSubscriptionModalOpen).toBe(false)\n      expect(modals.isInviteUserModalOpen).toBe(false)\n    })\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/store/slices/uiSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/stories/Button.stories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/stories/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/stories/Header.stories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/stories/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/stories/Page.stories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/stories/Page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/api-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[326,329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[326,329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[381,384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[381,384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[406,409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[406,409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":22,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":22,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[789,792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[789,792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[794,797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[794,797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[799,802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[799,802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { configureStore } from '@reduxjs/toolkit'\nimport type { BaseQueryFn, Api } from '@reduxjs/toolkit/query'\n\nimport authSlice from '../store/slices/authSlice'\nimport uiSlice from '../store/slices/uiSlice'\n\n// Helper function to create a store for API testing\nexport function setupApiStore<T extends Api<BaseQueryFn, any, any, any>>(\n  api: T,\n  extraReducers?: Record<string, any>,\n  preloadedState?: any\n) {\n  const store = configureStore({\n    reducer: {\n      [api.reducerPath]: api.reducer,\n      auth: authSlice,\n      ui: uiSlice,\n      ...extraReducers,\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(api.middleware),\n    preloadedState,\n  })\n\n  return store\n}\n\n// Helper type for API store\nexport type ApiStore<T extends Api<BaseQueryFn, any, any, any>> = ReturnType<typeof setupApiStore<T>>\n\n// Mock response helpers\nexport const createMockUser = (overrides = {}) => ({\n  id: '123',\n  name: 'Test User',\n  email: 'test@example.com',\n  provider: 'google',\n  preferences: {},\n  createdAt: '2024-01-01T00:00:00Z',\n  lastActiveAt: null,\n  ...overrides,\n})\n\nexport const createMockSessionInfo = (overrides = {}) => ({\n  user: createMockUser(),\n  session: {\n    activeTokens: 1,\n    lastActiveAt: '2024-01-15T10:30:00Z',\n    createdAt: '2024-01-01T09:00:00Z',\n  },\n  ...overrides,\n})\n\nexport const createMockAuthMethods = (overrides = {}) => ({\n  methods: ['password', 'oauth2'],\n  passwordAuthEnabled: true,\n  oauth2Providers: ['google', 'github', 'microsoft'],\n  ...overrides,\n})","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/fixtures/users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/integration/api-validation.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SubscriptionSchema' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AuthMethodsResponseSchema' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoginResponseSchema' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .issues on an `error` typed value.","line":248,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":248,"endColumn":42},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":442,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":442,"endColumn":58,"suggestions":[{"messageId":"removeAsync","fix":{"range":[14483,14489],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":448,"column":67,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":448,"endColumn":69,"suggestions":[{"messageId":"removeAsync","fix":{"range":[14767,14773],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach } from 'vitest'\nimport { z } from 'zod'\n\nimport {\n  UserSchema,\n  PaymentSchema,\n  SubscriptionSchema,\n  AuthMethodsResponseSchema,\n  LoginResponseSchema,\n  ApiSuccessResponseSchema,\n  ApiErrorResponseSchema,\n} from '@/types/api'\nimport {\n  validateApiResponse,\n  ApiValidationError,\n  ApiResponseError,\n} from '@/lib/api/validation'\nimport {\n  createValidationTestSuite,\n  runValidationTests,\n  generateRealisticMockData,\n  benchmarkValidation,\n  MockApiClient,\n} from '@/lib/api/testing'\nimport { processApiError } from '@/lib/api/errorHandling'\n\n/**\n * Comprehensive tests for API validation system\n */\n\ndescribe('API Validation System', () => {\n  describe('Schema Validation', () => {\n    describe('User Schema', () => {\n      it('should validate correct user data', () => {\n        const validUser = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          email: 'test@example.com',\n          firstName: 'John',\n          lastName: 'Doe',\n          role: 'USER',\n          emailVerified: true,\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => UserSchema.parse(validUser)).not.toThrow()\n      })\n\n      it('should reject invalid user data', () => {\n        const invalidUser = {\n          id: 'invalid-id', // Not a UUID\n          email: 'invalid-email', // Invalid email format\n          role: 'INVALID_ROLE', // Invalid role\n          emailVerified: 'yes', // Should be boolean\n        }\n\n        expect(() => UserSchema.parse(invalidUser)).toThrow()\n      })\n\n      it('should validate UUID format for user ID', () => {\n        const userWithInvalidId = {\n          id: 'not-a-uuid',\n          email: 'test@example.com',\n          role: 'USER',\n          emailVerified: true,\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => UserSchema.parse(userWithInvalidId)).toThrow(z.ZodError)\n      })\n\n      it('should validate email format', () => {\n        const userWithInvalidEmail = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          email: 'not-an-email',\n          role: 'USER',\n          emailVerified: true,\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => UserSchema.parse(userWithInvalidEmail)).toThrow(z.ZodError)\n      })\n\n      it('should validate role enum', () => {\n        const userWithInvalidRole = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          email: 'test@example.com',\n          role: 'INVALID_ROLE',\n          emailVerified: true,\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => UserSchema.parse(userWithInvalidRole)).toThrow(z.ZodError)\n      })\n    })\n\n    describe('Payment Schema', () => {\n      it('should validate correct payment data', () => {\n        const validPayment = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          amount: 1999,\n          currency: 'USD',\n          status: 'COMPLETED',\n          paymentMethodId: 'pm_123',\n          customerId: 'cus_123',\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n          paidAt: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => PaymentSchema.parse(validPayment)).not.toThrow()\n      })\n\n      it('should reject negative amounts', () => {\n        const paymentWithNegativeAmount = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          amount: -100,\n          currency: 'USD',\n          status: 'COMPLETED',\n          paymentMethodId: 'pm_123',\n          customerId: 'cus_123',\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => PaymentSchema.parse(paymentWithNegativeAmount)).toThrow()\n      })\n\n      it('should validate currency code length', () => {\n        const paymentWithInvalidCurrency = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          amount: 1999,\n          currency: 'INVALID', // Should be 3 characters\n          status: 'COMPLETED',\n          paymentMethodId: 'pm_123',\n          customerId: 'cus_123',\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => PaymentSchema.parse(paymentWithInvalidCurrency)).toThrow()\n      })\n    })\n\n    describe('API Response Wrappers', () => {\n      it('should validate success response format', () => {\n        const successResponse = {\n          success: true,\n          data: { message: 'Success' },\n          timestamp: '2024-01-01T00:00:00Z',\n        }\n\n        const schema = ApiSuccessResponseSchema(z.object({ message: z.string() }))\n        expect(() => schema.parse(successResponse)).not.toThrow()\n      })\n\n      it('should validate error response format', () => {\n        const errorResponse = {\n          success: false,\n          error: {\n            code: 'AUTH_001',\n            message: 'Authentication failed',\n          },\n          timestamp: '2024-01-01T00:00:00Z',\n        }\n\n        expect(() => ApiErrorResponseSchema.parse(errorResponse)).not.toThrow()\n      })\n\n      it('should reject malformed responses', () => {\n        const malformedResponse = {\n          success: 'maybe', // Should be boolean\n          data: 'not an object',\n        }\n\n        const schema = ApiSuccessResponseSchema(z.object({}))\n        expect(() => schema.parse(malformedResponse)).toThrow()\n      })\n    })\n  })\n\n  describe('Runtime Validation', () => {\n    it('should validate API responses at runtime', () => {\n      const mockApiResponse = {\n        success: true,\n        data: {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          email: 'test@example.com',\n          role: 'USER',\n          emailVerified: true,\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n        timestamp: '2024-01-01T00:00:00Z',\n      }\n\n      const schema = ApiSuccessResponseSchema(UserSchema)\n      const result = validateApiResponse(schema, mockApiResponse, 'test-endpoint')\n\n      expect(result.success).toBe(true)\n      expect(result.data.email).toBe('test@example.com')\n    })\n\n    it('should throw ApiValidationError for invalid responses', () => {\n      const invalidResponse = {\n        success: true,\n        data: {\n          id: 'invalid-uuid',\n          email: 'invalid-email',\n        },\n        timestamp: '2024-01-01T00:00:00Z',\n      }\n\n      const schema = ApiSuccessResponseSchema(UserSchema)\n\n      expect(() => {\n        validateApiResponse(schema, invalidResponse, 'test-endpoint')\n      }).toThrow(ApiValidationError)\n    })\n\n    it('should provide detailed error information', () => {\n      const invalidResponse = {\n        success: true,\n        data: {\n          id: 'invalid-uuid',\n          email: 'invalid-email',\n          role: 'INVALID_ROLE',\n          emailVerified: true,\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n        timestamp: '2024-01-01T00:00:00Z',\n      }\n\n      const schema = ApiSuccessResponseSchema(UserSchema)\n\n      try {\n        validateApiResponse(schema, invalidResponse, 'test-endpoint')\n      } catch (error) {\n        expect(error).toBeInstanceOf(ApiValidationError)\n        expect(error.message).toContain('API validation failed for test-endpoint')\n        expect(error.originalError.issues).toHaveLength(3) // id, email, role errors\n      }\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should process API validation errors correctly', () => {\n      const validationError = new ApiValidationError(\n        'Test validation error',\n        new z.ZodError([\n          {\n            code: 'invalid_type',\n            expected: 'string',\n            received: 'number',\n            path: ['email'],\n            message: 'Expected string, received number',\n          },\n        ]),\n        { email: 123 }\n      )\n\n      const errorInfo = processApiError(validationError)\n\n      expect(errorInfo.code).toBe('VALIDATION_ERROR')\n      expect(errorInfo.severity).toBe('high')\n      expect(errorInfo.isRetryable).toBe(true)\n      expect(errorInfo.userMessage).toContain('server response was invalid')\n    })\n\n    it('should process API response errors correctly', () => {\n      const responseError = new ApiResponseError(\n        'Payment failed',\n        402,\n        {\n          success: false,\n          error: {\n            code: 'PAY_002',\n            message: 'Card declined',\n          },\n        }\n      )\n\n      const errorInfo = processApiError(responseError)\n\n      expect(errorInfo.code).toBe('PAY_002')\n      expect(errorInfo.message).toBe('Card declined')\n      expect(errorInfo.isRetryable).toBe(true)\n      expect(errorInfo.userMessage).toBe('Your card was declined. Please try a different payment method.')\n    })\n\n    it('should handle network errors', () => {\n      const networkError = new TypeError('Failed to fetch')\n\n      const errorInfo = processApiError(networkError)\n\n      expect(errorInfo.code).toBe('NETWORK_ERROR')\n      expect(errorInfo.severity).toBe('high')\n      expect(errorInfo.isRetryable).toBe(true)\n      expect(errorInfo.userMessage).toContain('check your internet connection')\n    })\n  })\n\n  describe('Mock Data Generation', () => {\n    it('should generate realistic mock data', () => {\n      const mockUser = generateRealisticMockData(UserSchema)\n\n      expect(mockUser.id).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)\n      expect(mockUser.email).toContain('@')\n      expect(['USER', 'ORGANIZATION_ADMIN', 'ADMIN']).toContain(mockUser.role)\n      expect(typeof mockUser.emailVerified).toBe('boolean')\n    })\n\n    it('should generate different mock data on each call', () => {\n      const mockUser1 = generateRealisticMockData(UserSchema)\n      const mockUser2 = generateRealisticMockData(UserSchema)\n\n      expect(mockUser1.id).not.toBe(mockUser2.id)\n    })\n  })\n\n  describe('Test Suite Generation', () => {\n    it('should generate comprehensive test scenarios', () => {\n      const scenarios = createValidationTestSuite(UserSchema, 'User')\n\n      expect(scenarios).toHaveLength(6) // Valid + 5 invalid scenarios\n      expect(scenarios[0].expectedValid).toBe(true)\n      expect(scenarios.slice(1).every(s => !s.expectedValid)).toBe(true)\n    })\n\n    it('should run validation test scenarios', () => {\n      const scenarios = createValidationTestSuite(UserSchema, 'User')\n      const results = runValidationTests(UserSchema, scenarios)\n\n      expect(results.passed).toBeGreaterThan(0)\n      expect(results.failed).toBe(0) // All tests should pass\n      expect(results.results).toHaveLength(scenarios.length)\n    })\n  })\n\n  describe('Performance Benchmarking', () => {\n    it('should benchmark validation performance', async () => {\n      const mockUser = generateRealisticMockData(UserSchema)\n      const benchmark = await benchmarkValidation(UserSchema, mockUser, 100)\n\n      expect(benchmark.iterations).toBe(100)\n      expect(benchmark.averageTime).toBeGreaterThan(0)\n      expect(benchmark.averageTime).toBeLessThan(10) // Should be under 10ms average\n      expect(benchmark.minTime).toBeLessThanOrEqual(benchmark.averageTime)\n      expect(benchmark.maxTime).toBeGreaterThanOrEqual(benchmark.averageTime)\n    })\n\n    it('should benchmark complex object validation', async () => {\n      const complexSchema = z.object({\n        users: z.array(UserSchema),\n        payments: z.array(PaymentSchema),\n        metadata: z.record(z.string()),\n      })\n\n      const complexData = {\n        users: Array.from({ length: 10 }, () => generateRealisticMockData(UserSchema)),\n        payments: Array.from({ length: 5 }, () => generateRealisticMockData(PaymentSchema)),\n        metadata: { key1: 'value1', key2: 'value2' },\n      }\n\n      const benchmark = await benchmarkValidation(complexSchema, complexData, 50)\n\n      expect(benchmark.averageTime).toBeGreaterThan(0)\n      expect(benchmark.averageTime).toBeLessThan(50) // Should still be reasonably fast\n    })\n  })\n\n  describe('Mock API Client', () => {\n    let mockClient: MockApiClient\n\n    beforeEach(() => {\n      mockClient = new MockApiClient()\n    })\n\n    it('should mock API responses with validation', async () => {\n      const mockResponse = {\n        success: true,\n        data: generateRealisticMockData(UserSchema),\n        timestamp: new Date().toISOString(),\n      }\n\n      mockClient.setResponse('/users/123', mockResponse)\n\n      const schema = ApiSuccessResponseSchema(UserSchema)\n      const result = await mockClient.request('/users/123', schema)\n\n      expect(result.success).toBe(true)\n      expect(result.data.email).toContain('@')\n    })\n\n    it('should simulate network delays', async () => {\n      const mockResponse = {\n        success: true,\n        data: { message: 'Delayed response' },\n        timestamp: new Date().toISOString(),\n      }\n\n      mockClient.setResponse('/slow-endpoint', mockResponse, 100) // 100ms delay\n\n      const start = Date.now()\n      const schema = ApiSuccessResponseSchema(z.object({ message: z.string() }))\n      await mockClient.request('/slow-endpoint', schema)\n      const duration = Date.now() - start\n\n      expect(duration).toBeGreaterThan(90) // Allow some variance\n    })\n\n    it('should simulate error rates', async () => {\n      mockClient.setResponse('/flaky-endpoint', { data: 'success' }, 0, 0.5) // 50% error rate\n\n      const schema = z.object({ data: z.string() })\n      const results = await Promise.allSettled(\n        Array.from({ length: 20 }, () => mockClient.request('/flaky-endpoint', schema))\n      )\n\n      const failures = results.filter(r => r.status === 'rejected').length\n      expect(failures).toBeGreaterThan(0) // Some requests should fail\n      expect(failures).toBeLessThan(20) // Not all requests should fail\n    })\n\n    it('should handle missing endpoints', async () => {\n      const schema = z.object({ data: z.string() })\n\n      await expect(\n        mockClient.request('/non-existent', schema)\n      ).rejects.toThrow('No mock response configured')\n    })\n  })\n\n  describe('Integration with RTK Query', () => {\n    it('should validate RTK Query responses', async () => {\n      // This would test the integration with actual RTK Query endpoints\n      // Implementation depends on your specific API setup\n      expect(true).toBe(true) // Placeholder for actual integration test\n    })\n\n    it('should handle RTK Query errors with validation', async () => {\n      // Test error handling in RTK Query with validation\n      expect(true).toBe(true) // Placeholder for actual integration test\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/integration/auth-flow.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":276,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":19},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":377,"column":76,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":377,"endColumn":78,"suggestions":[{"messageId":"removeAsync","fix":{"range":[10817,10823],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach } from 'vitest'\nimport { screen, waitFor } from '@testing-library/react'\nimport { http, HttpResponse } from 'msw'\n\nimport { server } from '../setup'\nimport { customRender, unauthenticatedState, testUtils } from '../utils/test-utils'\n\nimport { LoginPage } from '@/pages/auth/LoginPage'\nimport { DashboardPage } from '@/pages/dashboard/DashboardPage'\n\n/**\n * Integration tests for complete authentication flows\n */\n\ndescribe('Authentication Flow Integration', () => {\n  beforeEach(() => {\n    server.resetHandlers()\n  })\n\n  describe('Login Flow', () => {\n    it('should complete successful login flow', async () => {\n      const { user } = customRender(<LoginPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      // Fill login form\n      await testUtils.fillForm(user, {\n        email: 'test@example.com',\n        password: 'password123',\n        organization: 'org-123',\n      })\n\n      // Submit form\n      await testUtils.submitForm(user, 'Sign In')\n\n      // Wait for successful login\n      await waitFor(() => {\n        expect(screen.queryByText(/signing in/i)).not.toBeInTheDocument()\n      })\n\n      // Verify success state (depends on your UI implementation)\n      expect(screen.queryByText(/invalid/i)).not.toBeInTheDocument()\n    })\n\n    it('should handle invalid credentials', async () => {\n      // Mock invalid login response\n      server.use(\n        http.post('http://localhost:3000/api/auth/mock-login', () => {\n          return HttpResponse.json(\n            {\n              success: false,\n              error: {\n                code: 'AUTH_001',\n                message: 'Invalid email or password',\n              },\n              timestamp: new Date().toISOString(),\n            },\n            { status: 401 }\n          )\n        })\n      )\n\n      const { user } = customRender(<LoginPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        email: 'invalid@example.com',\n        password: 'wrongpassword',\n      })\n\n      await testUtils.submitForm(user, 'Sign In')\n\n      // Wait for error to appear\n      await testUtils.waitForError('Invalid email or password')\n    })\n\n    it('should handle account lockout', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/auth/mock-login', () => {\n          return HttpResponse.json(\n            {\n              success: false,\n              error: {\n                code: 'AUTH_002',\n                message: 'Account locked due to too many failed attempts',\n              },\n              timestamp: new Date().toISOString(),\n            },\n            { status: 423 }\n          )\n        })\n      )\n\n      const { user } = customRender(<LoginPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        email: 'locked@example.com',\n        password: 'password123',\n      })\n\n      await testUtils.submitForm(user, 'Sign In')\n\n      await testUtils.waitForError('Account locked')\n    })\n\n    it('should handle network errors gracefully', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/auth/mock-login', () => {\n          return HttpResponse.error()\n        })\n      )\n\n      const { user } = customRender(<LoginPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        email: 'test@example.com',\n        password: 'password123',\n      })\n\n      await testUtils.submitForm(user, 'Sign In')\n\n      await testUtils.waitForError()\n    })\n\n    it('should validate form fields', async () => {\n      const { user } = customRender(<LoginPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      // Try to submit without filling fields\n      await testUtils.submitForm(user, 'Sign In')\n\n      // Check for validation errors\n      await waitFor(() => {\n        expect(screen.getByText(/email is required/i)).toBeInTheDocument()\n      })\n    })\n\n    it('should handle password complexity requirements', async () => {\n      const { user } = customRender(<LoginPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        email: 'test@example.com',\n        password: '123', // Too short\n      })\n\n      await testUtils.submitForm(user, 'Sign In')\n\n      await waitFor(() => {\n        expect(screen.getByText(/password must be at least/i)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Registration Flow', () => {\n    it('should complete successful registration', async () => {\n      const RegisterPage = () => (\n        <div>\n          <h1>Register</h1>\n          {/* Mock registration form */}\n          <form>\n            <input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              aria-label=\"Email\"\n            />\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n            />\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Full Name\"\n              aria-label=\"Full Name\"\n            />\n            <button type=\"submit\">Register</button>\n          </form>\n        </div>\n      )\n\n      const { user } = customRender(<RegisterPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        email: 'newuser@example.com',\n        password: 'SecurePassword123!',\n        'Full Name': 'New User',\n      })\n\n      await testUtils.submitForm(user, 'Register')\n\n      // Verify form submission (would redirect or show success)\n      // This depends on your actual registration component implementation\n    })\n\n    it('should handle duplicate email registration', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/auth/register', () => {\n          return HttpResponse.json(\n            {\n              success: false,\n              error: {\n                code: 'VAL_003',\n                message: 'Email address already in use',\n              },\n              timestamp: new Date().toISOString(),\n            },\n            { status: 409 }\n          )\n        })\n      )\n\n      const RegisterPage = () => (\n        <div>\n          <h1>Register</h1>\n          <form>\n            <input type=\"email\" name=\"email\" aria-label=\"Email\" />\n            <input type=\"password\" name=\"password\" aria-label=\"Password\" />\n            <input type=\"text\" name=\"name\" aria-label=\"Full Name\" />\n            <button type=\"submit\">Register</button>\n          </form>\n        </div>\n      )\n\n      const { user } = customRender(<RegisterPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        email: 'existing@example.com',\n        password: 'SecurePassword123!',\n        'Full Name': 'Existing User',\n      })\n\n      await testUtils.submitForm(user, 'Register')\n\n      await testUtils.waitForError('Email address already in use')\n    })\n  })\n\n  describe('Session Management', () => {\n    it('should handle session expiry gracefully', async () => {\n      // Session expiry now returns 200 with authenticated: false\n      server.use(\n        http.get('http://localhost:3000/api/auth/session', () => {\n          return HttpResponse.json(\n            {\n              authenticated: false,\n              timestamp: new Date().toISOString(),\n            },\n            { status: 200 }\n          )\n        })\n      )\n\n      const { user } = customRender(<DashboardPage />, {\n        preloadedState: unauthenticatedState,\n        withRouter: true,\n      })\n\n      // Component should handle session expiry with 200 + authenticated: false\n      await waitFor(() => {\n        expect(screen.queryByText(/dashboard/i)).not.toBeInTheDocument()\n      })\n    })\n\n    it('should refresh session on user activity', async () => {\n      let sessionCallCount = 0\n      server.use(\n        http.get('http://localhost:3000/api/auth/session', () => {\n          sessionCallCount++\n          return HttpResponse.json({\n            authenticated: true,\n            user: {\n              id: 'user-123',\n              email: 'test@example.com',\n              firstName: 'Test',\n              lastName: 'User',\n              role: 'USER',\n              emailVerified: true,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n            },\n            session: {\n              activeTokens: 1,\n              lastActiveAt: new Date().toISOString(),\n              createdAt: new Date().toISOString(),\n            },\n            timestamp: new Date().toISOString(),\n          })\n        })\n      )\n\n      const { user } = customRender(<DashboardPage />, {\n        withRouter: true,\n      })\n\n      // Simulate user activity\n      const button = screen.getByRole('button', { name: /refresh/i })\n      await user.click(button)\n\n      // Session should be refreshed\n      await waitFor(() => {\n        expect(sessionCallCount).toBeGreaterThan(0)\n      })\n    })\n  })\n\n  describe('Logout Flow', () => {\n    it('should complete logout successfully', async () => {\n      const { user } = customRender(<DashboardPage />, {\n        withRouter: true,\n      })\n\n      // Find and click logout button\n      const logoutButton = screen.getByRole('button', { name: /logout|sign out/i })\n      await user.click(logoutButton)\n\n      // Wait for logout to complete\n      await waitFor(() => {\n        expect(screen.queryByText(/dashboard/i)).not.toBeInTheDocument()\n      })\n    })\n\n    it('should handle logout errors gracefully', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/auth/logout', () => {\n          return HttpResponse.json(\n            {\n              success: false,\n              error: {\n                code: 'SYS_001',\n                message: 'Logout failed',\n              },\n              timestamp: new Date().toISOString(),\n            },\n            { status: 500 }\n          )\n        })\n      )\n\n      const { user } = customRender(<DashboardPage />, {\n        withRouter: true,\n      })\n\n      const logoutButton = screen.getByRole('button', { name: /logout|sign out/i })\n      await user.click(logoutButton)\n\n      // Should still clear local state even if server logout fails\n      await waitFor(() => {\n        expect(screen.queryByText(/dashboard/i)).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Authentication State Persistence', () => {\n    it('should persist authentication state across page reloads', async () => {\n      // This would test localStorage/sessionStorage persistence\n      // Implementation depends on your auth state persistence strategy\n      expect(true).toBe(true) // Placeholder\n    })\n\n    it('should clear sensitive data on logout', async () => {\n      const { user } = customRender(<DashboardPage />, {\n        withRouter: true,\n      })\n\n      const logoutButton = screen.getByRole('button', { name: /logout|sign out/i })\n      await user.click(logoutButton)\n\n      // Verify sensitive data is cleared\n      expect(localStorage.getItem('token')).toBeNull()\n      expect(sessionStorage.getItem('user')).toBeNull()\n    })\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/integration/payment-flow.test.tsx","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":157,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":157,"endColumn":74,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4591,4597],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":182,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":182,"endColumn":60,"suggestions":[{"messageId":"removeAsync","fix":{"range":[5435,5441],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":203,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":203,"endColumn":61,"suggestions":[{"messageId":"removeAsync","fix":{"range":[6036,6042],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":229,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":369,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":369,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach } from 'vitest'\nimport { screen, waitFor } from '@testing-library/react'\nimport { http, HttpResponse } from 'msw'\n\nimport { server } from '../setup'\nimport { customRender, authenticatedState, testUtils } from '../utils/test-utils'\n\n/**\n * Integration tests for complete payment processing flows\n */\n\n// Mock Payment Component\nconst PaymentPage = () => (\n  <div>\n    <h1>Payment Processing</h1>\n    <form data-testid=\"payment-form\">\n      <input\n        type=\"number\"\n        name=\"amount\"\n        placeholder=\"Amount\"\n        aria-label=\"Payment Amount\"\n      />\n      <select name=\"currency\" aria-label=\"Currency\">\n        <option value=\"USD\">USD</option>\n        <option value=\"EUR\">EUR</option>\n      </select>\n      <textarea\n        name=\"description\"\n        placeholder=\"Description\"\n        aria-label=\"Payment Description\"\n      />\n      <button type=\"submit\">Create Payment Intent</button>\n    </form>\n    <div data-testid=\"payment-result\" style={{ marginTop: '20px' }}>\n      {/* Payment result would be displayed here */}\n    </div>\n  </div>\n)\n\nconst PaymentMethodsPage = () => (\n  <div>\n    <h1>Payment Methods</h1>\n    <div data-testid=\"payment-methods-list\">\n      <div data-testid=\"payment-method-1\">\n        <span>**** **** **** 4242</span>\n        <span>Visa</span>\n        <span>Default</span>\n        <button>Set as Default</button>\n        <button>Remove</button>\n      </div>\n    </div>\n    <button data-testid=\"add-payment-method\">Add Payment Method</button>\n  </div>\n)\n\ndescribe('Payment Flow Integration', () => {\n  beforeEach(() => {\n    server.resetHandlers()\n  })\n\n  describe('Payment Intent Creation', () => {\n    it('should create payment intent successfully', async () => {\n      const { user } = customRender(<PaymentPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      // Fill payment form\n      await testUtils.fillForm(user, {\n        'Payment Amount': '29.99',\n        'Payment Description': 'Test payment for subscription',\n      })\n\n      // Select currency\n      const currencySelect = screen.getByLabelText('Currency')\n      await user.selectOptions(currencySelect, 'USD')\n\n      // Submit payment form\n      await testUtils.submitForm(user, 'Create Payment Intent')\n\n      // Wait for payment intent creation\n      await waitFor(() => {\n        expect(screen.queryByText(/creating/i)).not.toBeInTheDocument()\n      })\n\n      // Should show success or redirect to payment confirmation\n      // This depends on your actual payment flow implementation\n    })\n\n    it('should handle invalid payment amounts', async () => {\n      const { user } = customRender(<PaymentPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      // Try with negative amount\n      await testUtils.fillForm(user, {\n        'Payment Amount': '-10',\n        'Payment Description': 'Invalid payment',\n      })\n\n      await testUtils.submitForm(user, 'Create Payment Intent')\n\n      await waitFor(() => {\n        expect(screen.getByText(/amount must be positive/i)).toBeInTheDocument()\n      })\n    })\n\n    it('should handle payment intent creation failure', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/payments/intents', () => {\n          return HttpResponse.json(\n            {\n              success: false,\n              error: {\n                code: 'PAY_001',\n                message: 'Payment could not be processed',\n              },\n              timestamp: new Date().toISOString(),\n            },\n            { status: 400 }\n          )\n        })\n      )\n\n      const { user } = customRender(<PaymentPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        'Payment Amount': '99.99',\n        'Payment Description': 'Failed payment test',\n      })\n\n      await testUtils.submitForm(user, 'Create Payment Intent')\n\n      await testUtils.waitForError('Payment could not be processed')\n    })\n\n    it('should validate required fields', async () => {\n      const { user } = customRender(<PaymentPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      // Submit without filling required fields\n      await testUtils.submitForm(user, 'Create Payment Intent')\n\n      await waitFor(() => {\n        expect(screen.getByText(/amount is required/i)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Payment Confirmation Flow', () => {\n    it('should confirm payment with selected payment method', async () => {\n      // Mock successful payment confirmation\n      server.use(\n        http.post('http://localhost:3000/api/payments/intents/:id/confirm', () => {\n          return HttpResponse.json({\n            success: true,\n            data: {\n              id: 'pi_confirmed_123',\n              clientSecret: 'pi_confirmed_secret_123',\n              status: 'succeeded',\n              amount: 2999,\n              currency: 'USD',\n              description: 'Confirmed payment',\n              metadata: null,\n            },\n            timestamp: new Date().toISOString(),\n          })\n        })\n      )\n\n      // This would test the payment confirmation component\n      // Implementation depends on your Stripe integration\n      expect(true).toBe(true) // Placeholder for actual test\n    })\n\n    it('should handle payment method declined', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/payments/intents/:id/confirm', () => {\n          return HttpResponse.json(\n            {\n              success: false,\n              error: {\n                code: 'PAY_002',\n                message: 'Your card was declined',\n              },\n              timestamp: new Date().toISOString(),\n            },\n            { status: 402 }\n          )\n        })\n      )\n\n      // Test card declined scenario\n      expect(true).toBe(true) // Placeholder for actual test\n    })\n\n    it('should handle 3D Secure authentication', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/payments/intents/:id/confirm', () => {\n          return HttpResponse.json({\n            success: true,\n            data: {\n              id: 'pi_3ds_123',\n              clientSecret: 'pi_3ds_secret_123',\n              status: 'requires_action',\n              amount: 2999,\n              currency: 'USD',\n              description: '3DS payment',\n              metadata: { requires_3ds: 'true' },\n            },\n            timestamp: new Date().toISOString(),\n          })\n        })\n      )\n\n      // Test 3D Secure flow\n      expect(true).toBe(true) // Placeholder for actual test\n    })\n  })\n\n  describe('Payment Methods Management', () => {\n    it('should display existing payment methods', async () => {\n      const { user } = customRender(<PaymentMethodsPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      // Should load and display payment methods\n      await waitFor(() => {\n        expect(screen.getByText(/\\*\\*\\*\\* \\*\\*\\*\\* \\*\\*\\*\\* 4242/)).toBeInTheDocument()\n        expect(screen.getByText(/visa/i)).toBeInTheDocument()\n      })\n    })\n\n    it('should add new payment method', async () => {\n      const { user } = customRender(<PaymentMethodsPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      const addButton = screen.getByTestId('add-payment-method')\n      await user.click(addButton)\n\n      // Should open payment method addition flow\n      // This would typically involve Stripe Elements\n      expect(true).toBe(true) // Placeholder for actual test\n    })\n\n    it('should set payment method as default', async () => {\n      server.use(\n        http.put('http://localhost:3000/api/payments/methods/:id/default', () => {\n          return HttpResponse.json({\n            success: true,\n            data: {\n              id: 'pm-123',\n              type: 'CARD',\n              last4: '4242',\n              brand: 'visa',\n              isDefault: true,\n              createdAt: new Date().toISOString(),\n            },\n            timestamp: new Date().toISOString(),\n          })\n        })\n      )\n\n      const { user } = customRender(<PaymentMethodsPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      const setDefaultButton = screen.getByRole('button', { name: /set as default/i })\n      await user.click(setDefaultButton)\n\n      await waitFor(() => {\n        expect(screen.getByText(/default/i)).toBeInTheDocument()\n      })\n    })\n\n    it('should remove payment method', async () => {\n      server.use(\n        http.delete('http://localhost:3000/api/payments/methods/:id', () => {\n          return HttpResponse.json({\n            success: true,\n            timestamp: new Date().toISOString(),\n          })\n        })\n      )\n\n      const { user } = customRender(<PaymentMethodsPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      const removeButton = screen.getByRole('button', { name: /remove/i })\n      await user.click(removeButton)\n\n      // Should show confirmation dialog\n      const confirmButton = screen.getByRole('button', { name: /confirm|yes/i })\n      await user.click(confirmButton)\n\n      await waitFor(() => {\n        expect(screen.queryByTestId('payment-method-1')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Payment History', () => {\n    it('should display payment history with pagination', async () => {\n      server.use(\n        http.get('http://localhost:3000/api/payments/organizations/:id', () => {\n          return HttpResponse.json({\n            success: true,\n            data: {\n              items: [\n                {\n                  id: 'payment-1',\n                  amount: 2999,\n                  currency: 'USD',\n                  status: 'COMPLETED',\n                  paymentMethodId: 'pm-123',\n                  customerId: 'cus-123',\n                  organizationId: 'org-123',\n                  createdAt: new Date().toISOString(),\n                  updatedAt: new Date().toISOString(),\n                  paidAt: new Date().toISOString(),\n                },\n                {\n                  id: 'payment-2',\n                  amount: 1999,\n                  currency: 'USD',\n                  status: 'FAILED',\n                  paymentMethodId: 'pm-123',\n                  customerId: 'cus-123',\n                  organizationId: 'org-123',\n                  createdAt: new Date().toISOString(),\n                  updatedAt: new Date().toISOString(),\n                },\n              ],\n              pagination: {\n                page: 0,\n                size: 10,\n                totalElements: 2,\n                totalPages: 1,\n                hasNext: false,\n                hasPrevious: false,\n              },\n            },\n            timestamp: new Date().toISOString(),\n          })\n        })\n      )\n\n      const PaymentHistoryPage = () => (\n        <div>\n          <h1>Payment History</h1>\n          <div data-testid=\"payment-list\">\n            {/* Payment list would be rendered here */}\n          </div>\n        </div>\n      )\n\n      const { user } = customRender(<PaymentHistoryPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      // Should load and display payment history\n      await testUtils.waitForLoadingToComplete()\n\n      // Verify payments are displayed\n      // This depends on your actual payment history component\n      expect(screen.getByTestId('payment-list')).toBeInTheDocument()\n    })\n\n    it('should filter payments by status', async () => {\n      const PaymentHistoryPage = () => (\n        <div>\n          <h1>Payment History</h1>\n          <select aria-label=\"Filter by Status\">\n            <option value=\"\">All</option>\n            <option value=\"COMPLETED\">Completed</option>\n            <option value=\"FAILED\">Failed</option>\n            <option value=\"PENDING\">Pending</option>\n          </select>\n          <div data-testid=\"filtered-payments\">\n            {/* Filtered payments would be rendered here */}\n          </div>\n        </div>\n      )\n\n      const { user } = customRender(<PaymentHistoryPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      const statusFilter = screen.getByLabelText('Filter by Status')\n      await user.selectOptions(statusFilter, 'COMPLETED')\n\n      // Should filter payments by status\n      // Implementation depends on your filtering logic\n      expect(true).toBe(true) // Placeholder for actual test\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle network errors gracefully', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/payments/intents', () => {\n          return HttpResponse.error()\n        })\n      )\n\n      const { user } = customRender(<PaymentPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        'Payment Amount': '50.00',\n      })\n\n      await testUtils.submitForm(user, 'Create Payment Intent')\n\n      await testUtils.waitForError('Unable to connect to the server')\n    })\n\n    it('should handle rate limiting', async () => {\n      server.use(\n        http.post('http://localhost:3000/api/payments/intents', () => {\n          return HttpResponse.json(\n            {\n              success: false,\n              error: {\n                code: 'RATE_001',\n                message: 'Too many requests',\n              },\n              timestamp: new Date().toISOString(),\n            },\n            { status: 429 }\n          )\n        })\n      )\n\n      const { user } = customRender(<PaymentPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        'Payment Amount': '75.00',\n      })\n\n      await testUtils.submitForm(user, 'Create Payment Intent')\n\n      await testUtils.waitForError('Too many requests')\n    })\n\n    it('should retry failed requests automatically', async () => {\n      let attemptCount = 0\n      server.use(\n        http.post('http://localhost:3000/api/payments/intents', () => {\n          attemptCount++\n          if (attemptCount === 1) {\n            return HttpResponse.error()\n          }\n          return HttpResponse.json({\n            success: true,\n            data: {\n              id: 'pi_retry_success',\n              clientSecret: 'pi_retry_secret',\n              status: 'requires_payment_method',\n              amount: 5000,\n              currency: 'USD',\n              description: 'Retry test',\n              metadata: null,\n            },\n            timestamp: new Date().toISOString(),\n          })\n        })\n      )\n\n      const { user } = customRender(<PaymentPage />, {\n        preloadedState: authenticatedState,\n        withRouter: true,\n      })\n\n      await testUtils.fillForm(user, {\n        'Payment Amount': '50.00',\n      })\n\n      await testUtils.submitForm(user, 'Create Payment Intent')\n\n      // Should eventually succeed after retry\n      await waitFor(() => {\n        expect(attemptCount).toBeGreaterThan(1)\n      })\n    })\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/mocks/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AuthMethodsResponseSchema' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoginResponseSchema' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SessionInfoSchema' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1305,1308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1305,1308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":47,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":61,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":86,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2388,2391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2388,2391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":88,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":30,"nodeType":"Property","messageId":"anyAssignment","endLine":105,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":105,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":152,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":152,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4053,4056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4053,4056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":160,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":160,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `any` value.","line":160,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":161,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":161,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currency on an `any` value.","line":161,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":162,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":162,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":162,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":163,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":163,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .metadata on an `any` value.","line":163,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'params' is defined but never used.","line":169,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":79}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { http, HttpResponse } from 'msw'\n\nimport { generateRealisticMockData } from '@/lib/api/testing'\nimport {\n  UserSchema,\n  PaymentSchema,\n  PaymentMethodSchema,\n  SubscriptionSchema,\n  OrganizationSchema,\n  AuthMethodsResponseSchema,\n  LoginResponseSchema,\n  SessionInfoSchema,\n} from '@/types/api'\n\n/**\n * Mock Service Worker (MSW) handlers for testing\n * Provides realistic API responses for all endpoints\n */\n\nconst API_BASE_URL = 'http://localhost:3000/api'\n\n// Generate mock data\nconst mockUser = generateRealisticMockData(UserSchema)\nconst mockPayment = generateRealisticMockData(PaymentSchema)\nconst mockPaymentMethod = generateRealisticMockData(PaymentMethodSchema)\nconst mockSubscription = generateRealisticMockData(SubscriptionSchema)\nconst mockOrganization = generateRealisticMockData(OrganizationSchema)\n\nexport const handlers = [\n  // Authentication endpoints\n  http.get(`${API_BASE_URL}/auth/methods`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        methods: ['PASSWORD', 'OAUTH2'],\n        passwordAuthEnabled: true,\n        oauth2Providers: ['google', 'github'],\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/auth/mock-login`, async ({ request }) => {\n    const credentials = await request.json() as any\n\n    // Simulate different scenarios based on email\n    if (credentials.email === 'locked@example.com') {\n      return HttpResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'AUTH_002',\n            message: 'Account locked due to too many failed attempts',\n          },\n          timestamp: new Date().toISOString(),\n        },\n        { status: 423 }\n      )\n    }\n\n    if (credentials.email === 'invalid@example.com') {\n      return HttpResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'AUTH_001',\n            message: 'Invalid email or password',\n          },\n          timestamp: new Date().toISOString(),\n        },\n        { status: 401 }\n      )\n    }\n\n    return HttpResponse.json({\n      success: true,\n      data: {\n        user: mockUser,\n        token: 'mock-token-' + Math.random().toString(36).substring(7),\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/auth/register`, async ({ request }) => {\n    const userData = await request.json() as any\n\n    if (userData.email === 'existing@example.com') {\n      return HttpResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'VAL_003',\n            message: 'Email address already in use',\n          },\n          timestamp: new Date().toISOString(),\n        },\n        { status: 409 }\n      )\n    }\n\n    return HttpResponse.json({\n      success: true,\n      data: {\n        user: { ...mockUser, email: userData.email },\n        token: 'mock-token-' + Math.random().toString(36).substring(7),\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/auth/session`, ({ request }) => {\n    const authHeader = request.headers.get('authorization')\n\n    if (!authHeader?.startsWith('Bearer ')) {\n      return HttpResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'AUTH_003',\n            message: 'Session expired',\n          },\n          timestamp: new Date().toISOString(),\n        },\n        { status: 401 }\n      )\n    }\n\n    return HttpResponse.json({\n      success: true,\n      data: {\n        user: mockUser,\n        session: {\n          activeTokens: 1,\n          lastActiveAt: new Date().toISOString(),\n          createdAt: new Date(Date.now() - 3600000).toISOString(),\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/auth/logout`, () => {\n    return HttpResponse.json({\n      success: true,\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  // Payment endpoints\n  http.post(`${API_BASE_URL}/payments/intents`, async ({ request }) => {\n    const paymentData = await request.json() as any\n\n    return HttpResponse.json({\n      success: true,\n      data: {\n        id: 'pi_mock_' + Math.random().toString(36).substring(7),\n        clientSecret: 'pi_mock_secret_' + Math.random().toString(36).substring(7),\n        status: 'requires_payment_method',\n        amount: paymentData.amount,\n        currency: paymentData.currency,\n        description: paymentData.description,\n        metadata: paymentData.metadata,\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/payments/organizations/:organizationId`, ({ params }) => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        items: [mockPayment, { ...mockPayment, id: 'payment-2', status: 'PENDING' }],\n        pagination: {\n          page: 0,\n          size: 10,\n          totalElements: 2,\n          totalPages: 1,\n          hasNext: false,\n          hasPrevious: false,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/payments/organizations/:organizationId/statistics`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        totalSuccessfulPayments: 42,\n        totalAmount: 99900, // $999.00 in cents\n        recentAmount: 19900, // $199.00 in cents\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/payments/methods/organizations/:organizationId`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        items: [\n          mockPaymentMethod,\n          { ...mockPaymentMethod, id: 'pm-2', isDefault: false },\n        ],\n        pagination: {\n          page: 0,\n          size: 10,\n          totalElements: 2,\n          totalPages: 1,\n          hasNext: false,\n          hasPrevious: false,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  // Subscription endpoints\n  http.get(`${API_BASE_URL}/subscriptions/organizations/:organizationId`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        items: [mockSubscription],\n        pagination: {\n          page: 0,\n          size: 10,\n          totalElements: 1,\n          totalPages: 1,\n          hasNext: false,\n          hasPrevious: false,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/subscriptions/plans`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        items: [\n          {\n            id: 'plan-basic',\n            name: 'Basic Plan',\n            description: 'Basic features for small teams',\n            amount: 999, // $9.99\n            currency: 'USD',\n            interval: 'MONTHLY',\n            features: ['Feature 1', 'Feature 2'],\n            maxUsers: 5,\n            isActive: true,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n          },\n          {\n            id: 'plan-pro',\n            name: 'Pro Plan',\n            description: 'Advanced features for growing teams',\n            amount: 1999, // $19.99\n            currency: 'USD',\n            interval: 'MONTHLY',\n            features: ['Feature 1', 'Feature 2', 'Feature 3'],\n            maxUsers: 20,\n            isActive: true,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n          },\n        ],\n        pagination: {\n          page: 0,\n          size: 10,\n          totalElements: 2,\n          totalPages: 1,\n          hasNext: false,\n          hasPrevious: false,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  // Organization endpoints\n  http.get(`${API_BASE_URL}/organizations/:organizationId`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: mockOrganization,\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/organizations/:organizationId/members`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        items: [\n          { ...mockUser, role: 'ORGANIZATION_ADMIN' },\n          { ...mockUser, id: 'user-2', email: 'member@example.com', role: 'USER' },\n        ],\n        pagination: {\n          page: 0,\n          size: 10,\n          totalElements: 2,\n          totalPages: 1,\n          hasNext: false,\n          hasPrevious: false,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  // Error simulation endpoints\n  http.get(`${API_BASE_URL}/test/500`, () => {\n    return HttpResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'SYS_001',\n          message: 'Internal server error',\n        },\n        timestamp: new Date().toISOString(),\n      },\n      { status: 500 }\n    )\n  }),\n\n  http.get(`${API_BASE_URL}/test/429`, () => {\n    return HttpResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'RATE_001',\n          message: 'Too many requests',\n        },\n        timestamp: new Date().toISOString(),\n      },\n      { status: 429 }\n    )\n  }),\n\n  http.get(`${API_BASE_URL}/test/validation-error`, () => {\n    return HttpResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'VAL_001',\n          message: 'Validation failed',\n          details: {\n            field: 'email',\n            issue: 'Invalid email format',\n          },\n        },\n        timestamp: new Date().toISOString(),\n      },\n      { status: 422 }\n    )\n  }),\n\n  // Network delay simulation\n  http.get(`${API_BASE_URL}/test/slow`, async () => {\n    await new Promise(resolve => setTimeout(resolve, 2000)) // 2 second delay\n    return HttpResponse.json({\n      success: true,\n      data: { message: 'Slow response' },\n      timestamp: new Date().toISOString(),\n    })\n  }),\n\n  // Fallback handler for unhandled requests\n  http.all('*', ({ request }) => {\n    console.warn(`Unhandled ${request.method} request to ${request.url}`)\n    return HttpResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'NOT_FOUND',\n          message: `Endpoint not found: ${request.method} ${request.url}`,\n        },\n        timestamp: new Date().toISOString(),\n      },\n      { status: 404 }\n    )\n  }),\n]","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/setup.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":53,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":75,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[1505,2510],"text":"setupPromise ??= (async () => {\n          try {\n            // Double-check runtime environment before importing MSW\n            if (typeof window !== 'undefined' || process.env?.VITEST_BROWSER) {\n              if (process.env.NODE_ENV === 'test') {\n                console.warn('Skipping MSW setup in browser environment')\n              }\n              return\n            }\n\n            // Use direct dynamic import inside async function instead of wrapped in Function\n            const mswModule = await import('msw/node')\n            serverInstance = globalThis.__MSW_SERVER__ ?? mswModule.setupServer(...handlers)\n            globalThis.__MSW_SERVER__ = serverInstance\n            serverInstance.listen({ onUnhandledRequest: 'error' })\n          } catch (error) {\n            if (process.env.NODE_ENV === 'test') {\n              console.warn('MSW server unavailable in this environment. Falling back to no-op handlers.', error)\n            }\n          }\n        })();"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3400,3403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3400,3403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .IntersectionObserver on an `any` value.","line":124,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":42},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":125,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":125,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"name":"constructor"},"fix":{"range":[3474,3474],"text":" /* empty */ "},"desc":"Add comment inside empty constructor."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3625,3628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3625,3628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ResizeObserver on an `any` value.","line":138,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":36},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":139,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":139,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"name":"constructor"},"fix":{"range":[3687,3687],"text":" /* empty */ "},"desc":"Add comment inside empty constructor."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'addListener'.","line":158,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":158,"endColumn":26,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'addListener'"},"fix":{"range":[3995,3995],"text":" /* empty */ "},"desc":"Add comment inside empty method 'addListener'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'removeListener'.","line":159,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":159,"endColumn":29,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'removeListener'"},"fix":{"range":[4025,4025],"text":" /* empty */ "},"desc":"Add comment inside empty method 'removeListener'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'addEventListener'.","line":160,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":160,"endColumn":31,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'addEventListener'"},"fix":{"range":[4057,4057],"text":" /* empty */ "},"desc":"Add comment inside empty method 'addEventListener'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'removeEventListener'.","line":161,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":161,"endColumn":34,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'removeEventListener'"},"fix":{"range":[4092,4092],"text":" /* empty */ "},"desc":"Add comment inside empty method 'removeEventListener'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'dispatchEvent'.","line":162,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":162,"endColumn":28,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'dispatchEvent'"},"fix":{"range":[4121,4121],"text":" /* empty */ "},"desc":"Add comment inside empty method 'dispatchEvent'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'value'.","line":169,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":169,"endColumn":18,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'value'"},"fix":{"range":[4229,4229],"text":" /* empty */ "},"desc":"Add comment inside empty method 'value'."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":180,"column":2,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":180,"endColumn":133},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4499,4502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4499,4502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fetch on an `any` value.","line":180,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4528,4531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4528,4531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fetch on an `any` value.","line":180,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":180,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":180,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4539,4541],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4752,4755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4752,4755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":193,"column":33,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":193,"endColumn":40}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom'\nimport { expect, afterEach, beforeAll, afterAll } from 'vitest'\nimport { cleanup } from '@testing-library/react'\nimport * as matchers from '@testing-library/jest-dom/matchers'\n\nimport { handlers } from './mocks/handlers'\n\n// Extend Vitest's expect with jest-dom matchers\nexpect.extend(matchers)\n\ntype SetupServer = Awaited<ReturnType<typeof import('msw/node')['setupServer']>>\n\ninterface Lifecycle {\n  setup: () => Promise<void> | void\n  reset: () => void | Promise<void>\n  teardown: () => Promise<void> | void\n}\n\nlet serverInstance: SetupServer | undefined\n\ndeclare global {\n   \n  var __MSW_SERVER__: SetupServer | undefined\n}\n\n// More reliable runtime detection\nconst isNodeRuntime = typeof process !== 'undefined' &&\n                     !!process.versions?.node &&\n                     typeof window === 'undefined'\n\n// Comprehensive browser test detection\nconst isBrowserTest = typeof process !== 'undefined' && (\n  process.env?.VITEST_BROWSER === 'true' ||\n  process.env?.VITEST_BROWSER === '1' ||\n  typeof window !== 'undefined'\n)\n\n// Use sync initialization to avoid top-level await\nconst createLifecycle = (): Lifecycle => {\n  // Skip MSW setup in browser environments or when explicitly testing in browser mode\n  if (!isNodeRuntime || isBrowserTest) {\n    return {\n      setup: () => undefined,\n      reset: () => undefined,\n      teardown: () => undefined,\n    }\n  }\n\n  let setupPromise: Promise<void> | null = null\n\n  return {\n    setup: async () => {\n      if (!setupPromise) {\n        setupPromise = (async () => {\n          try {\n            // Double-check runtime environment before importing MSW\n            if (typeof window !== 'undefined' || process.env?.VITEST_BROWSER) {\n              if (process.env.NODE_ENV === 'test') {\n                console.warn('Skipping MSW setup in browser environment')\n              }\n              return\n            }\n\n            // Use direct dynamic import inside async function instead of wrapped in Function\n            const mswModule = await import('msw/node')\n            serverInstance = globalThis.__MSW_SERVER__ ?? mswModule.setupServer(...handlers)\n            globalThis.__MSW_SERVER__ = serverInstance\n            serverInstance.listen({ onUnhandledRequest: 'error' })\n          } catch (error) {\n            if (process.env.NODE_ENV === 'test') {\n              console.warn('MSW server unavailable in this environment. Falling back to no-op handlers.', error)\n            }\n          }\n        })()\n      }\n      await setupPromise\n    },\n    reset: () => {\n      if (serverInstance) {\n        serverInstance.resetHandlers()\n      }\n    },\n    teardown: () => {\n      if (serverInstance) {\n        serverInstance.close()\n      }\n    },\n  }\n}\n\nconst lifecycle = createLifecycle()\n\nconst fallbackServer = (() => {\n  const warn = () => {\n    if (process.env.NODE_ENV === 'test') {\n      console.warn('Attempted to use MSW server in an environment where it is not initialized.')\n    }\n  }\n\n  return {\n    listen: warn,\n    resetHandlers: warn,\n    close: warn,\n    use: warn,\n  } as unknown as SetupServer\n})()\n\nexport const server = globalThis.__MSW_SERVER__ ?? fallbackServer\n\nbeforeAll(async () => {\n  await lifecycle.setup()\n})\n\nafterEach(async () => {\n  await lifecycle.reset()\n  cleanup()\n})\n\nafterAll(async () => {\n  await lifecycle.teardown()\n})\n\n// Mock IntersectionObserver\n;(globalThis as any).IntersectionObserver = class IntersectionObserver {\n  constructor() {}\n  observe() {\n    return null\n  }\n  disconnect() {\n    return null\n  }\n  unobserve() {\n    return null\n  }\n}\n\n// Mock ResizeObserver\n;(globalThis as any).ResizeObserver = class ResizeObserver {\n  constructor() {}\n  observe() {\n    return null\n  }\n  disconnect() {\n    return null\n  }\n  unobserve() {\n    return null\n  }\n}\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: (query: string) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: () => {},\n    removeListener: () => {},\n    addEventListener: () => {},\n    removeEventListener: () => {},\n    dispatchEvent: () => {},\n  }),\n})\n\n// Mock scrollTo\nObject.defineProperty(window, 'scrollTo', {\n  writable: true,\n  value: () => {},\n})\n\n// Mock crypto.randomUUID\nObject.defineProperty(globalThis, 'crypto', {\n  value: {\n    randomUUID: () => Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n  }\n})\n\n// Mock fetch for tests that don't use MSW\n;((globalThis as any).fetch) = (globalThis as any).fetch || (() => Promise.resolve({ json: () => Promise.resolve({}) } as Response))\n\n// Console error suppression for known testing issues\nconst originalError = console.error\nbeforeAll(() => {\n  console.error = (...args: any[]) => {\n    if (\n      typeof args[0] === 'string' &&\n      (args[0].includes('Warning: ReactDOM.render is deprecated') ||\n       args[0].includes('Warning: validateDOMNesting'))\n    ) {\n      return\n    }\n    originalError.call(console, ...args)\n  }\n})\n\nafterAll(() => {\n  console.error = originalError\n})\n\n// Set test environment variables\nif (typeof process !== 'undefined' && process.env) {\n  process.env.NODE_ENV = 'test'\n  process.env.VITE_API_BASE_URL = 'http://localhost:3000/api'\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/utils/mockStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/test/utils/test-utils.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[835,838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[835,838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducer on an `error` typed value.","line":31,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":32,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducer on an `error` typed value.","line":32,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":34,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [api.reducerPath] on an `any` value.","line":34,"column":13,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":34,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [api.reducerPath] resolves to an `any` value.","line":34,"column":13,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":34,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducerPath on an `any` value.","line":34,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducer on an `any` value.","line":34,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":35,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":35,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducerPath on an `any` value.","line":45,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducerPath on an `any` value.","line":46,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducerPath on an `any` value.","line":47,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":51,"column":17,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":51,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":51,"column":36,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":51,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .middleware on an `any` value.","line":51,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":201,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":201,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":201,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":201,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .not on an `error` typed value.","line":201,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":209,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":209,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":209,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":209,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":213,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":213,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":213,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":213,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":213,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5162,5165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5162,5165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":221,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":221,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'status' is assigned a value but never used.","line":225,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":55},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'checkA11y' has no 'await' expression.","line":266,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":266,"endColumn":18,"suggestions":[{"messageId":"removeAsync","fix":{"range":[6727,6733],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":270,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":270,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":270,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":270,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveAttribute on an `error` typed value.","line":270,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":270,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":276,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":276,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":276,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":276,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toHaveAccessibleName on an `error` typed value.","line":276,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":285,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":285,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":285,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":285,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toBeInTheDocument on an `error` typed value.","line":285,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":46},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":306,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":306,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8026,8028],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":306,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":306,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8033,8035],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":316,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":316,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8311,8434],"text":"(element.querySelector('[data-testid=\"loading\"]') ??\n                               element.querySelector('[role=\"status\"]'))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":317,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":317,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8435,8437],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactElement } from 'react'\nimport { render, RenderOptions, screen, waitFor } from '@testing-library/react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { configureStore } from '@reduxjs/toolkit'\nimport userEvent from '@testing-library/user-event'\nimport { vi } from 'vitest'\n\nimport type { RootState } from '@/store'\nimport { authSlice } from '@/store/slices/authSlice'\nimport { uiSlice } from '@/store/slices/uiSlice'\nimport { authApi } from '@/store/api/authApi'\nimport { paymentApi } from '@/store/api/paymentApi'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary'\n\n/**\n * Comprehensive testing utilities for React components with Redux and routing\n */\n\n// Mock store configuration\ninterface MockStoreOptions {\n  preloadedState?: Partial<RootState>\n  apis?: any[]\n}\n\nexport function createMockStore(options: MockStoreOptions = {}) {\n  const { preloadedState = {}, apis = [authApi, paymentApi] } = options\n\n  return configureStore({\n    reducer: {\n      auth: authSlice.reducer,\n      ui: uiSlice.reducer,\n      ...apis.reduce((acc, api) => {\n        acc[api.reducerPath] = api.reducer\n        return acc\n      }, {}),\n    },\n    preloadedState,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({\n        serializableCheck: {\n          ignoredActions: [\n            // Ignore RTK Query actions\n            ...apis.flatMap(api => [\n              `${api.reducerPath}/executeQuery/pending`,\n              `${api.reducerPath}/executeQuery/fulfilled`,\n              `${api.reducerPath}/executeQuery/rejected`,\n            ]),\n          ],\n        },\n      }).concat(...apis.map(api => api.middleware)),\n  })\n}\n\n// Default mock state\nexport const defaultMockState: Partial<RootState> = {\n  auth: {\n    user: {\n      id: 'user-123',\n      email: 'test@example.com',\n      firstName: 'Test',\n      lastName: 'User',\n      role: 'USER',\n      emailVerified: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    },\n    token: 'mock-token-123',\n    isAuthenticated: true,\n    isLoading: false,\n    error: null,\n  },\n  ui: {\n    theme: 'light',\n    sidebar: {\n      isOpen: false,\n      isCollapsed: false,\n    },\n    modals: {},\n    notifications: [],\n  },\n}\n\n// Authenticated state\nexport const authenticatedState: Partial<RootState> = {\n  ...defaultMockState,\n  auth: {\n    ...defaultMockState.auth!,\n    isAuthenticated: true,\n  },\n}\n\n// Unauthenticated state\nexport const unauthenticatedState: Partial<RootState> = {\n  ...defaultMockState,\n  auth: {\n    user: null,\n    token: null,\n    isAuthenticated: false,\n    isLoading: false,\n    error: null,\n  },\n}\n\n// Admin user state\nexport const adminUserState: Partial<RootState> = {\n  ...defaultMockState,\n  auth: {\n    ...defaultMockState.auth!,\n    user: {\n      ...defaultMockState.auth!.user!,\n      role: 'ADMIN',\n    },\n  },\n}\n\n// Loading state\nexport const loadingState: Partial<RootState> = {\n  ...defaultMockState,\n  auth: {\n    ...defaultMockState.auth!,\n    isLoading: true,\n  },\n}\n\n// Error state\nexport const errorState: Partial<RootState> = {\n  ...defaultMockState,\n  auth: {\n    ...defaultMockState.auth!,\n    isAuthenticated: false,\n    error: 'Authentication failed',\n  },\n}\n\n// Custom render function with providers\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  preloadedState?: Partial<RootState>\n  store?: ReturnType<typeof createMockStore>\n  withRouter?: boolean\n  withErrorBoundary?: boolean\n  route?: string\n}\n\nexport function customRender(\n  ui: ReactElement,\n  options: CustomRenderOptions = {}\n) {\n  const {\n    preloadedState = defaultMockState,\n    store = createMockStore({ preloadedState }),\n    withRouter = true,\n    withErrorBoundary = false,\n    route = '/',\n    ...renderOptions\n  } = options\n\n  // Set initial route\n  if (withRouter && route !== '/') {\n    window.history.pushState({}, 'Test page', route)\n  }\n\n  const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    let content = (\n      <Provider store={store}>\n        {children}\n      </Provider>\n    )\n\n    if (withRouter) {\n      content = (\n        <BrowserRouter>\n          {content}\n        </BrowserRouter>\n      )\n    }\n\n    if (withErrorBoundary) {\n      content = (\n        <ErrorBoundary>\n          {content}\n        </ErrorBoundary>\n      )\n    }\n\n    return content\n  }\n\n  return {\n    user: userEvent.setup(),\n    store,\n    ...render(ui, { wrapper: Wrapper, ...renderOptions }),\n  }\n}\n\n// Helper functions for common testing patterns\nexport const testUtils = {\n  // Wait for loading to complete\n  async waitForLoadingToComplete() {\n    await waitFor(() => {\n      expect(screen.queryByText(/loading/i)).not.toBeInTheDocument()\n    })\n  },\n\n  // Wait for error to appear\n  async waitForError(errorText?: string) {\n    if (errorText) {\n      await waitFor(() => {\n        expect(screen.getByText(new RegExp(errorText, 'i'))).toBeInTheDocument()\n      })\n    } else {\n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toBeInTheDocument()\n      })\n    }\n  },\n\n  // Mock API responses\n  mockApiSuccess: (data: any) => ({\n    success: true,\n    data,\n    timestamp: new Date().toISOString(),\n  }),\n\n  mockApiError: (code: string, message: string, status = 400) => ({\n    success: false,\n    error: { code, message },\n    timestamp: new Date().toISOString(),\n  }),\n\n  // Generate test IDs\n  generateTestId: (prefix: string) => `test-${prefix}-${Math.random().toString(36).substring(7)}`,\n\n  // Form helpers\n  async fillForm(user: ReturnType<typeof userEvent.setup>, formData: Record<string, string>) {\n    for (const [field, value] of Object.entries(formData)) {\n      const input = screen.getByLabelText(new RegExp(field, 'i'))\n      await user.clear(input)\n      await user.type(input, value)\n    }\n  },\n\n  async submitForm(user: ReturnType<typeof userEvent.setup>, buttonText = 'submit') {\n    const submitButton = screen.getByRole('button', { name: new RegExp(buttonText, 'i') })\n    await user.click(submitButton)\n  },\n\n  // Navigation helpers\n  async navigateTo(user: ReturnType<typeof userEvent.setup>, linkText: string) {\n    const link = screen.getByRole('link', { name: new RegExp(linkText, 'i') })\n    await user.click(link)\n  },\n\n  // Modal helpers\n  async openModal(user: ReturnType<typeof userEvent.setup>, triggerText: string) {\n    const trigger = screen.getByRole('button', { name: new RegExp(triggerText, 'i') })\n    await user.click(trigger)\n  },\n\n  async closeModal(user: ReturnType<typeof userEvent.setup>) {\n    const closeButton = screen.getByRole('button', { name: /close|cancel/i })\n    await user.click(closeButton)\n  },\n\n  // Accessibility helpers\n  async checkA11y() {\n    // Check for required ARIA attributes\n    const buttons = screen.getAllByRole('button')\n    buttons.forEach(button => {\n      expect(button).toHaveAttribute('type')\n    })\n\n    // Check for form labels\n    const inputs = screen.getAllByRole('textbox')\n    inputs.forEach(input => {\n      expect(input).toHaveAccessibleName()\n    })\n  },\n\n  // Performance helpers\n  measureRenderTime: async (renderFn: () => void) => {\n    const start = performance.now()\n    renderFn()\n    await waitFor(() => {\n      expect(document.body).toBeInTheDocument()\n    })\n    const end = performance.now()\n    return end - start\n  },\n}\n\n// Custom matchers for common assertions\nexport const customMatchers = {\n  toBeVisible: (element: HTMLElement) => {\n    return {\n      pass: element.style.display !== 'none' && element.style.visibility !== 'hidden',\n      message: () => `Expected element to be visible`,\n    }\n  },\n\n  toHaveValidationError: (form: HTMLElement, fieldName: string, errorMessage?: string) => {\n    const field = form.querySelector(`[name=\"${fieldName}\"]`)\n    const errorElement = form.querySelector(`[data-testid=\"${fieldName}-error\"]`)\n\n    const hasError = field?.getAttribute('aria-invalid') === 'true' ||\n                    errorElement?.textContent?.includes(errorMessage || '') ||\n                    false\n\n    return {\n      pass: hasError,\n      message: () => `Expected field ${fieldName} to have validation error${errorMessage ? `: ${errorMessage}` : ''}`,\n    }\n  },\n\n  toHaveLoadingState: (element: HTMLElement) => {\n    const hasLoadingIndicator = element.querySelector('[data-testid=\"loading\"]') ||\n                               element.querySelector('[role=\"status\"]') ||\n                               element.textContent?.includes('Loading')\n\n    return {\n      pass: !!hasLoadingIndicator,\n      message: () => 'Expected element to have loading state',\n    }\n  },\n}\n\n// Test data factories\nexport const createMockUser = (overrides = {}) => ({\n  id: 'user-' + Math.random().toString(36).substring(7),\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  role: 'USER' as const,\n  emailVerified: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  ...overrides,\n})\n\nexport const createMockPayment = (overrides = {}) => ({\n  id: 'payment-' + Math.random().toString(36).substring(7),\n  amount: 1999,\n  currency: 'USD',\n  status: 'COMPLETED' as const,\n  paymentMethodId: 'pm-123',\n  customerId: 'cus-123',\n  organizationId: 'org-123',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  paidAt: new Date().toISOString(),\n  ...overrides,\n})\n\nexport const createMockOrganization = (overrides = {}) => ({\n  id: 'org-' + Math.random().toString(36).substring(7),\n  name: 'Test Organization',\n  plan: 'PRO' as const,\n  status: 'ACTIVE' as const,\n  maxUsers: 10,\n  currentUsers: 3,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  ...overrides,\n})\n\n// Mock hooks for testing\nexport const mockHooks = {\n  useNavigate: vi.fn(),\n  useLocation: vi.fn(() => ({ pathname: '/', search: '', hash: '', state: null })),\n  useParams: vi.fn(() => ({})),\n  useSearchParams: vi.fn(() => [new URLSearchParams(), vi.fn()]),\n}\n\n// Cleanup function for tests\nexport function cleanupTests() {\n  vi.clearAllMocks()\n  localStorage.clear()\n  sessionStorage.clear()\n}\n\n// Re-export everything from testing library\nexport * from '@testing-library/react'\nexport { userEvent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/types/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/types/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/types/mfa.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[596,599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[596,599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2998,3001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2998,3001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3249,3252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3249,3252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3503,3506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3503,3506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3763,3766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3763,3766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4697,4700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4697,4700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5508,5511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5508,5511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Multi-Factor Authentication (MFA) Types\n *\n * Comprehensive type definitions for MFA system including:\n * - TOTP (Time-based One-Time Password)\n * - SMS verification\n * - Email verification\n * - Backup codes\n * - Biometric authentication\n * - Hardware security keys (WebAuthn)\n */\n\n// MFA Method Types\nexport type MFAMethodType = 'totp' | 'sms' | 'email' | 'backup_codes' | 'webauthn' | 'biometric'\n\nexport interface MFAMethod {\n  id: string\n  type: MFAMethodType\n  name: string\n  isEnabled: boolean\n  isPrimary: boolean\n  createdAt: string\n  lastUsed?: string\n  metadata?: Record<string, any>\n}\n\n// TOTP-specific interfaces\nexport interface TOTPMethod extends MFAMethod {\n  type: 'totp'\n  metadata: {\n    issuer: string\n    accountName: string\n    algorithm: 'SHA1' | 'SHA256' | 'SHA512'\n    digits: 6 | 8\n    period: number\n    secretKey?: string // Only present during setup\n    qrCodeUrl?: string // Only present during setup\n    backupCodes?: string[] // Generated with TOTP setup\n  }\n}\n\n// SMS-specific interfaces\nexport interface SMSMethod extends MFAMethod {\n  type: 'sms'\n  metadata: {\n    phoneNumber: string\n    countryCode: string\n    isVerified: boolean\n    lastVerificationAttempt?: string\n  }\n}\n\n// Email-specific interfaces\nexport interface EmailMethod extends MFAMethod {\n  type: 'email'\n  metadata: {\n    emailAddress: string\n    isVerified: boolean\n    lastVerificationAttempt?: string\n  }\n}\n\n// Backup codes interfaces\nexport interface BackupCodesMethod extends MFAMethod {\n  type: 'backup_codes'\n  metadata: {\n    totalCodes: number\n    usedCodes: number\n    remainingCodes: number\n    lastUsed?: string\n  }\n}\n\n// WebAuthn/FIDO2 interfaces\nexport interface WebAuthnMethod extends MFAMethod {\n  type: 'webauthn'\n  metadata: {\n    credentialId: string\n    deviceName: string\n    deviceType: 'security_key' | 'platform' | 'cross_platform'\n    attestationType: string\n    counter: number\n    userAgent: string\n  }\n}\n\n// Biometric interfaces\nexport interface BiometricMethod extends MFAMethod {\n  type: 'biometric'\n  metadata: {\n    biometricType: 'fingerprint' | 'face' | 'voice' | 'iris'\n    deviceId: string\n    platformAuthenticator: boolean\n  }\n}\n\n// Union type for all MFA methods\nexport type AnyMFAMethod = TOTPMethod | SMSMethod | EmailMethod | BackupCodesMethod | WebAuthnMethod | BiometricMethod\n\n// MFA Setup interfaces\nexport interface MFASetupRequest {\n  type: MFAMethodType\n  name: string\n  phoneNumber?: string\n  emailAddress?: string\n  deviceName?: string\n}\n\nexport interface MFASetupResponse {\n  method: AnyMFAMethod\n  setupData?: {\n    qrCode?: string\n    secretKey?: string\n    backupCodes?: string[]\n    verificationCode?: string\n    challengeOptions?: PublicKeyCredentialCreationOptions // For WebAuthn\n  }\n  nextStep: 'verify' | 'complete' | 'backup_codes'\n}\n\n// MFA Verification interfaces\nexport interface MFAVerificationRequest {\n  methodId: string\n  code?: string\n  backupCode?: string\n  webauthnResponse?: PublicKeyCredential\n  biometricResponse?: any\n}\n\nexport interface MFAVerificationResponse {\n  success: boolean\n  methodId: string\n  remainingAttempts?: number\n  lockoutUntil?: string\n  backupCodesRemaining?: number\n  error?: {\n    code: string\n    message: string\n    details?: Record<string, any>\n  }\n}\n\n// MFA Challenge interfaces (for login)\nexport interface MFAChallenge {\n  challengeId: string\n  requiredMethods: MFAMethodType[]\n  availableMethods: Array<{\n    id: string\n    type: MFAMethodType\n    name: string\n    metadata: Record<string, any>\n  }>\n  expiresAt: string\n  attemptCount: number\n  maxAttempts: number\n}\n\nexport interface MFAChallengeResponse {\n  challengeId: string\n  methodId: string\n  code?: string\n  backupCode?: string\n  webauthnResponse?: PublicKeyCredential\n  biometricResponse?: any\n}\n\n// MFA Settings and Preferences\nexport interface MFASettings {\n  isEnabled: boolean\n  requiredForLogin: boolean\n  requiredForSensitiveActions: boolean\n  backupCodesEnabled: boolean\n  trustedDevices: TrustedDevice[]\n  securityNotifications: {\n    emailOnMethodChange: boolean\n    emailOnSuccessfulAuth: boolean\n    emailOnFailedAttempts: boolean\n  }\n  lockoutPolicy: {\n    maxAttempts: number\n    lockoutDurationMinutes: number\n    progressiveLockout: boolean\n  }\n}\n\nexport interface TrustedDevice {\n  id: string\n  name: string\n  deviceFingerprint: string\n  userAgent: string\n  ipAddress: string\n  location?: string\n  createdAt: string\n  lastUsed: string\n  expiresAt: string\n}\n\n// MFA Recovery interfaces\nexport interface MFARecoveryRequest {\n  email: string\n  recoveryMethod: 'email' | 'admin' | 'identity_verification'\n  identityProof?: {\n    documentType: string\n    documentNumber: string\n    additionalInfo: Record<string, any>\n  }\n}\n\nexport interface MFARecoveryResponse {\n  recoveryId: string\n  method: string\n  nextStep: 'verify_identity' | 'wait_approval' | 'reset_available'\n  estimatedTime?: string\n}\n\n// Analytics and Audit interfaces\nexport interface MFAAnalytics {\n  userId: string\n  totalMethods: number\n  methodBreakdown: Record<MFAMethodType, number>\n  loginAttempts: {\n    successful: number\n    failed: number\n    locked: number\n  }\n  securityScore: number\n  recommendations: string[]\n  lastActivity: string\n}\n\nexport interface MFAAuditEvent {\n  id: string\n  userId: string\n  action: 'setup' | 'verify' | 'disable' | 'recover' | 'login_attempt'\n  methodType?: MFAMethodType\n  methodId?: string\n  success: boolean\n  ipAddress: string\n  userAgent: string\n  location?: string\n  timestamp: string\n  details?: Record<string, any>\n}\n\n// Error types\nexport interface MFAError {\n  code: string\n  message: string\n  field?: string\n  retryAfter?: number\n  supportContact?: string\n}\n\n// Status enums\nexport enum MFAStatus {\n  NOT_SETUP = 'not_setup',\n  PARTIALLY_SETUP = 'partially_setup',\n  FULLY_SETUP = 'fully_setup',\n  DISABLED = 'disabled',\n  LOCKED = 'locked',\n  RECOVERY_MODE = 'recovery_mode'\n}\n\nexport enum MFASecurityLevel {\n  BASIC = 'basic',       // Single factor (password only)\n  STANDARD = 'standard', // Two factors (password + one MFA)\n  ENHANCED = 'enhanced', // Multiple MFA methods available\n  MAXIMUM = 'maximum'    // Hardware security key + biometrics\n}\n\n// Utility types\nexport type MFAMethodMap = {\n  [K in MFAMethodType]: Extract<AnyMFAMethod, { type: K }>\n}\n\nexport interface MFACapabilities {\n  supportedMethods: MFAMethodType[]\n  webauthnSupported: boolean\n  biometricSupported: boolean\n  platformAuthenticatorAvailable: boolean\n  securityKeySupported: boolean\n}\n\n// React component props types\nexport interface MFASetupProps {\n  onComplete: (method: AnyMFAMethod) => void\n  onCancel: () => void\n  allowedMethods?: MFAMethodType[]\n}\n\nexport interface MFAVerificationProps {\n  challenge: MFAChallenge\n  onVerify: (response: MFAChallengeResponse) => void\n  onCancel?: () => void\n  showBackupOptions?: boolean\n}\n\nexport interface MFAManagementProps {\n  methods: AnyMFAMethod[]\n  settings: MFASettings\n  onMethodUpdate: (method: AnyMFAMethod) => void\n  onSettingsUpdate: (settings: Partial<MFASettings>) => void\n}\n\n// Form validation schemas (to be used with Zod)\nexport interface TOTPSetupForm {\n  name: string\n  verificationCode: string\n}\n\nexport interface SMSSetupForm {\n  name: string\n  phoneNumber: string\n  countryCode: string\n  verificationCode: string\n}\n\nexport interface EmailSetupForm {\n  name: string\n  emailAddress: string\n  verificationCode: string\n}\n\nexport interface WebAuthnSetupForm {\n  name: string\n  deviceName: string\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/types/multitenancy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/types/rbac.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2037,2040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2037,2040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2253,2256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2253,2256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2783,2786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2783,2786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5318,5321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5318,5321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5327,5330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5327,5330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5440,5443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5440,5443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6962,6965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6962,6965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":433,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":433,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10426,10429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10426,10429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Role-Based Access Control (RBAC) Types\n *\n * Comprehensive RBAC system for enterprise-grade authorization:\n * - Hierarchical roles and permissions\n * - Resource-based access control\n * - Dynamic permission evaluation\n * - Audit trails and compliance\n * - Organization-level and system-level permissions\n */\n\n// Base permission and resource types\nexport type ResourceType =\n  | 'organization'\n  | 'user'\n  | 'payment'\n  | 'subscription'\n  | 'billing'\n  | 'analytics'\n  | 'audit'\n  | 'settings'\n  | 'mfa'\n  | 'api_keys'\n  | 'webhooks'\n  | 'integrations'\n\nexport type ActionType =\n  | 'create'\n  | 'read'\n  | 'update'\n  | 'delete'\n  | 'manage'\n  | 'approve'\n  | 'export'\n  | 'invite'\n  | 'revoke'\n\n// Permission structure\nexport interface Permission {\n  id: string\n  name: string\n  description: string\n  resource: ResourceType\n  action: ActionType\n  conditions?: PermissionCondition[]\n  scope: 'organization' | 'system' | 'personal'\n  category: string\n  isSystemPermission: boolean\n  createdAt: string\n  updatedAt: string\n}\n\n// Dynamic permission conditions\nexport interface PermissionCondition {\n  field: string\n  operator: 'equals' | 'not_equals' | 'in' | 'not_in' | 'greater_than' | 'less_than' | 'contains'\n  value: string | string[] | number | boolean\n  description?: string\n}\n\n// Role structure\nexport interface Role {\n  id: string\n  name: string\n  description: string\n  slug: string\n  permissions: Permission[]\n  isSystemRole: boolean\n  isCustomRole: boolean\n  organizationId?: string\n  hierarchy: number // Higher number = more privileged\n  inheritsFrom?: string[] // Role inheritance\n  color: string\n  icon?: string\n  createdAt: string\n  updatedAt: string\n  createdBy: string\n  statistics: {\n    userCount: number\n    lastAssigned?: string\n  }\n}\n\n// User role assignment\nexport interface UserRoleAssignment {\n  id: string\n  userId: string\n  roleId: string\n  organizationId?: string\n  assignedBy: string\n  assignedAt: string\n  expiresAt?: string\n  conditions?: RoleCondition[]\n  isActive: boolean\n  metadata?: Record<string, any>\n}\n\n// Role conditions (temporary assignments, time-based, etc.)\nexport interface RoleCondition {\n  type: 'time_based' | 'ip_restricted' | 'device_restricted' | 'location_restricted'\n  parameters: Record<string, any>\n  description: string\n}\n\n// System-defined roles (cannot be modified)\nexport interface SystemRole extends Omit<Role, 'isSystemRole' | 'isCustomRole'> {\n  isSystemRole: true\n  isCustomRole: false\n  systemRoleType: 'super_admin' | 'org_owner' | 'org_admin' | 'org_member' | 'billing_manager' | 'read_only'\n}\n\n// Permission evaluation context\nexport interface PermissionContext {\n  userId: string\n  organizationId?: string\n  resource: ResourceType\n  action: ActionType\n  resourceId?: string\n  additionalContext?: Record<string, any>\n}\n\n// Permission evaluation result\nexport interface PermissionEvaluationResult {\n  allowed: boolean\n  reason: string\n  matchedPermissions: Permission[]\n  deniedBy?: Permission[]\n  conditions?: PermissionCondition[]\n  requiresApproval?: boolean\n  approvalWorkflow?: ApprovalWorkflow\n}\n\n// Approval workflow for sensitive actions\nexport interface ApprovalWorkflow {\n  id: string\n  name: string\n  description: string\n  requiredApprovals: number\n  approvers: UserReference[]\n  timeoutHours: number\n  escalationRules: EscalationRule[]\n  isActive: boolean\n}\n\nexport interface EscalationRule {\n  afterHours: number\n  escalateTo: UserReference[]\n  action: 'notify' | 'auto_approve' | 'auto_deny'\n}\n\nexport interface UserReference {\n  id: string\n  name: string\n  email: string\n  role?: string\n}\n\n// Role templates for common use cases\nexport interface RoleTemplate {\n  id: string\n  name: string\n  description: string\n  category: 'management' | 'financial' | 'technical' | 'support' | 'custom'\n  permissions: string[] // Permission IDs\n  recommendedFor: string[]\n  tags: string[]\n  isPopular: boolean\n}\n\n// Permission groups for better organization\nexport interface PermissionGroup {\n  id: string\n  name: string\n  description: string\n  category: string\n  permissions: Permission[]\n  icon?: string\n  order: number\n}\n\n// RBAC analytics and reporting\nexport interface RBACAnalytics {\n  totalRoles: number\n  totalPermissions: number\n  totalAssignments: number\n  roleDistribution: Record<string, number>\n  permissionUsage: Record<string, number>\n  riskScore: number\n  recommendations: RBACRecommendation[]\n  complianceStatus: ComplianceStatus\n}\n\nexport interface RBACRecommendation {\n  type: 'security' | 'efficiency' | 'compliance'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  title: string\n  description: string\n  action: string\n  impact: string\n}\n\nexport interface ComplianceStatus {\n  soxCompliant: boolean\n  gdprCompliant: boolean\n  iso27001Compliant: boolean\n  pciCompliant: boolean\n  customCompliance: Record<string, boolean>\n  lastAuditDate?: string\n  nextAuditDate?: string\n}\n\n// Audit trail for RBAC changes\nexport interface RBACauditEvent {\n  id: string\n  eventType: 'role_created' | 'role_updated' | 'role_deleted' | 'permission_granted' | 'permission_revoked' | 'assignment_created' | 'assignment_expired'\n  entityType: 'role' | 'permission' | 'assignment'\n  entityId: string\n  actorId: string\n  actorName: string\n  targetUserId?: string\n  targetUserName?: string\n  organizationId?: string\n  changes: Record<string, { from: any; to: any }>\n  reason?: string\n  ipAddress: string\n  userAgent: string\n  timestamp: string\n  metadata?: Record<string, any>\n}\n\n// Role hierarchy and inheritance\nexport interface RoleHierarchy {\n  parentRoleId: string\n  childRoleId: string\n  inheritanceType: 'full' | 'partial'\n  excludedPermissions?: string[]\n  addedPermissions?: string[]\n  conditions?: RoleCondition[]\n}\n\n// Resource ownership and delegation\nexport interface ResourceOwnership {\n  resourceType: ResourceType\n  resourceId: string\n  ownerId: string\n  ownerType: 'user' | 'role'\n  delegatedUsers: UserReference[]\n  permissions: Permission[]\n  createdAt: string\n  expiresAt?: string\n}\n\n// Dynamic role evaluation\nexport interface DynamicRoleRule {\n  id: string\n  name: string\n  description: string\n  conditions: RoleCondition[]\n  assignedRoles: string[]\n  isActive: boolean\n  priority: number\n  evaluationFrequency: 'realtime' | 'hourly' | 'daily'\n  lastEvaluated?: string\n}\n\n// Permission request and approval system\nexport interface PermissionRequest {\n  id: string\n  requesterId: string\n  requesterName: string\n  targetUserId?: string\n  targetUserName?: string\n  organizationId: string\n  requestType: 'role_assignment' | 'permission_grant' | 'resource_access'\n  requestedRoles?: string[]\n  requestedPermissions?: string[]\n  resourceDetails?: {\n    type: ResourceType\n    id: string\n    actions: ActionType[]\n  }\n  justification: string\n  urgency: 'low' | 'medium' | 'high'\n  status: 'pending' | 'approved' | 'denied' | 'expired'\n  reviewers: PermissionReviewer[]\n  createdAt: string\n  expiresAt: string\n  approvedAt?: string\n  deniedAt?: string\n  metadata?: Record<string, any>\n}\n\nexport interface PermissionReviewer {\n  userId: string\n  userName: string\n  status: 'pending' | 'approved' | 'denied'\n  comment?: string\n  reviewedAt?: string\n}\n\n// RBAC configuration and settings\nexport interface RBACConfiguration {\n  organizationId: string\n  settings: {\n    enableRoleInheritance: boolean\n    enableDynamicRoles: boolean\n    enableApprovalWorkflows: boolean\n    defaultRoleForNewUsers?: string\n    maxRolesPerUser: number\n    roleAssignmentRequiresApproval: boolean\n    sensitivePermissionsRequireApproval: boolean[]\n    auditRetentionDays: number\n    enableResourceOwnership: boolean\n  }\n  complianceSettings: {\n    enableSoxCompliance: boolean\n    enableGdprCompliance: boolean\n    enableAuditLogging: boolean\n    requireJustificationForRoleChanges: boolean\n    enablePeriodicAccessReview: boolean\n    accessReviewFrequencyDays: number\n  }\n  notifications: {\n    notifyOnRoleChanges: boolean\n    notifyOnPermissionChanges: boolean\n    notifyOnAccessRequests: boolean\n    notifyOnComplianceViolations: boolean\n  }\n}\n\n// Access review and certification\nexport interface AccessReviewCampaign {\n  id: string\n  name: string\n  description: string\n  organizationId: string\n  reviewType: 'periodic' | 'targeted' | 'compliance'\n  status: 'draft' | 'active' | 'completed' | 'cancelled'\n  scope: {\n    userIds?: string[]\n    roleIds?: string[]\n    departmentIds?: string[]\n    includeSystemRoles: boolean\n  }\n  reviewers: UserReference[]\n  startDate: string\n  endDate: string\n  completionPercentage: number\n  findings: AccessReviewFinding[]\n  createdBy: string\n  createdAt: string\n}\n\nexport interface AccessReviewFinding {\n  id: string\n  userId: string\n  userName: string\n  finding: 'appropriate' | 'excessive' | 'insufficient' | 'violated_policy'\n  recommendedAction: 'keep' | 'modify' | 'revoke'\n  reviewerComment?: string\n  riskLevel: 'low' | 'medium' | 'high'\n  reviewedBy: string\n  reviewedAt: string\n}\n\n// Form and UI types\nexport interface CreateRoleForm {\n  name: string\n  description: string\n  permissions: string[]\n  color: string\n  inheritsFrom?: string[]\n}\n\nexport interface AssignRoleForm {\n  userId: string\n  roleIds: string[]\n  expiresAt?: string\n  justification?: string\n}\n\nexport interface PermissionRequestForm {\n  targetUserId?: string\n  requestType: 'role_assignment' | 'permission_grant' | 'resource_access'\n  requestedRoles?: string[]\n  requestedPermissions?: string[]\n  justification: string\n  urgency: 'low' | 'medium' | 'high'\n}\n\n// React component props\nexport interface RoleManagerProps {\n  organizationId: string\n  onRoleUpdated: (role: Role) => void\n}\n\nexport interface PermissionCheckerProps {\n  resource: ResourceType\n  action: ActionType\n  children: React.ReactNode\n  fallback?: React.ReactNode\n  resourceId?: string\n}\n\nexport interface RoleAssignmentProps {\n  userId: string\n  availableRoles: Role[]\n  currentAssignments: UserRoleAssignment[]\n  onAssignmentChange: (assignments: UserRoleAssignment[]) => void\n}\n\n// Utility types\nexport type RoleWithPermissions = Role & {\n  effectivePermissions: Permission[]\n  inheritedPermissions: Permission[]\n}\n\nexport interface UserWithRoles {\n  id: string\n  name: string\n  email: string\n  assignments: UserRoleAssignment[]\n  effectiveRoles: Role[]\n  effectivePermissions: Permission[]\n}\n\nexport type PermissionMatrix = Record<ResourceType, Record<ActionType, boolean>>\n\n// Error types\nexport interface RBACError {\n  code: string\n  message: string\n  details?: Record<string, any>\n  suggestions?: string[]\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/apiError.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ParsedApiError' is defined but never used.","line":4,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest'\nimport type { FetchBaseQueryError, SerializedError } from '@reduxjs/toolkit/query'\n\nimport { parseApiError, type ParsedApiError } from './apiError'\n\ndescribe('parseApiError', () => {\n  describe('FetchBaseQueryError handling', () => {\n    it('should parse error with status and message', () => {\n      const error: FetchBaseQueryError = {\n        status: 400,\n        data: {\n          message: 'Bad request error'\n        }\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 400,\n        message: 'Bad request error'\n      })\n    })\n\n    it('should parse error with status and error field', () => {\n      const error: FetchBaseQueryError = {\n        status: 500,\n        data: {\n          error: 'Internal server error'\n        }\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 500,\n        message: 'Internal server error'\n      })\n    })\n\n    it('should parse error with status and detail field', () => {\n      const error: FetchBaseQueryError = {\n        status: 422,\n        data: {\n          detail: 'Validation failed'\n        }\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 422,\n        message: 'Validation failed'\n      })\n    })\n\n    it('should handle 401 error with default message', () => {\n      const error: FetchBaseQueryError = {\n        status: 401,\n        data: {}\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 401,\n        message: 'Unauthorized'\n      })\n    })\n\n    it('should handle 403 error with default message', () => {\n      const error: FetchBaseQueryError = {\n        status: 403,\n        data: {}\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 403,\n        message: 'Forbidden'\n      })\n    })\n\n    it('should handle non-numeric status', () => {\n      const error = {\n        status: 'FETCH_ERROR',\n        data: {\n          message: 'Network error'\n        }\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: undefined,\n        message: 'Network error'\n      })\n    })\n\n    it('should handle non-string message types', () => {\n      const error: FetchBaseQueryError = {\n        status: 400,\n        data: {\n          message: 12345\n        }\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 400,\n        message: '12345'\n      })\n    })\n\n    it('should fallback to default message when no data message', () => {\n      const error: FetchBaseQueryError = {\n        status: 500,\n        data: {}\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 500,\n        message: 'Request failed'\n      })\n    })\n\n    it('should handle null data', () => {\n      const error: FetchBaseQueryError = {\n        status: 404,\n        data: null\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        status: 404,\n        message: 'Request failed'\n      })\n    })\n  })\n\n  describe('SerializedError handling', () => {\n    it('should parse SerializedError with message', () => {\n      const error: SerializedError = {\n        name: 'TypeError',\n        message: 'Something went wrong'\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Something went wrong'\n      })\n    })\n\n    it('should handle SerializedError with only name', () => {\n      const error: SerializedError = {\n        name: 'NetworkError'\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Unexpected error'\n      })\n    })\n\n    it('should handle SerializedError with empty message', () => {\n      const error: SerializedError = {\n        name: 'Error',\n        message: ''\n      }\n\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Unexpected error'\n      })\n    })\n  })\n\n  describe('Generic error handling', () => {\n    it('should handle string error', () => {\n      const error = 'Simple string error'\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Unexpected error'\n      })\n    })\n\n    it('should handle null error', () => {\n      const error = null\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Unexpected error'\n      })\n    })\n\n    it('should handle undefined error', () => {\n      const error = undefined\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Unexpected error'\n      })\n    })\n\n    it('should handle empty object', () => {\n      const error = {}\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Unexpected error'\n      })\n    })\n\n    it('should handle non-object error', () => {\n      const error = 123\n      const result = parseApiError(error)\n      expect(result).toEqual({\n        message: 'Unexpected error'\n      })\n    })\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/apiError.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":20,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":20,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[798,800],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'rawMessage' will use Object's default stringification format ('[object Object]') when stringified.","line":26,"column":20,"nodeType":"Identifier","messageId":"baseToString","endLine":26,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":27,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":27,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[974,976],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { FetchBaseQueryError } from '@reduxjs/toolkit/query'\nimport type { SerializedError } from '@reduxjs/toolkit'\n\nexport interface ParsedApiError {\n  status?: number\n  message: string\n}\n\nexport function parseApiError(err: unknown): ParsedApiError {\n  // RTK Query errors\n  const fbq = err as FetchBaseQueryError\n  if (typeof fbq === 'object' && fbq !== null && 'status' in fbq) {\n    const status = typeof fbq.status === 'number' ? fbq.status : undefined\n    // Try to read common message shapes\n    const data = (fbq as { data?: unknown }).data\n    const rawMessage =\n      (data && typeof data === 'object' && data !== null &&\n        ((data as Record<string, unknown>).message ??\n          (data as Record<string, unknown>).error ??\n          (data as Record<string, unknown>).detail)) || undefined\n\n    const message =\n      (typeof rawMessage === 'string'\n        ? rawMessage\n        : rawMessage != null\n          ? String(rawMessage)\n          : undefined) ||\n      (status === 401\n        ? 'Unauthorized'\n        : status === 403\n          ? 'Forbidden'\n          : 'Request failed')\n    return { status, message }\n  }\n\n  // SerializedError or generic\n  const se = err as SerializedError\n  if (se && typeof se === 'object' && ('message' in se || 'name' in se)) {\n    return { message: (se.message!) || 'Unexpected error' }\n  }\n\n  return { message: 'Unexpected error' }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/apiOptimization.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[986,989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[986,989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1425,1428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1425,1428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1456,1459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1456,1459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":79,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":79,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2272,2272],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2272,2272],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3173,3176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3173,3176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":113,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":113,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":113,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":113,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3268,3270],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":113,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3725,3728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3725,3728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5081,5083],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":183,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":183,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5302,5304],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API Optimization utilities for improved performance and caching\n */\n\nimport { createSelector } from '@reduxjs/toolkit'\n\nimport type { RootState } from '../store'\n\n// Cache duration constants (in milliseconds)\nexport const CACHE_DURATIONS = {\n  SHORT: 30 * 1000, // 30 seconds - for frequently changing data\n  MEDIUM: 5 * 60 * 1000, // 5 minutes - for moderately changing data\n  LONG: 30 * 60 * 1000, // 30 minutes - for rarely changing data\n  STATIC: 24 * 60 * 60 * 1000, // 24 hours - for static data\n} as const\n\n// Cache tags for different data types\nexport const CACHE_TAGS = {\n  User: 'User',\n  Organization: 'Organization',\n  Payment: 'Payment',\n  PaymentStatistics: 'PaymentStatistics',\n  PaymentMethod: 'PaymentMethod',\n  Subscription: 'Subscription',\n  SubscriptionPlan: 'SubscriptionPlan',\n  Invoice: 'Invoice',\n  SetupIntent: 'SetupIntent',\n} as const\n\n// Intelligent cache key generation\nexport const generateCacheKey = (\n  endpoint: string,\n  params?: Record<string, any>,\n  userContext?: { userId?: string; organizationId?: string }\n): string => {\n  const baseKey = endpoint\n  const paramString = params ? JSON.stringify(params) : ''\n  const contextString = userContext\n    ? `${userContext.userId}-${userContext.organizationId}`\n    : ''\n\n  return `${baseKey}:${paramString}:${contextString}`\n}\n\n// Enhanced selectors for memoized data access\nexport const createMemoizedSelector = <T>(\n  inputSelectors: any[],\n  resultFunc: (...args: any[]) => T\n) => {\n  return createSelector(inputSelectors, resultFunc)\n}\n\n// Optimized data selectors\nexport const selectCurrentUserWithOrganizations = createSelector(\n  [(state: RootState) => state.auth.user],\n  (user) => user\n)\n\nexport const selectPrimaryOrganization = createSelector(\n  [(state: RootState) => state.auth.user],\n  (user) => user ? null : null\n)\n\n// Background data prefetching utility\nexport class DataPrefetcher {\n  private static instance: DataPrefetcher\n  private prefetchQueue = new Set<string>()\n  private isProcessing = false\n\n  static getInstance(): DataPrefetcher {\n    if (!DataPrefetcher.instance) {\n      DataPrefetcher.instance = new DataPrefetcher()\n    }\n    return DataPrefetcher.instance\n  }\n\n  addToPrefetchQueue(endpoint: string): void {\n    this.prefetchQueue.add(endpoint)\n    this.processPrefetchQueue()\n  }\n\n  private async processPrefetchQueue(): Promise<void> {\n    if (this.isProcessing || this.prefetchQueue.size === 0) {\n      return\n    }\n\n    this.isProcessing = true\n\n    // Process prefetch queue with delay to avoid overwhelming the server\n    const endpoints = Array.from(this.prefetchQueue)\n    this.prefetchQueue.clear()\n\n    for (const endpoint of endpoints) {\n      try {\n        // Add a small delay between requests\n        await new Promise(resolve => setTimeout(resolve, 100))\n        // The actual prefetching would be handled by RTK Query\n        console.debug(`Prefetching data for: ${endpoint}`)\n      } catch (error) {\n        console.warn(`Prefetch failed for ${endpoint}:`, error)\n      }\n    }\n\n    this.isProcessing = false\n  }\n}\n\n// Smart retry logic\nexport const createRetryConfig = (maxRetries = 3) => ({\n  maxRetries,\n  retryCondition: (error: any) => {\n    // Retry on network errors or 5xx server errors\n    const status = error?.status || error?.response?.status\n    return (\n      !status || // Network error\n      (status >= 500 && status <= 599) // Server error\n    )\n  },\n  retryDelay: (retryAttempt: number) => {\n    // Exponential backoff: 1s, 2s, 4s, etc.\n    return Math.min(1000 * Math.pow(2, retryAttempt), 10000)\n  },\n})\n\n// Request deduplication utility\nclass RequestDeduplicator {\n  private static instance: RequestDeduplicator\n  private pendingRequests = new Map<string, Promise<any>>()\n\n  static getInstance(): RequestDeduplicator {\n    if (!RequestDeduplicator.instance) {\n      RequestDeduplicator.instance = new RequestDeduplicator()\n    }\n    return RequestDeduplicator.instance\n  }\n\n  deduplicate<T>(key: string, requestFn: () => Promise<T>): Promise<T> {\n    if (this.pendingRequests.has(key)) {\n      return this.pendingRequests.get(key)!\n    }\n\n    const promise = requestFn()\n      .finally(() => {\n        this.pendingRequests.delete(key)\n      })\n\n    this.pendingRequests.set(key, promise)\n    return promise\n  }\n}\n\nexport const requestDeduplicator = RequestDeduplicator.getInstance()\n\n// Performance monitoring utility\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor\n  private metrics = new Map<string, { count: number; totalTime: number; errors: number }>()\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor()\n    }\n    return PerformanceMonitor.instance\n  }\n\n  startTimer(operation: string): () => void {\n    const startTime = performance.now()\n\n    return () => {\n      const endTime = performance.now()\n      const duration = endTime - startTime\n      this.recordMetric(operation, duration)\n    }\n  }\n\n  recordError(operation: string): void {\n    const metric = this.metrics.get(operation) || { count: 0, totalTime: 0, errors: 0 }\n    metric.errors++\n    this.metrics.set(operation, metric)\n  }\n\n  private recordMetric(operation: string, duration: number): void {\n    const metric = this.metrics.get(operation) || { count: 0, totalTime: 0, errors: 0 }\n    metric.count++\n    metric.totalTime += duration\n    this.metrics.set(operation, metric)\n  }\n\n  getMetrics(): Record<string, { avgTime: number; count: number; errorRate: number }> {\n    const result: Record<string, { avgTime: number; count: number; errorRate: number }> = {}\n\n    this.metrics.forEach((metric, operation) => {\n      result[operation] = {\n        avgTime: metric.totalTime / metric.count,\n        count: metric.count,\n        errorRate: metric.errors / metric.count,\n      }\n    })\n\n    return result\n  }\n\n  reset(): void {\n    this.metrics.clear()\n  }\n}\n\nexport const performanceMonitor = PerformanceMonitor.getInstance()\n\n// Connection quality detection\nexport class ConnectionMonitor {\n  private static instance: ConnectionMonitor\n  private isOnline = navigator.onLine\n  private connectionQuality: 'fast' | 'slow' | 'offline' = 'fast'\n  private listeners: Array<(quality: 'fast' | 'slow' | 'offline') => void> = []\n\n  static getInstance(): ConnectionMonitor {\n    if (!ConnectionMonitor.instance) {\n      ConnectionMonitor.instance = new ConnectionMonitor()\n    }\n    return ConnectionMonitor.instance\n  }\n\n  constructor() {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => {\n        this.isOnline = true\n        this.updateConnectionQuality()\n      })\n\n      window.addEventListener('offline', () => {\n        this.isOnline = false\n        this.connectionQuality = 'offline'\n        this.notifyListeners()\n      })\n\n      // Monitor connection quality using performance timing\n      this.monitorConnectionQuality()\n    }\n  }\n\n  getConnectionQuality(): 'fast' | 'slow' | 'offline' {\n    return this.connectionQuality\n  }\n\n  onConnectionChange(callback: (quality: 'fast' | 'slow' | 'offline') => void): () => void {\n    this.listeners.push(callback)\n    return () => {\n      const index = this.listeners.indexOf(callback)\n      if (index > -1) {\n        this.listeners.splice(index, 1)\n      }\n    }\n  }\n\n  private monitorConnectionQuality(): void {\n    if (!this.isOnline) return\n\n    const startTime = Date.now()\n\n    // Make a small test request to gauge connection speed\n    fetch('/api/health', { method: 'HEAD' })\n      .then(() => {\n        const duration = Date.now() - startTime\n        const newQuality = duration > 2000 ? 'slow' : 'fast'\n\n        if (newQuality !== this.connectionQuality) {\n          this.connectionQuality = newQuality\n          this.notifyListeners()\n        }\n      })\n      .catch(() => {\n        // If health check fails, consider connection slow\n        this.connectionQuality = 'slow'\n        this.notifyListeners()\n      })\n\n    // Monitor every 30 seconds\n    setTimeout(() => this.monitorConnectionQuality(), 30000)\n  }\n\n  private updateConnectionQuality(): void {\n    if (this.isOnline) {\n      this.monitorConnectionQuality()\n    }\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(callback => callback(this.connectionQuality))\n  }\n}\n\nexport const connectionMonitor = ConnectionMonitor.getInstance()\n\n// Adaptive loading strategies based on connection quality\nexport const getAdaptiveLoadingStrategy = () => {\n  const quality = connectionMonitor.getConnectionQuality()\n\n  switch (quality) {\n    case 'offline':\n      return {\n        enablePrefetch: false,\n        enableBackgroundRefresh: false,\n        cachePolicy: 'cache-only',\n        imageOptimization: 'aggressive',\n      }\n    case 'slow':\n      return {\n        enablePrefetch: false,\n        enableBackgroundRefresh: false,\n        cachePolicy: 'cache-first',\n        imageOptimization: 'moderate',\n      }\n    case 'fast':\n    default:\n      return {\n        enablePrefetch: true,\n        enableBackgroundRefresh: true,\n        cachePolicy: 'stale-while-revalidate',\n        imageOptimization: 'minimal',\n      }\n  }\n}\n\n// Export utilities for easy access\nexport const dataPrefetcher = DataPrefetcher.getInstance()","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/logger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/logger.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":26,"column":3,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":28,"endColumn":4,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[555,621],"text":"cachedIsDev ??= resolveDevFlag();"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[777,780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[777,780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":39,"column":30,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":39,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[851,854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[851,854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":42,"column":32,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":42,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":45,"column":31,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":45,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1000,1003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1000,1003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":48,"column":31,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":48,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1075,1078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1075,1078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":51,"column":34,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":51,"endColumn":41}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"let devOverride: boolean | null = null\n\nexport const setLoggerEnvironment = (value: boolean | null) => {\n  devOverride = value\n}\n\nconst resolveDevFlag = (): boolean => {\n  if (typeof devOverride === 'boolean') {\n    return devOverride\n  }\n\n  if (typeof process !== 'undefined' && process.env?.NODE_ENV) {\n    return process.env.NODE_ENV !== 'production'\n  }\n\n  try {\n    return typeof import.meta !== 'undefined' && import.meta.env?.DEV === true\n  } catch {\n    return false\n  }\n}\n\nlet cachedIsDev: boolean | null = null\n\nconst isDev = (): boolean => {\n  if (cachedIsDev === null) {\n    cachedIsDev = resolveDevFlag()\n  }\n  return cachedIsDev\n}\n\n// For testing purposes\nexport const resetDevFlag = (): void => {\n  cachedIsDev = null\n}\n\nexport const logger = {\n  log: (...args: any[]) => {\n    if (isDev()) console.log(...args)\n  },\n  error: (...args: any[]) => {\n    if (isDev()) console.error(...args)\n  },\n  warn: (...args: any[]) => {\n    if (isDev()) console.warn(...args)\n  },\n  info: (...args: any[]) => {\n    if (isDev()) console.info(...args)\n  },\n  debug: (...args: any[]) => {\n    if (isDev()) console.debug?.(...args)\n  },\n}\n\nexport { isDev }\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/performance.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":46,"column":36,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":46,"endColumn":38,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[1198,1200],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[1198,1200],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":99,"column":53,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":99,"endColumn":55,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[2700,2702],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[2700,2702],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3918,3921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3918,3921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":265,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":265,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7516,7551],"text":"(nav.connection ?? nav.mozConnection)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":265,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":265,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7552,7554],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":266,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":266,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7625,7627],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":355,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":355,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10047,10049],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":356,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":356,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10107,10109],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":357,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":357,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10165,10167],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":358,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":358,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10225,10227],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":359,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":359,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10273,10275],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10847,10850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10847,10850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":442,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":442,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[12679,12679],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[12679,12679],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":449,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":449,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[12848,12848],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[12848,12848],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":493,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":493,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14141,14144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14141,14144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":514,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":514,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[14705,14705],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[14705,14705],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":528,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15354,15357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15354,15357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance utilities for React components\nimport { lazy, Suspense, useState, useEffect, ComponentType } from 'react';\nimport React from 'react';\n\nimport { analyticsService } from '../services/analyticsService'\n\nimport { logger } from './logger'\n\n// Type definitions\nexport type LazyComponent<T extends Record<string, unknown> = Record<string, never>> = ComponentType<T>;\n\n// Performance API types\ninterface PerformanceEntryWithStartTime extends PerformanceEntry {\n  startTime: number;\n}\n\ninterface LargestContentfulPaintEntry extends PerformanceEntryWithStartTime {\n  size: number;\n  element?: Element;\n}\n\ninterface FirstInputEntry extends PerformanceEntryWithStartTime {\n  processingStart: number;\n}\n\ninterface LayoutShiftEntry extends PerformanceEntryWithStartTime {\n  value: number;\n  hadRecentInput: boolean;\n}\n\n// Navigator connection types\ninterface NavigatorConnection {\n  effectiveType?: string;\n  type?: string;\n  downlink?: number;\n  rtt?: number;\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  connection?: NavigatorConnection;\n  mozConnection?: NavigatorConnection;\n  webkitConnection?: NavigatorConnection;\n}\n\n// Lazy loading wrapper\nexport const lazyLoad = <T extends {}>(\n  importFunc: () => Promise<{ default: ComponentType<T> }>\n): ComponentType<T> => {\n  const Component = lazy(importFunc);\n\n  return (props: T) =>\n    React.createElement(\n      Suspense,\n      {\n        fallback: React.createElement('div', {\n          className: 'animate-pulse bg-gray-200 h-32 rounded'\n        })\n      },\n      React.createElement(Component, props)\n    );\n};\n\n// Debounce hook for search/input\nexport const useDebounce = (value: string, delay: number): string => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => setDebouncedValue(value), delay);\n    return () => clearTimeout(handler);\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\n// Memoized API calls\nexport const memoizedFetch = (() => {\n  const cache = new Map<string, unknown>();\n\n  return async <T = unknown>(url: string, options?: RequestInit): Promise<T> => {\n    const key = `${url}${JSON.stringify(options)}`;\n    if (cache.has(key)) return cache.get(key) as T;\n\n    const response = await fetch(url, options);\n    const data = await response.json() as T;\n    cache.set(key, data);\n    return data;\n  };\n})();\n\n// Performance monitoring\nexport const measurePerformance = (name: string, fn: () => void): void => {\n  const start = performance.now();\n  fn();\n  const end = performance.now();\n  console.log(`${name} took ${end - start} milliseconds`);\n};\n\n// Component performance wrapper\nexport const withPerformanceMonitoring = <T extends {}>(\n  Component: ComponentType<T>,\n  name: string\n): ComponentType<T> => {\n  return (props: T) => {\n    useEffect(() => {\n      const start = performance.now();\n      return () => {\n        const end = performance.now();\n        console.log(`${name} render took ${end - start} milliseconds`);\n      };\n    });\n\n    return React.createElement(Component, props);\n  };\n};\n\n// ===== CORE WEB VITALS TRACKING SYSTEM =====\n\n// Types for performance metrics\nexport interface CoreWebVitals {\n  // Core Web Vitals\n  cls?: number    // Cumulative Layout Shift\n  fid?: number    // First Input Delay\n  lcp?: number    // Largest Contentful Paint\n  fcp?: number    // First Contentful Paint\n  ttfb?: number   // Time to First Byte\n\n  // Custom metrics\n  timestamp: number\n  url: string\n  userAgent: string\n  connectionType?: string\n}\n\nexport interface PagePerformanceMetrics {\n  pageLoadTime: number\n  domContentLoaded: number\n  resourcesLoaded: number\n  interactionDelay: number\n  renderTime: number\n  timestamp: number\n  url: string\n}\n\nexport interface UserJourneyMetrics {\n  journeyId: string\n  startTime: number\n  checkpoints: Array<{\n    name: string\n    timestamp: number\n    duration: number\n    metadata?: Record<string, any>\n  }>\n  totalDuration?: number\n}\n\n// Performance observer for Core Web Vitals\nclass WebVitalsTracker {\n  private metrics: Partial<CoreWebVitals> = {}\n  private observers: PerformanceObserver[] = []\n  private reportCallback?: (metrics: CoreWebVitals) => void\n\n  constructor(onReport?: (metrics: CoreWebVitals) => void) {\n    this.reportCallback = onReport\n    this.initializeObservers()\n  }\n\n  private initializeObservers() {\n    // Largest Contentful Paint (LCP)\n    if ('PerformanceObserver' in window) {\n      try {\n        const lcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries() as LargestContentfulPaintEntry[]\n          const lastEntry = entries[entries.length - 1]\n          this.metrics.lcp = lastEntry.startTime\n          this.reportMetrics('lcp')\n        })\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] })\n        this.observers.push(lcpObserver)\n      } catch (e) {\n        logger.warn('LCP observer not supported', e)\n      }\n\n      // First Input Delay (FID)\n      try {\n        const fidObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries() as FirstInputEntry[]\n          entries.forEach((entry) => {\n            this.metrics.fid = entry.processingStart - entry.startTime\n            this.reportMetrics('fid')\n          })\n        })\n        fidObserver.observe({ entryTypes: ['first-input'] })\n        this.observers.push(fidObserver)\n      } catch (e) {\n        logger.warn('FID observer not supported', e)\n      }\n\n      // Cumulative Layout Shift (CLS)\n      try {\n        let clsValue = 0\n        const clsObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries() as LayoutShiftEntry[]\n          entries.forEach((entry) => {\n            if (!entry.hadRecentInput) {\n              clsValue += entry.value\n            }\n          })\n          this.metrics.cls = clsValue\n          this.reportMetrics('cls')\n        })\n        clsObserver.observe({ entryTypes: ['layout-shift'] })\n        this.observers.push(clsObserver)\n      } catch (e) {\n        logger.warn('CLS observer not supported', e)\n      }\n\n      // First Contentful Paint (FCP)\n      try {\n        const fcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries()\n          entries.forEach((entry) => {\n            if (entry.name === 'first-contentful-paint') {\n              this.metrics.fcp = entry.startTime\n              this.reportMetrics('fcp')\n            }\n          })\n        })\n        fcpObserver.observe({ entryTypes: ['paint'] })\n        this.observers.push(fcpObserver)\n      } catch (e) {\n        logger.warn('FCP observer not supported', e)\n      }\n    }\n\n    // Navigation timing for TTFB\n    this.collectNavigationTiming()\n  }\n\n  private collectNavigationTiming() {\n    if ('performance' in window && 'timing' in performance) {\n      const timing = performance.timing\n      this.metrics.ttfb = timing.responseStart - timing.navigationStart\n      this.reportMetrics('ttfb')\n    }\n  }\n\n  private reportMetrics(trigger: string) {\n    const completeMetrics: CoreWebVitals = {\n      ...this.metrics,\n      timestamp: Date.now(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      connectionType: this.getConnectionType(),\n    }\n\n    logger.debug(`Web Vitals updated (${trigger}):`, completeMetrics)\n\n    if (this.reportCallback) {\n      this.reportCallback(completeMetrics)\n    }\n  }\n\n  private getConnectionType(): string {\n    const nav = navigator as NavigatorWithConnection\n    const connection = nav.connection || nav.mozConnection || nav.webkitConnection\n    return connection ? connection.effectiveType || 'unknown' : 'unknown'\n  }\n\n  public getCurrentMetrics(): CoreWebVitals {\n    return {\n      ...this.metrics,\n      timestamp: Date.now(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      connectionType: this.getConnectionType(),\n    }\n  }\n\n  public disconnect() {\n    this.observers.forEach(observer => observer.disconnect())\n    this.observers = []\n  }\n}\n\n// Page performance tracking\nexport class PagePerformanceTracker {\n  private startTime: number\n  private metrics: Partial<PagePerformanceMetrics> = {}\n\n  constructor() {\n    this.startTime = performance.now()\n    this.collectInitialMetrics()\n  }\n\n  private collectInitialMetrics() {\n    // DOM Content Loaded timing\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        this.metrics.domContentLoaded = performance.now() - this.startTime\n      })\n    } else {\n      this.metrics.domContentLoaded = 0 // Already loaded\n    }\n\n    // Window load timing\n    if (document.readyState !== 'complete') {\n      window.addEventListener('load', () => {\n        this.metrics.pageLoadTime = performance.now() - this.startTime\n        this.collectResourceMetrics()\n      })\n    } else {\n      this.metrics.pageLoadTime = 0\n      this.collectResourceMetrics()\n    }\n  }\n\n  private collectResourceMetrics() {\n    if ('performance' in window) {\n      const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[]\n      const totalResourceTime = resources.reduce((total, resource) => {\n        return total + (resource.responseEnd - resource.startTime)\n      }, 0)\n      this.metrics.resourcesLoaded = totalResourceTime\n    }\n  }\n\n  public measureInteraction(callback: () => void): Promise<void> {\n    return new Promise((resolve) => {\n      const startTime = performance.now()\n\n      callback()\n\n      requestAnimationFrame(() => {\n        this.metrics.interactionDelay = performance.now() - startTime\n        resolve()\n      })\n    })\n  }\n\n  public measureRenderTime(renderCallback: () => void): Promise<void> {\n    return new Promise((resolve) => {\n      const startTime = performance.now()\n\n      renderCallback()\n\n      requestAnimationFrame(() => {\n        this.metrics.renderTime = performance.now() - startTime\n        resolve()\n      })\n    })\n  }\n\n  public getMetrics(): PagePerformanceMetrics {\n    return {\n      pageLoadTime: this.metrics.pageLoadTime || 0,\n      domContentLoaded: this.metrics.domContentLoaded || 0,\n      resourcesLoaded: this.metrics.resourcesLoaded || 0,\n      interactionDelay: this.metrics.interactionDelay || 0,\n      renderTime: this.metrics.renderTime || 0,\n      timestamp: Date.now(),\n      url: window.location.href,\n    }\n  }\n}\n\n// User journey tracking for complex workflows\nexport class UserJourneyTracker {\n  private journeys = new Map<string, UserJourneyMetrics>()\n\n  public startJourney(journeyId: string): void {\n    const journey: UserJourneyMetrics = {\n      journeyId,\n      startTime: performance.now(),\n      checkpoints: [],\n    }\n    this.journeys.set(journeyId, journey)\n    logger.debug(`Started journey: ${journeyId}`)\n  }\n\n  public addCheckpoint(journeyId: string, name: string, metadata?: Record<string, any>): void {\n    const journey = this.journeys.get(journeyId)\n    if (!journey) {\n      logger.warn(`Journey ${journeyId} not found for checkpoint ${name}`)\n      return\n    }\n\n    const now = performance.now()\n    const checkpoint = {\n      name,\n      timestamp: now,\n      duration: now - journey.startTime,\n      metadata,\n    }\n\n    journey.checkpoints.push(checkpoint)\n    logger.debug(`Checkpoint added to ${journeyId}:`, checkpoint)\n  }\n\n  public completeJourney(journeyId: string): UserJourneyMetrics | null {\n    const journey = this.journeys.get(journeyId)\n    if (!journey) {\n      logger.warn(`Journey ${journeyId} not found for completion`)\n      return null\n    }\n\n    journey.totalDuration = performance.now() - journey.startTime\n    this.journeys.delete(journeyId)\n\n    logger.info(`Journey completed: ${journeyId}`, journey)\n    return journey\n  }\n\n  public getActiveJourneys(): string[] {\n    return Array.from(this.journeys.keys())\n  }\n}\n\n// Performance monitoring service\nclass PerformanceMonitoringService {\n  private webVitalsTracker: WebVitalsTracker\n  private pageTracker: PagePerformanceTracker\n  private journeyTracker: UserJourneyTracker\n  private metricsQueue: Array<CoreWebVitals | PagePerformanceMetrics | UserJourneyMetrics> = []\n  private reportingInterval: number | null = null\n\n  constructor() {\n    this.webVitalsTracker = new WebVitalsTracker((metrics) => {\n      this.queueMetrics(metrics)\n    })\n    this.pageTracker = new PagePerformanceTracker()\n    this.journeyTracker = new UserJourneyTracker()\n\n    // Start periodic reporting\n    this.startPeriodicReporting()\n  }\n\n  private queueMetrics(metrics: CoreWebVitals | PagePerformanceMetrics | UserJourneyMetrics) {\n    this.metricsQueue.push(metrics)\n\n    // Auto-flush if queue gets too large\n    if (this.metricsQueue.length > 50) {\n      this.flushMetrics()\n    }\n  }\n\n  private startPeriodicReporting() {\n    // Report metrics every 30 seconds\n    this.reportingInterval = window.setInterval(() => {\n      this.flushMetrics()\n    }, 30000)\n  }\n\n  private async flushMetrics() {\n    if (this.metricsQueue.length === 0) return\n\n    const metricsToReport = [...this.metricsQueue]\n    this.metricsQueue = []\n\n    try {\n      // In production, send to analytics service\n      logger.info('Performance metrics batch:', {\n        count: metricsToReport.length,\n        metrics: metricsToReport,\n      })\n\n      // Send to analytics service\n      await analyticsService.sendMetrics(metricsToReport)\n    } catch (error) {\n      logger.error('Failed to report performance metrics:', error)\n      // Restore metrics to queue for retry\n      this.metricsQueue.unshift(...metricsToReport)\n    }\n  }\n\n  public measurePagePerformance(): PagePerformanceMetrics {\n    const metrics = this.pageTracker.getMetrics()\n    this.queueMetrics(metrics)\n    return metrics\n  }\n\n  public measureInteraction(callback: () => void): Promise<void> {\n    return this.pageTracker.measureInteraction(callback)\n  }\n\n  public measureRender(callback: () => void): Promise<void> {\n    return this.pageTracker.measureRenderTime(callback)\n  }\n\n  public startUserJourney(journeyId: string): void {\n    this.journeyTracker.startJourney(journeyId)\n  }\n\n  public addJourneyCheckpoint(journeyId: string, name: string, metadata?: Record<string, any>): void {\n    this.journeyTracker.addCheckpoint(journeyId, name, metadata)\n  }\n\n  public completeUserJourney(journeyId: string): UserJourneyMetrics | null {\n    const journey = this.journeyTracker.completeJourney(journeyId)\n    if (journey) {\n      this.queueMetrics(journey)\n    }\n    return journey\n  }\n\n  public getCurrentWebVitals(): CoreWebVitals {\n    return this.webVitalsTracker.getCurrentMetrics()\n  }\n\n  public destroy() {\n    this.webVitalsTracker.disconnect()\n    if (this.reportingInterval) {\n      clearInterval(this.reportingInterval)\n    }\n    this.flushMetrics()\n  }\n}\n\n// Global performance monitoring instance\nexport const performanceMonitor = new PerformanceMonitoringService()\n\n// Convenience functions for React components\nexport const usePerformanceTracking = () => {\n  return {\n    measurePageLoad: () => performanceMonitor.measurePagePerformance(),\n    measureInteraction: (callback: () => void) => performanceMonitor.measureInteraction(callback),\n    measureRender: (callback: () => void) => performanceMonitor.measureRender(callback),\n    startJourney: (id: string) => performanceMonitor.startUserJourney(id),\n    addCheckpoint: (id: string, name: string, metadata?: Record<string, any>) =>\n      performanceMonitor.addJourneyCheckpoint(id, name, metadata),\n    completeJourney: (id: string) => performanceMonitor.completeUserJourney(id),\n    getWebVitals: () => performanceMonitor.getCurrentWebVitals(),\n  }\n}\n\n// React hook for automatic page performance tracking\nexport const usePagePerformance = (pageName: string) => {\n  useEffect(() => {\n    const metrics = performanceMonitor.measurePagePerformance()\n    logger.info(`Page performance for ${pageName}:`, metrics)\n\n    return () => {\n      // Final measurement on unmount\n      const finalMetrics = performanceMonitor.measurePagePerformance()\n      logger.info(`Final page performance for ${pageName}:`, finalMetrics)\n    }\n  }, [pageName])\n}\n\n// Auto-initialize performance tracking\nif (typeof window !== 'undefined') {\n  // Clean up on page unload\n  window.addEventListener('beforeunload', () => {\n    performanceMonitor.destroy()\n  })\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/preloadingStrategy.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":421,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Intelligent Preloading Strategy\n *\n * Advanced preloading system that analyzes user behavior and preloads\n * likely next routes and resources based on user patterns and navigation.\n */\n\nimport { logger } from './logger'\nimport { performanceMonitor } from './performance'\n\n// Types for preloading strategy\nexport interface PreloadStrategy {\n  route: string\n  priority: 'high' | 'medium' | 'low'\n  confidence: number // 0-1 probability user will navigate here\n  dependencies: string[] // Required chunks/resources\n}\n\nexport interface UserNavigationPattern {\n  route: string\n  timestamp: number\n  duration: number\n  exitRoute?: string\n  metadata?: Record<string, any>\n}\n\nexport interface PreloadResult {\n  route: string\n  success: boolean\n  loadTime: number\n  error?: Error\n}\n\n// Navigation pattern analyzer\nclass NavigationPatternAnalyzer {\n  private patterns: UserNavigationPattern[] = []\n  private readonly maxPatterns = 50 // Keep last 50 navigation events\n\n  public recordNavigation(pattern: UserNavigationPattern): void {\n    this.patterns.push(pattern)\n\n    // Keep only recent patterns\n    if (this.patterns.length > this.maxPatterns) {\n      this.patterns = this.patterns.slice(-this.maxPatterns)\n    }\n\n    logger.debug('Navigation pattern recorded:', pattern)\n  }\n\n  public predictNextRoutes(currentRoute: string, limit = 3): PreloadStrategy[] {\n    const predictions: Map<string, { count: number; avgDuration: number }> = new Map()\n\n    // Analyze patterns where user was on current route\n    const relevantPatterns = this.patterns.filter(p => p.route === currentRoute && p.exitRoute)\n\n    if (relevantPatterns.length === 0) {\n      // Return default strategies for new routes\n      return this.getDefaultStrategies(currentRoute)\n    }\n\n    // Count transitions and calculate average time spent\n    relevantPatterns.forEach(pattern => {\n      if (!pattern.exitRoute) return\n\n      const existing = predictions.get(pattern.exitRoute)\n      predictions.set(pattern.exitRoute, {\n        count: (existing?.count || 0) + 1,\n        avgDuration: existing\n          ? (existing.avgDuration + pattern.duration) / 2\n          : pattern.duration\n      })\n    })\n\n    // Convert to strategies with confidence scores\n    const strategies: PreloadStrategy[] = []\n    const totalTransitions = relevantPatterns.length\n\n    predictions.forEach((data, route) => {\n      const confidence = data.count / totalTransitions\n      const priority = this.calculatePriority(confidence, data.avgDuration)\n\n      strategies.push({\n        route,\n        priority,\n        confidence,\n        dependencies: this.getRouteDependencies(route)\n      })\n    })\n\n    // Sort by confidence and limit results\n    return strategies\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, limit)\n  }\n\n  private calculatePriority(confidence: number, avgDuration: number): 'high' | 'medium' | 'low' {\n    // High priority: high confidence (>60%) and user stays long (>5s)\n    if (confidence > 0.6 && avgDuration > 5000) return 'high'\n\n    // Medium priority: decent confidence (>30%) or high confidence with short stays\n    if (confidence > 0.3 || (confidence > 0.5 && avgDuration > 2000)) return 'medium'\n\n    return 'low'\n  }\n\n  private getDefaultStrategies(currentRoute: string): PreloadStrategy[] {\n    // Default preloading strategies based on common navigation patterns\n    const defaultMap: Record<string, PreloadStrategy[]> = {\n      '/': [\n        { route: '/dashboard', priority: 'high', confidence: 0.8, dependencies: ['feature-dashboard'] },\n        { route: '/organizations', priority: 'medium', confidence: 0.6, dependencies: ['feature-organizations'] },\n        { route: '/payments', priority: 'low', confidence: 0.3, dependencies: ['feature-payments'] }\n      ],\n      '/auth/login': [\n        { route: '/dashboard', priority: 'high', confidence: 0.9, dependencies: ['feature-dashboard'] }\n      ],\n      '/dashboard': [\n        { route: '/organizations', priority: 'medium', confidence: 0.5, dependencies: ['feature-organizations'] },\n        { route: '/payments', priority: 'medium', confidence: 0.4, dependencies: ['feature-payments'] },\n        { route: '/subscription', priority: 'low', confidence: 0.3, dependencies: ['feature-subscriptions'] }\n      ],\n      '/organizations': [\n        { route: '/payments', priority: 'medium', confidence: 0.4, dependencies: ['feature-payments'] },\n        { route: '/subscription', priority: 'low', confidence: 0.3, dependencies: ['feature-subscriptions'] }\n      ]\n    }\n\n    return defaultMap[currentRoute] || []\n  }\n\n  private getRouteDependencies(route: string): string[] {\n    // Map routes to their required chunks\n    const dependencyMap: Record<string, string[]> = {\n      '/dashboard': ['feature-dashboard', 'ui-components'],\n      '/organizations': ['feature-organizations', 'ui-components'],\n      '/organizations/*': ['feature-organizations', 'ui-components', 'vendor-forms'],\n      '/payments': ['feature-payments', 'vendor-stripe', 'ui-components'],\n      '/subscription': ['feature-subscriptions', 'vendor-stripe', 'ui-components'],\n      '/auth/*': ['feature-auth', 'vendor-forms'],\n    }\n\n    // Find matching pattern\n    for (const [pattern, deps] of Object.entries(dependencyMap)) {\n      if (pattern.includes('*') && route.startsWith(pattern.replace('*', ''))) {\n        return deps\n      }\n      if (pattern === route) {\n        return deps\n      }\n    }\n\n    return ['ui-components'] // Default dependencies\n  }\n\n  public getAnalytics() {\n    const routeFrequency: Record<string, number> = {}\n    const avgDurations: Record<string, number> = {}\n\n    this.patterns.forEach(pattern => {\n      routeFrequency[pattern.route] = (routeFrequency[pattern.route] || 0) + 1\n      avgDurations[pattern.route] = pattern.duration\n    })\n\n    return {\n      totalPatterns: this.patterns.length,\n      routeFrequency,\n      avgDurations\n    }\n  }\n}\n\n// Intelligent resource preloader\nclass IntelligentPreloader {\n  private preloadedRoutes: Set<string> = new Set()\n  private preloadedChunks: Set<string> = new Set()\n  private preloadResults: PreloadResult[] = []\n  private analyzer: NavigationPatternAnalyzer\n\n  constructor() {\n    this.analyzer = new NavigationPatternAnalyzer()\n    this.initializeIntersectionObserver()\n  }\n\n  public async preloadRoute(strategy: PreloadStrategy): Promise<PreloadResult> {\n    const startTime = performance.now()\n    const result: PreloadResult = {\n      route: strategy.route,\n      success: false,\n      loadTime: 0\n    }\n\n    try {\n      logger.info(`Preloading route ${strategy.route} with ${strategy.priority} priority`)\n\n      // Preload route components\n      await this.preloadRouteComponents(strategy.route)\n\n      // Preload required chunks\n      await Promise.all(\n        strategy.dependencies.map(chunk => this.preloadChunk(chunk))\n      )\n\n      result.success = true\n      result.loadTime = performance.now() - startTime\n\n      this.preloadedRoutes.add(strategy.route)\n      logger.info(`Successfully preloaded route ${strategy.route} in ${result.loadTime.toFixed(2)}ms`)\n\n    } catch (error) {\n      result.error = error as Error\n      result.loadTime = performance.now() - startTime\n      logger.error(`Failed to preload route ${strategy.route}:`, error)\n    }\n\n    this.preloadResults.push(result)\n    return result\n  }\n\n  private async preloadRouteComponents(route: string): Promise<void> {\n    // Dynamic imports based on route patterns\n    const routeImports: Record<string, () => Promise<any>> = {\n      '/dashboard': () => import('../pages/dashboard/DashboardPage'),\n      '/organizations': () => import('../pages/organizations/OrganizationsPage'),\n      '/payments': () => import('../pages/payments/PaymentsPage'),\n      '/subscription': () => import('../pages/subscription/SubscriptionPage'),\n    }\n\n    const importFn = routeImports[route]\n    if (importFn) {\n      await importFn()\n    }\n  }\n\n  private async preloadChunk(chunkName: string): Promise<void> {\n    if (this.preloadedChunks.has(chunkName)) {\n      return // Already preloaded\n    }\n\n    // Create link element for chunk preloading\n    const link = document.createElement('link')\n    link.rel = 'preload'\n    link.as = 'script'\n    link.crossOrigin = 'anonymous'\n\n    // In production, we'd need to map chunk names to actual file names\n    // For now, we'll simulate the preload\n    await new Promise((resolve) => {\n      setTimeout(resolve, 10) // Simulate network delay\n    })\n\n    this.preloadedChunks.add(chunkName)\n    logger.debug(`Preloaded chunk: ${chunkName}`)\n  }\n\n  public recordNavigation(pattern: UserNavigationPattern): void {\n    this.analyzer.recordNavigation(pattern)\n\n    // Trigger predictive preloading for next likely routes\n    this.triggerPredictivePreloading(pattern.route)\n  }\n\n  private async triggerPredictivePreloading(currentRoute: string): Promise<void> {\n    const strategies = this.analyzer.predictNextRoutes(currentRoute)\n\n    // Process strategies by priority\n    const highPriority = strategies.filter(s => s.priority === 'high')\n    const mediumPriority = strategies.filter(s => s.priority === 'medium')\n    const lowPriority = strategies.filter(s => s.priority === 'low')\n\n    // Preload high priority immediately\n    await Promise.all(\n      highPriority.map(strategy => this.preloadRoute(strategy))\n    )\n\n    // Preload medium priority after a short delay\n    setTimeout(async () => {\n      await Promise.all(\n        mediumPriority.map(strategy => this.preloadRoute(strategy))\n      )\n    }, 1000)\n\n    // Preload low priority when browser is idle\n    if ('requestIdleCallback' in window) {\n      requestIdleCallback(async () => {\n        await Promise.all(\n          lowPriority.map(strategy => this.preloadRoute(strategy))\n        )\n      }, { timeout: 5000 })\n    }\n  }\n\n  private initializeIntersectionObserver(): void {\n    // Preload resources when they come into viewport\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const target = entry.target as HTMLElement\n          const preloadRoute = target.dataset.preloadRoute\n\n          if (preloadRoute && !this.preloadedRoutes.has(preloadRoute)) {\n            const strategy: PreloadStrategy = {\n              route: preloadRoute,\n              priority: 'medium',\n              confidence: 0.7,\n              dependencies: this.analyzer['getRouteDependencies'](preloadRoute)\n            }\n\n            this.preloadRoute(strategy)\n          }\n        }\n      })\n    }, { threshold: 0.1 })\n\n    // Observe navigation links\n    setTimeout(() => {\n      document.querySelectorAll('a[data-preload-route]').forEach(link => {\n        observer.observe(link)\n      })\n    }, 1000)\n  }\n\n  public getPreloadingStats() {\n    return {\n      preloadedRoutes: Array.from(this.preloadedRoutes),\n      preloadedChunks: Array.from(this.preloadedChunks),\n      results: this.preloadResults,\n      analytics: this.analyzer.getAnalytics()\n    }\n  }\n}\n\n// Global preloader instance\nexport const intelligentPreloader = new IntelligentPreloader()\n\n// React hook for navigation tracking\nexport const useNavigationTracking = () => {\n  React.useEffect(() => {\n    let startTime = performance.now()\n    let currentRoute = window.location.pathname\n\n    const handleRouteChange = () => {\n      const endTime = performance.now()\n      const duration = endTime - startTime\n      const exitRoute = window.location.pathname\n\n      // Record navigation pattern\n      intelligentPreloader.recordNavigation({\n        route: currentRoute,\n        timestamp: Date.now(),\n        duration,\n        exitRoute: exitRoute !== currentRoute ? exitRoute : undefined\n      })\n\n      // Update for next navigation\n      currentRoute = exitRoute\n      startTime = endTime\n    }\n\n    // Listen for route changes\n    window.addEventListener('popstate', handleRouteChange)\n\n    // Also listen for programmatic navigation (React Router)\n    const originalPushState = history.pushState\n    const originalReplaceState = history.replaceState\n\n    history.pushState = function(...args) {\n      handleRouteChange()\n      return originalPushState.apply(this, args)\n    }\n\n    history.replaceState = function(...args) {\n      handleRouteChange()\n      return originalReplaceState.apply(this, args)\n    }\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('popstate', handleRouteChange)\n      history.pushState = originalPushState\n      history.replaceState = originalReplaceState\n    }\n  }, [])\n\n  return {\n    getPreloadingStats: () => intelligentPreloader.getPreloadingStats(),\n    preloadRoute: (route: string) => {\n      const strategy: PreloadStrategy = {\n        route,\n        priority: 'medium',\n        confidence: 0.8,\n        dependencies: []\n      }\n      return intelligentPreloader.preloadRoute(strategy)\n    }\n  }\n}\n\n// Component for adding preload hints to navigation links\nexport interface PreloadLinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  to: string\n  preloadPriority?: 'high' | 'medium' | 'low'\n}\n\nexport const PreloadLink: React.FC<PreloadLinkProps> = ({\n  to,\n  preloadPriority = 'medium',\n  children,\n  ...props\n}) => {\n  React.useEffect(() => {\n    // Add data attribute for intersection observer\n    const links = document.querySelectorAll(`a[href=\"${to}\"]`)\n    links.forEach(link => {\n      link.setAttribute('data-preload-route', to)\n      link.setAttribute('data-preload-priority', preloadPriority)\n    })\n  }, [to, preloadPriority])\n\n  return (\n    <a\n      {...props}\n      href={to}\n      data-preload-route={to}\n      data-preload-priority={preloadPriority}\n    >\n      {children}\n    </a>\n  )\n}\n\n// Auto-initialize navigation tracking\nif (typeof window !== 'undefined') {\n  // Start performance monitoring for preloading\n  performanceMonitor.startUserJourney('preloading-session')\n\n  // Clean up on page unload\n  window.addEventListener('beforeunload', () => {\n    const stats = intelligentPreloader.getPreloadingStats()\n    logger.info('Final preloading statistics:', stats)\n\n    performanceMonitor.completeUserJourney('preloading-session')\n  })\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/src/utils/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/auth-debug.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/auth-flow-debug.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":15,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":15,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[493,496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[493,496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .__REDUX_STORE__ on an `any` value.","line":15,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":17,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getState on an `any` value.","line":17,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":18,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subscribe on an `any` value.","line":18,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":19,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":19,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":19,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getState on an `any` value.","line":19,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":20,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":20,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":22,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":22,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":22,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":23,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":23,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":23,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":25,"column":15,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":25,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":109,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":107,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":107,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3344,3347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3344,3347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .__REDUX_STORE__ on an `any` value.","line":107,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":108,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":108,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":108,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":108,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getState on an `any` value.","line":108,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":108,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":114,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3625,3628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3625,3628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .__REDUX_STORE__ on an `any` value.","line":114,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":116,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":116,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":116,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":116,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getState on an `any` value.","line":116,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":116,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":118,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":118,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authApi on an `any` value.","line":118,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":127,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":127,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4050,4053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4050,4053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .__REDUX_STORE__ on an `any` value.","line":127,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":129,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":129,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":129,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":129,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getState on an `any` value.","line":129,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":130,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":133,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":135,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":138,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":136,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4450,4453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4450,4453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .__REDUX_STORE__ on an `any` value.","line":136,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":137,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":137,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":137,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":137,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getState on an `any` value.","line":137,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":137,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":45}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from './fixtures'\nimport {\n  mockJsonRoute,\n  createTestUser,\n  createTestOrganization,\n} from './utils/test-utils'\n\ntest.describe('Authentication Flow Debug', () => {\n  test('should debug complete authentication flow step by step', async ({ page }) => {\n    console.log('=== Starting authentication flow debug ===')\n\n    // Monitor Redux state changes\n    await page.addInitScript(() => {\n      window.addEventListener('load', () => {\n        const store = (window as any).__REDUX_STORE__\n        if (store) {\n          let previousState = store.getState()\n          store.subscribe(() => {\n            const currentState = store.getState()\n            if (currentState.auth !== previousState.auth) {\n              console.log('AUTH STATE CHANGE:', {\n                previous: previousState.auth,\n                current: currentState.auth\n              })\n              previousState = currentState\n            }\n          })\n        }\n      })\n    })\n\n    // Monitor all network requests\n    const networkLogs: string[] = []\n    page.on('request', request => {\n      const url = request.url()\n      if (url.includes('/api/')) {\n        networkLogs.push(`REQUEST: ${request.method()} ${url}`)\n        console.log(`REQUEST: ${request.method()} ${url}`)\n      }\n    })\n\n    page.on('response', response => {\n      const url = response.url()\n      if (url.includes('/api/')) {\n        networkLogs.push(`RESPONSE: ${response.status()} ${url}`)\n        console.log(`RESPONSE: ${response.status()} ${url}`)\n      }\n    })\n\n    // Mock authentication session with detailed logging\n    const authResponse = {\n      success: true,\n      data: {\n        user: {\n          ...createTestUser({ id: '123e4567-e89b-12d3-a456-426614174000' }),\n          firstName: 'Test',\n          lastName: 'User',\n        },\n        session: {\n          activeTokens: 1,\n          lastActiveAt: '2024-01-01T10:00:00Z',\n          createdAt: '2024-01-01T00:00:00Z',\n        },\n      },\n      timestamp: '2024-01-01T10:00:00Z',\n    }\n\n    console.log('🔒 AUTH SESSION ROUTE INTERCEPTED!')\n    console.log('📤 Sending auth response:', JSON.stringify(authResponse, null, 2))\n    await mockJsonRoute(page, '/api/v1/auth/session', authResponse)\n\n    // Mock user organizations\n    console.log('🏢 ORGANIZATIONS ROUTE INTERCEPTED!')\n    await mockJsonRoute(page, '/api/v1/organizations/user', {\n      success: true,\n      data: {\n        items: [\n          {\n            ...createTestOrganization({\n              id: '987fcdeb-51d2-43a1-b456-426614174000',\n              name: 'Test Organization',\n            }),\n            plan: 'PRO',\n            billingEmail: 'billing@example.com',\n            maxUsers: 50,\n            currentUsers: 1,\n          },\n        ],\n      },\n      timestamp: '2024-01-01T10:00:00Z',\n    })\n\n    console.log('📍 Step 1: Navigate to root URL')\n    await page.goto('/')\n    await page.waitForTimeout(1000)\n\n    console.log('📍 Step 2: Check current URL and page state')\n    const currentUrl = page.url()\n    console.log(`Current URL: ${currentUrl}`)\n\n    // Check if we're on auth page\n    const isOnAuthPage = currentUrl.includes('/auth/login')\n    console.log(`Is on auth page: ${isOnAuthPage}`)\n\n    // Get authentication state from Redux\n    const authState = await page.evaluate(() => {\n      const store = (window as any).__REDUX_STORE__\n      return store ? store.getState().auth : null\n    })\n    console.log('Redux auth state:', authState)\n\n    // Also check the RTK Query cache to see if session data was stored\n    const queryState = await page.evaluate(() => {\n      const store = (window as any).__REDUX_STORE__\n      if (!store) return null\n      const state = store.getState()\n      return {\n        authApi: state.authApi,\n      }\n    })\n    console.log('RTK Query state:', JSON.stringify(queryState, null, 2))\n\n    console.log('📍 Step 3: Wait for authentication to complete')\n    // Wait for either auth to complete or timeout\n    try {\n      await page.waitForFunction(() => {\n        const store = (window as any).__REDUX_STORE__\n        if (!store) return false\n        const state = store.getState()\n        return state.auth.isAuthenticated === true\n      }, { timeout: 10000 })\n      console.log('✅ Authentication completed!')\n    } catch (error) {\n      console.log('⚠️ Authentication timeout, checking state...')\n      const finalAuthState = await page.evaluate(() => {\n        const store = (window as any).__REDUX_STORE__\n        return store ? store.getState().auth : null\n      })\n      console.log('Final auth state:', finalAuthState)\n    }\n\n    console.log('📍 Step 4: Navigate to payments page')\n    await page.goto('/payments')\n    await page.waitForTimeout(2000)\n\n    console.log('📍 Step 5: Check final page state')\n    const finalUrl = page.url()\n    console.log(`Final URL: ${finalUrl}`)\n\n    const pageContent = await page.content()\n    const hasLoginForm = pageContent.includes('Sign in to Platform')\n    const hasPaymentsHeading = pageContent.includes('Payments')\n\n    console.log(`Has login form: ${hasLoginForm}`)\n    console.log(`Has payments heading: ${hasPaymentsHeading}`)\n\n    console.log('📍 Step 6: Network logs')\n    console.log('Network activity:', networkLogs)\n\n    // Take screenshot for debugging\n    await page.screenshot({ path: 'auth-flow-debug.png', fullPage: true })\n\n    // For now, just ensure page loads without crashing\n    await expect(page.locator('body')).toBeVisible()\n\n    console.log('=== Authentication flow debug complete ===')\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/auth-flows.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dispatch on an `error` typed value.","line":39,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":84,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":400,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":405,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":402,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":402,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":402,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":402,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getItem on an `any` value.","line":402,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":402,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":403,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":403,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":403,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":403,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getItem on an `any` value.","line":403,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":403,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `any` value.","line":407,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":407,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":408,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":408,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'page' is defined but never used.","line":473,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":473,"endColumn":54},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":473,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":473,"endColumn":60,"suggestions":[{"messageId":"removeAsync","fix":{"range":[18487,18493],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":509,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":509,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[19874,19874],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[19874,19874],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from './fixtures'\n\n/**\n * End-to-end tests for authentication flows\n * Tests complete user journeys from login to logout\n */\n\ntest.describe('Authentication Flows', () => {\n  test.beforeEach(async ({ page }) => {\n    // Comprehensive authentication state cleanup\n    console.log('🧹 Clearing authentication state...')\n\n    // 1. Clear all browser storage\n    await page.context().clearCookies()\n    await page.context().clearPermissions()\n\n    // 2. Clear local/session storage (navigate to app first to avoid security issues)\n    await page.goto('/')\n    await page.evaluate(() => {\n      try {\n        localStorage.clear()\n        sessionStorage.clear()\n      } catch (e) {\n        console.log('Could not clear storage:', e)\n      }\n    })\n\n    // 3. Navigate to app and clear Redux store if needed\n    await page.goto('/')\n\n    // 4. Clear Redux auth state by dispatching logout action\n    await page.evaluate(() => {\n      // Check if Redux store is available and dispatch logout\n      if (window.__REDUX_STORE__) {\n        window.__REDUX_STORE__.dispatch({ type: 'auth/logout' })\n      }\n      // Also try common store access patterns\n      if (window.store) {\n        window.store.dispatch({ type: 'auth/logout' })\n      }\n    }).catch(() => {\n      // Redux store might not be exposed, that's OK\n      console.log('Redux store not accessible, continuing...')\n    })\n\n    // 5. Force navigate to login page to ensure clean state\n    await page.goto('/auth/login', { waitUntil: 'networkidle' })\n\n    // 6. Verify we're actually on the login page\n    try {\n      // Wait for login form elements or redirect to happen\n      await Promise.race([\n        // Either we see the login form\n        page.locator('[data-testid=\"email-input\"]').waitFor({ timeout: 5000 }),\n        // Or we see welcome text (meaning still logged in)\n        page.locator('text=Welcome back').waitFor({ timeout: 5000 })\n      ])\n\n      // If we still see welcome text, the auth state is persistent\n      if (await page.locator('text=Welcome back').isVisible()) {\n        console.log('⚠️ Auth state still persistent, trying API logout...')\n\n        // Try to call logout API directly\n        await page.evaluate(async () => {\n          try {\n            await fetch('/api/auth/logout', {\n              method: 'POST',\n              credentials: 'include'\n            })\n          } catch (e) {\n            console.log('Logout API call failed:', e)\n          }\n        })\n\n        // Clear everything again and reload\n        await page.context().clearCookies()\n        await page.goto('/auth/login', { waitUntil: 'networkidle' })\n\n        // Final check - if still not on login page, there might be auto-login in test mode\n        if (await page.locator('text=Welcome back').isVisible()) {\n          console.log('🚨 Auto-login detected in test mode - auth tests may need mocking')\n        }\n      }\n    } catch (error) {\n      console.log('Login page detection timed out, proceeding with test...')\n    }\n  })\n\n  test.describe('Login Flow', () => {\n    test('should complete successful login flow', async ({ page }) => {\n      // Navigate directly to login page\n      await page.goto('/auth/login')\n      await expect(page).toHaveURL(/.*login/)\n\n      // Wait for login form to be visible\n      await expect(page.locator('[data-testid=\"email-input\"]')).toBeVisible()\n\n      // Fill login form\n      await page.fill('[data-testid=\"email-input\"]', 'demo@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'DemoPassword123!')\n\n      // Submit form\n      await page.click('[data-testid=\"submit-button\"]')\n\n      // Wait for successful login and redirect\n      await expect(page).toHaveURL(/.*dashboard/)\n      await expect(page.locator('text=Welcome back')).toBeVisible()\n    })\n\n    test('should show error for invalid credentials', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n\n      await page.fill('[data-testid=\"email-input\"]', 'invalid@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'wrongpassword')\n\n      await page.click('[data-testid=\"submit-button\"]')\n\n      // Should show error message\n      await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible()\n      await expect(page.locator('text=Invalid email or password')).toBeVisible()\n\n      // Should remain on login page\n      await expect(page).toHaveURL(/.*login/)\n    })\n\n    test('should handle account lockout', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n\n      // Simulate multiple failed attempts\n      for (let i = 0; i < 5; i++) {\n        await page.fill('[data-testid=\"email-input\"]', 'locked@example.com')\n        await page.fill('[data-testid=\"password-input\"]', 'wrongpassword')\n        await page.click('[data-testid=\"submit-button\"]')\n\n        if (i < 4) {\n          await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible()\n        }\n      }\n\n      // Should show lockout message\n      await expect(page.locator('text=Account locked')).toBeVisible()\n      await expect(page.locator('[data-testid=\"submit-button\"]')).toBeDisabled()\n    })\n\n    test('should validate form fields', async ({ page }) => {\n      // Navigate directly to login page\n      await page.goto('/auth/login')\n\n      // Wait for login form to be visible\n      await expect(page.locator('[data-testid=\"email-input\"]')).toBeVisible()\n\n      // Try to submit without filling fields (click submit directly on login form)\n      await page.click('[data-testid=\"submit-button\"]')\n\n      // Should show validation errors\n      await expect(page.locator('[data-testid=\"email-error\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"password-error\"]')).toBeVisible()\n      await expect(page.locator('text=Please enter a valid email address')).toBeVisible()\n      await expect(page.locator('text=Password must be at least 8 characters')).toBeVisible()\n    })\n\n    test('should show password strength indicator', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n\n      // Weak password\n      await page.fill('[data-testid=\"password-input\"]', '123')\n      await expect(page.locator('[data-testid=\"password-strength\"]')).toHaveText('Weak')\n\n      // Strong password\n      await page.fill('[data-testid=\"password-input\"]', 'SecurePassword123!')\n      await expect(page.locator('[data-testid=\"password-strength\"]')).toHaveText('Strong')\n    })\n\n    test('should remember me functionality', async ({ page, context }) => {\n      await page.click('[data-testid=\"login-button\"]')\n\n      await page.fill('[data-testid=\"email-input\"]', 'demo@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'DemoPassword123!')\n      await page.check('[data-testid=\"remember-me-checkbox\"]')\n\n      await page.click('[data-testid=\"submit-button\"]')\n      await expect(page).toHaveURL(/.*dashboard/)\n\n      // Close and reopen browser\n      await page.close()\n      const newPage = await context.newPage()\n      await newPage.goto('/')\n\n      // Should still be logged in\n      await expect(newPage).toHaveURL(/.*dashboard/)\n    })\n  })\n\n  test.describe('Registration Flow', () => {\n    test('should complete successful registration', async ({ page }) => {\n      await page.click('[data-testid=\"register-button\"]')\n      await expect(page).toHaveURL(/.*register/)\n\n      // Fill registration form\n      await page.fill('[data-testid=\"email-input\"]', 'newuser@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'SecurePassword123!')\n      await page.fill('[data-testid=\"confirm-password-input\"]', 'SecurePassword123!')\n      await page.fill('[data-testid=\"first-name-input\"]', 'John')\n      await page.fill('[data-testid=\"last-name-input\"]', 'Doe')\n      await page.check('[data-testid=\"terms-checkbox\"]')\n\n      await page.click('[data-testid=\"submit-button\"]')\n\n      // Should redirect to email verification\n      await expect(page).toHaveURL(/.*verify-email/)\n      await expect(page.locator('text=Please check your email')).toBeVisible()\n    })\n\n    test('should validate password complexity', async ({ page }) => {\n      await page.click('[data-testid=\"register-button\"]')\n\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'weak')\n\n      await page.click('[data-testid=\"submit-button\"]')\n\n      await expect(page.locator('[data-testid=\"password-error\"]')).toBeVisible()\n      await expect(page.locator('text=Password must be at least 12 characters')).toBeVisible()\n    })\n\n    test('should check password confirmation match', async ({ page }) => {\n      await page.click('[data-testid=\"register-button\"]')\n\n      await page.fill('[data-testid=\"password-input\"]', 'SecurePassword123!')\n      await page.fill('[data-testid=\"confirm-password-input\"]', 'DifferentPassword123!')\n\n      await page.click('[data-testid=\"submit-button\"]')\n\n      await expect(page.locator('[data-testid=\"confirm-password-error\"]')).toBeVisible()\n      await expect(page.locator('text=Passwords do not match')).toBeVisible()\n    })\n\n    test('should require terms acceptance', async ({ page }) => {\n      await page.click('[data-testid=\"register-button\"]')\n\n      await page.fill('[data-testid=\"email-input\"]', 'demo@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'DemoPassword123!')\n      await page.fill('[data-testid=\"confirm-password-input\"]', 'SecurePassword123!')\n      await page.fill('[data-testid=\"first-name-input\"]', 'John')\n      await page.fill('[data-testid=\"last-name-input\"]', 'Doe')\n      // Don't check terms checkbox\n\n      await page.click('[data-testid=\"submit-button\"]')\n\n      await expect(page.locator('[data-testid=\"terms-error\"]')).toBeVisible()\n      await expect(page.locator('text=You must accept the terms')).toBeVisible()\n    })\n  })\n\n  test.describe('Password Reset Flow', () => {\n    test('should complete password reset request', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n      await page.click('[data-testid=\"forgot-password-link\"]')\n      await expect(page).toHaveURL(/.*forgot-password/)\n\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.click('[data-testid=\"submit-button\"]')\n\n      await expect(page.locator('text=Reset link sent')).toBeVisible()\n      await expect(page.locator('text=Check your email')).toBeVisible()\n    })\n\n    test('should handle invalid email for password reset', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n      await page.click('[data-testid=\"forgot-password-link\"]')\n\n      await page.fill('[data-testid=\"email-input\"]', 'nonexistent@example.com')\n      await page.click('[data-testid=\"submit-button\"]')\n\n      await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible()\n      await expect(page.locator('text=Email not found')).toBeVisible()\n    })\n\n    test('should complete password reset with valid token', async ({ page }) => {\n      // Navigate directly to reset page with token\n      await page.goto('/reset-password?token=valid-reset-token')\n\n      await page.fill('[data-testid=\"new-password-input\"]', 'NewSecurePassword123!')\n      await page.fill('[data-testid=\"confirm-password-input\"]', 'NewSecurePassword123!')\n\n      await page.click('[data-testid=\"submit-button\"]')\n\n      await expect(page.locator('text=Password updated successfully')).toBeVisible()\n      await expect(page).toHaveURL(/.*login/)\n    })\n\n    test('should handle expired reset token', async ({ page }) => {\n      await page.goto('/reset-password?token=expired-token')\n\n      await expect(page.locator('text=Reset token expired')).toBeVisible()\n      await expect(page.locator('[data-testid=\"request-new-link\"]')).toBeVisible()\n    })\n  })\n\n  test.describe('Email Verification Flow', () => {\n    test('should verify email with valid token', async ({ page }) => {\n      await page.goto('/verify-email?token=valid-verification-token')\n\n      await expect(page.locator('text=Email verified successfully')).toBeVisible()\n      await expect(page.locator('[data-testid=\"continue-button\"]')).toBeVisible()\n\n      await page.click('[data-testid=\"continue-button\"]')\n      await expect(page).toHaveURL(/.*dashboard/)\n    })\n\n    test('should handle invalid verification token', async ({ page }) => {\n      await page.goto('/verify-email?token=invalid-token')\n\n      await expect(page.locator('text=Invalid verification token')).toBeVisible()\n      await expect(page.locator('[data-testid=\"resend-button\"]')).toBeVisible()\n    })\n\n    test('should resend verification email', async ({ page }) => {\n      await page.goto('/verify-email')\n\n      await page.click('[data-testid=\"resend-button\"]')\n\n      await expect(page.locator('text=Verification email sent')).toBeVisible()\n      await expect(page.locator('[data-testid=\"resend-button\"]')).toBeDisabled({ timeout: 30000 })\n    })\n  })\n\n  test.describe('Session Management', () => {\n    test('should handle session expiry', async ({ page }) => {\n      // Login first\n      await page.click('[data-testid=\"login-button\"]')\n      await page.fill('[data-testid=\"email-input\"]', 'demo@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'DemoPassword123!')\n      await page.click('[data-testid=\"submit-button\"]')\n      await expect(page).toHaveURL(/.*dashboard/)\n\n      // Simulate session expiry by clearing storage\n      await page.evaluate(() => {\n        localStorage.clear()\n        sessionStorage.clear()\n      })\n\n      // Try to access protected resource\n      await page.reload()\n\n      // Should redirect to login\n      await expect(page).toHaveURL(/.*login/)\n      await expect(page.locator('text=Session expired')).toBeVisible()\n    })\n\n    test('should extend session on activity', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n      await page.fill('[data-testid=\"email-input\"]', 'demo@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'DemoPassword123!')\n      await page.click('[data-testid=\"submit-button\"]')\n      await expect(page).toHaveURL(/.*dashboard/)\n\n      // Simulate user activity\n      await page.click('[data-testid=\"profile-menu\"]')\n      await page.click('[data-testid=\"dashboard-link\"]')\n\n      // Session should remain active\n      await expect(page).toHaveURL(/.*dashboard/)\n      await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible()\n    })\n  })\n\n  test.describe('Logout Flow', () => {\n    test('should complete logout successfully', async ({ page }) => {\n      // Login first\n      await page.click('[data-testid=\"login-button\"]')\n      await page.fill('[data-testid=\"email-input\"]', 'demo@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'DemoPassword123!')\n      await page.click('[data-testid=\"submit-button\"]')\n      await expect(page).toHaveURL(/.*dashboard/)\n\n      // Logout\n      await page.click('[data-testid=\"user-menu\"]')\n      await page.click('[data-testid=\"logout-button\"]')\n\n      // Should redirect to home page\n      await expect(page).toHaveURL('/')\n      await expect(page.locator('[data-testid=\"login-button\"]')).toBeVisible()\n\n      // Verify user cannot access protected routes\n      await page.goto('/dashboard')\n      await expect(page).toHaveURL(/.*login/)\n    })\n\n    test('should clear sensitive data on logout', async ({ page }) => {\n      // Login and logout\n      await page.click('[data-testid=\"login-button\"]')\n      await page.fill('[data-testid=\"email-input\"]', 'demo@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'DemoPassword123!')\n      await page.click('[data-testid=\"submit-button\"]')\n      await page.click('[data-testid=\"user-menu\"]')\n      await page.click('[data-testid=\"logout-button\"]')\n\n      // Check that sensitive data is cleared\n      const localStorage = await page.evaluate(() => {\n        return {\n          token: localStorage.getItem('token'),\n          user: localStorage.getItem('user'),\n        }\n      })\n\n      expect(localStorage.token).toBeNull()\n      expect(localStorage.user).toBeNull()\n    })\n  })\n\n  test.describe('Multi-tab Session Handling', () => {\n    test('should sync logout across tabs', async ({ browser }) => {\n      const context = await browser.newContext()\n      const page1 = await context.newPage()\n      const page2 = await context.newPage()\n\n      // Login in first tab\n      await page1.goto('/')\n      await page1.click('[data-testid=\"login-button\"]')\n      await page1.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page1.fill('[data-testid=\"password-input\"]', 'SecurePassword123!')\n      await page1.click('[data-testid=\"submit-button\"]')\n      await expect(page1).toHaveURL(/.*dashboard/)\n\n      // Navigate to dashboard in second tab\n      await page2.goto('/dashboard')\n      await expect(page2).toHaveURL(/.*dashboard/)\n\n      // Logout from first tab\n      await page1.click('[data-testid=\"user-menu\"]')\n      await page1.click('[data-testid=\"logout-button\"]')\n\n      // Second tab should also be logged out\n      await page2.reload()\n      await expect(page2).toHaveURL(/.*login/)\n\n      await context.close()\n    })\n\n    test('should handle concurrent login attempts', async ({ browser }) => {\n      const context = await browser.newContext()\n      const page1 = await context.newPage()\n      const page2 = await context.newPage()\n\n      // Attempt login in both tabs simultaneously\n      await Promise.all([\n        (async () => {\n          await page1.goto('/')\n          await page1.click('[data-testid=\"login-button\"]')\n          await page1.fill('[data-testid=\"email-input\"]', 'test@example.com')\n          await page1.fill('[data-testid=\"password-input\"]', 'SecurePassword123!')\n          await page1.click('[data-testid=\"submit-button\"]')\n        })(),\n        (async () => {\n          await page2.goto('/')\n          await page2.click('[data-testid=\"login-button\"]')\n          await page2.fill('[data-testid=\"email-input\"]', 'test@example.com')\n          await page2.fill('[data-testid=\"password-input\"]', 'SecurePassword123!')\n          await page2.click('[data-testid=\"submit-button\"]')\n        })(),\n      ])\n\n      // Both tabs should end up at dashboard\n      await expect(page1).toHaveURL(/.*dashboard/)\n      await expect(page2).toHaveURL(/.*dashboard/)\n\n      await context.close()\n    })\n  })\n\n  test.describe('Security Features', () => {\n    test('should prevent CSRF attacks', async ({ page }) => {\n      // This would test CSRF protection mechanisms\n      // Implementation depends on your CSRF protection strategy\n      expect(true).toBe(true) // Placeholder\n    })\n\n    test('should handle rate limiting gracefully', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n\n      // Attempt multiple rapid login attempts\n      for (let i = 0; i < 10; i++) {\n        await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n        await page.fill('[data-testid=\"password-input\"]', 'wrongpassword')\n        await page.click('[data-testid=\"submit-button\"]')\n\n        // Wait for response\n        await page.waitForTimeout(100)\n      }\n\n      // Should show rate limit message\n      await expect(page.locator('text=Too many requests')).toBeVisible()\n      await expect(page.locator('[data-testid=\"submit-button\"]')).toBeDisabled()\n    })\n\n    test('should sanitize user input', async ({ page }) => {\n      await page.click('[data-testid=\"login-button\"]')\n\n      // Try XSS payload\n      await page.fill('[data-testid=\"email-input\"]', '<script>alert(\"xss\")</script>')\n      await page.fill('[data-testid=\"password-input\"]', 'password')\n      await page.click('[data-testid=\"submit-button\"]')\n\n      // Should not execute script\n      const alerts = []\n      page.on('dialog', dialog => {\n        alerts.push(dialog.message())\n        dialog.accept()\n      })\n\n      await page.waitForTimeout(1000)\n      expect(alerts).toHaveLength(0)\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/auth.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/dashboard.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/enhanced-auth-flow.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/fixtures.ts","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"use\" is called in function \"page\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":15,"column":11,"nodeType":"Identifier","endLine":15,"endColumn":14},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"use\" is called in function \"evidenceCollector\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":44,"column":11,"nodeType":"Identifier","endLine":44,"endColumn":14}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs'\nimport path from 'path'\n\nimport { test as base, expect } from '@playwright/test'\n\nimport { EvidenceCollector, withEvidenceCollection } from './utils/evidence-collector'\n\n// Extended Playwright test that captures Istanbul coverage and enhanced evidence\ninterface MyFixtures {\n  evidenceCollector: EvidenceCollector\n}\n\nexport const test = base.extend<MyFixtures>({\n  page: async ({ page }, use, testInfo) => {\n    await use(page)\n\n    try {\n      // Try to read window.__coverage__ from the page\n      const coverage = await page.evaluate(() => {\n        const g = globalThis as Record<string, unknown>\n        const c = g.__coverage__\n        return (c && typeof c === 'object') ? (c as Record<string, unknown>) : null\n      })\n      if (coverage) {\n        const outDir = path.join(process.cwd(), 'coverage', '.nyc_output')\n        fs.mkdirSync(outDir, { recursive: true })\n        const filenameSafe = testInfo.titlePath.join(' - ').replace(/[^a-z0-9-_\\s]/gi, '_').replace(/\\s+/g, '_')\n        const filePath = path.join(outDir, `playwright-coverage-${filenameSafe}.json`)\n        fs.writeFileSync(filePath, JSON.stringify(coverage))\n      }\n    } catch {\n      // Ignore coverage capture errors to not fail tests\n    }\n  },\n\n  evidenceCollector: async ({ page }, use, testInfo) => {\n    // Set up enhanced evidence collection\n    const collector = await withEvidenceCollection(page, testInfo)\n\n    // Take initial screenshot\n    await collector.takeStepScreenshot('test-start', { fullPage: true })\n\n    // Provide collector to test\n    await use(collector)\n\n    // Generate final evidence report\n    try {\n      await collector.takeStepScreenshot('test-end', { fullPage: true })\n      await collector.generateEvidenceReport()\n    } catch (error) {\n      console.warn('Failed to generate evidence report:', error)\n    }\n  },\n})\n\nexport { expect }\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/login-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/navigation-verification.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/organizations.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/payments.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":8,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .goto on an `any` value.","line":8,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":11,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":11,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .waitForFunction on an `any` value.","line":11,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":11,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":12,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":12,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[496,499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[496,499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .__REDUX_STORE__ on an `any` value.","line":12,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":12,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":14,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":14,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":14,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getState on an `any` value.","line":14,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":15,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":15,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":19,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .goto on an `any` value.","line":19,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":22,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":22,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .waitForLoadState on an `any` value.","line":22,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":32}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from './fixtures'\nimport { mockJsonRoute, createTestOrganization, fulfillJson } from './utils/test-utils'\n\ntest.describe('Payments', () => {\n  // Helper function to navigate with authentication\n  const navigateWithAuth = async (page, path: string) => {\n    // Navigate to root first to trigger authentication\n    await page.goto('/')\n\n    // Wait for authentication to complete by checking Redux state\n    await page.waitForFunction(() => {\n      const store = (window as any).__REDUX_STORE__\n      if (!store) return false\n      const state = store.getState()\n      return state.auth?.isAuthenticated === true && state.auth?.user != null\n    }, { timeout: 10000 })\n\n    // Now navigate to the target page\n    await page.goto(path)\n\n    // Wait for the page to load\n    await page.waitForLoadState('networkidle')\n  }\n\n  test.beforeEach(async ({ page }) => {\n    const organizationId = '987fcdeb-51d2-43a1-b456-426614174000'\n\n    // Mock authentication\n    await mockJsonRoute(page, '/api/v1/auth/session', {\n      success: true,\n      data: {\n        user: {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          email: 'test@example.com',\n          firstName: 'Test',\n          lastName: 'User',\n          role: 'USER',\n          emailVerified: true,\n          organizationId,\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n          lastLoginAt: '2024-01-01T10:00:00Z',\n        },\n        session: {\n          activeTokens: 1,\n          lastActiveAt: '2024-01-01T10:00:00Z',\n          createdAt: '2024-01-01T00:00:00Z',\n        },\n      },\n      timestamp: '2024-01-01T10:00:00Z',\n    })\n\n    // Mock user organizations\n    await mockJsonRoute(page, '/api/v1/organizations/user', {\n      success: true,\n      data: {\n        items: [\n          {\n            ...createTestOrganization({\n              id: organizationId,\n              name: 'Test Organization',\n            }),\n            plan: 'PRO',\n            billingEmail: 'billing@example.com',\n            maxUsers: 50,\n            currentUsers: 1,\n          },\n        ],\n      },\n      timestamp: '2024-01-01T10:00:00Z',\n    })\n\n    // Mock payment statistics\n    await mockJsonRoute(page, `/api/v1/organizations/${organizationId}/payments/statistics`, {\n      totalSuccessfulPayments: 15,\n      totalAmount: 3750.00,\n      recentAmount: 1250.00,\n    })\n\n    // Mock payments list\n    await mockJsonRoute(page, `/api/v1/organizations/${organizationId}/payments`, [\n      {\n        id: 'payment-1',\n        amount: 299.00,\n        currency: 'usd',\n        status: 'SUCCEEDED',\n        description: 'Pro Plan Subscription',\n        stripePaymentIntentId: 'pi_1234567890abcdef1234567890',\n        createdAt: '2024-01-15T10:30:00Z',\n      },\n      {\n        id: 'payment-2',\n        amount: 99.00,\n        currency: 'usd',\n        status: 'SUCCEEDED',\n        description: 'Basic Plan Subscription',\n        stripePaymentIntentId: 'pi_0987654321fedcba0987654321',\n        createdAt: '2024-01-01T09:15:00Z',\n      },\n      {\n        id: 'payment-3',\n        amount: 199.00,\n        currency: 'usd',\n        status: 'FAILED',\n        description: 'Standard Plan Subscription',\n        stripePaymentIntentId: 'pi_failed123456789012345678901234',\n        createdAt: '2023-12-28T14:20:00Z',\n      },\n    ])\n\n    // Mock payment methods\n    await mockJsonRoute(page, `/api/v1/organizations/${organizationId}/payment-methods`, [\n      {\n        id: 'pm-123',\n        displayName: 'Visa ending in 4242',\n        isDefault: true,\n        cardDetails: {\n          brand: 'visa',\n          lastFour: '4242',\n          expMonth: 12,\n          expYear: 2025,\n        },\n        billingDetails: {\n          email: 'test@example.com',\n        },\n      },\n      {\n        id: 'pm-456',\n        displayName: 'Mastercard ending in 5555',\n        isDefault: false,\n        cardDetails: {\n          brand: 'mastercard',\n          lastFour: '5555',\n          expMonth: 8,\n          expYear: 2026,\n        },\n        billingDetails: {\n          email: 'test@example.com',\n        },\n      },\n    ])\n  })\n\n  test('should display payments page', async ({ page }) => {\n    await navigateWithAuth(page, '/payments')\n\n    // Check page header\n    await expect(page.getByRole('heading', { name: 'Payments' })).toBeVisible()\n    await expect(page.getByText('View your payment history and manage payment methods.')).toBeVisible()\n\n    // Check payment methods button\n    await expect(page.getByRole('button', { name: 'Payment Methods' })).toBeVisible()\n  })\n\n  test('should display payment statistics', async ({ page }) => {\n    await navigateWithAuth(page, '/payments')\n\n    // Check statistics cards\n    await expect(page.getByText('Total Payments')).toBeVisible()\n    await expect(page.getByText('15')).toBeVisible()\n\n    await expect(page.getByText('Total Amount')).toBeVisible()\n    await expect(page.getByText('$3,750.00')).toBeVisible()\n\n    await expect(page.getByText('Recent (30 days)')).toBeVisible()\n    await expect(page.getByText('$1,250.00')).toBeVisible()\n  })\n\n  test('should display payment history', async ({ page }) => {\n    await navigateWithAuth(page, '/payments')\n\n    // Check payment history section\n    await expect(page.getByText('Payment History')).toBeVisible()\n\n    // Check table headers\n    await expect(page.getByText('Date')).toBeVisible()\n    await expect(page.getByText('Description')).toBeVisible()\n    await expect(page.getByText('Amount')).toBeVisible()\n    await expect(page.getByText('Status')).toBeVisible()\n    await expect(page.getByText('Payment ID')).toBeVisible()\n\n    // Check payment entries\n    await expect(page.getByText('Pro Plan Subscription')).toBeVisible()\n    await expect(page.getByText('$299.00 USD')).toBeVisible()\n    await expect(page.getByText('SUCCEEDED')).toBeVisible()\n\n    await expect(page.getByText('Basic Plan Subscription')).toBeVisible()\n    await expect(page.getByText('$99.00 USD')).toBeVisible()\n\n    await expect(page.getByText('Standard Plan Subscription')).toBeVisible()\n    await expect(page.getByText('$199.00 USD')).toBeVisible()\n    await expect(page.getByText('FAILED')).toBeVisible()\n  })\n\n  test('should open payment methods modal', async ({ page }) => {\n    await navigateWithAuth(page, '/payments')\n\n    // Click payment methods button\n    await page.getByRole('button', { name: 'Payment Methods' }).click()\n\n    // Should open modal\n    await expect(page.getByRole('dialog')).toBeVisible()\n    await expect(page.getByText('Payment Methods')).toBeVisible()\n    await expect(page.getByText('Manage your payment methods for subscriptions and purchases.')).toBeVisible()\n  })\n\n  test('should display payment methods in modal', async ({ page }) => {\n    await navigateWithAuth(page, '/payments')\n\n    // Open payment methods modal\n    await page.getByRole('button', { name: 'Payment Methods' }).click()\n\n    // Check payment methods are displayed\n    await expect(page.getByText('Visa ending in 4242')).toBeVisible()\n    await expect(page.getByText('visa •••• 4242')).toBeVisible()\n    await expect(page.getByText('(Expires 12/2025)')).toBeVisible()\n\n    await expect(page.getByText('Mastercard ending in 5555')).toBeVisible()\n    await expect(page.getByText('mastercard •••• 5555')).toBeVisible()\n    await expect(page.getByText('(Expires 8/2026)')).toBeVisible()\n\n    // Check default badge\n    await expect(page.getByText('Default')).toBeVisible()\n\n    // Check set as default button for non-default card\n    await expect(page.getByRole('button', { name: 'Set as default' })).toBeVisible()\n  })\n\n  test('should set default payment method', async ({ page }) => {\n    // Mock set default payment method API\n    await page.route(\n      '/api/v1/organizations/987fcdeb-51d2-43a1-b456-426614174000/payment-methods/pm-456/set-default',\n      async (route) => {\n        await fulfillJson(route, { success: true })\n      }\n    )\n\n    await navigateWithAuth(page, '/payments')\n\n    // Open payment methods modal\n    await page.getByRole('button', { name: 'Payment Methods' }).click()\n\n    // Click set as default for second payment method\n    await page.getByRole('button', { name: 'Set as default' }).click()\n\n    // Should show success message (we would need to check for toast notification)\n    // In a real test, we would also verify the UI updates to show the new default\n  })\n\n  test('should remove payment method', async ({ page }) => {\n    // Mock remove payment method API\n    await page.route(\n      '/api/v1/organizations/987fcdeb-51d2-43a1-b456-426614174000/payment-methods/pm-456/detach',\n      async (route) => {\n        await fulfillJson(route, { success: true })\n      }\n    )\n\n    await navigateWithAuth(page, '/payments')\n\n    // Open payment methods modal\n    await page.getByRole('button', { name: 'Payment Methods' }).click()\n\n    // Mock window.confirm\n    await page.evaluate(() => {\n      window.confirm = () => true\n    })\n\n    // Click remove button for non-default payment method\n    await page.getByRole('button', { name: 'Remove' }).click()\n\n    // Should show success message and remove the payment method from the list\n  })\n\n  test('should handle add payment method', async ({ page }) => {\n    await navigateWithAuth(page, '/payments')\n\n    // Open payment methods modal\n    await page.getByRole('button', { name: 'Payment Methods' }).click()\n\n    // Click add payment method button\n    await page.getByRole('button', { name: 'Add Payment Method' }).click()\n\n    // Should show info message about Stripe integration\n    // In a real implementation, this would open Stripe's payment method setup\n  })\n\n  test('should handle empty payment methods state', async ({ page }) => {\n    // Mock empty payment methods response\n    await page.route('/api/v1/organizations/987fcdeb-51d2-43a1-b456-426614174000/payment-methods', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify([]),\n      })\n    })\n\n    await navigateWithAuth(page, '/payments')\n\n    // Open payment methods modal\n    await page.getByRole('button', { name: 'Payment Methods' }).click()\n\n    // Should show empty state\n    await expect(page.getByText('No payment methods')).toBeVisible()\n    await expect(page.getByText('Add a payment method to start making payments.')).toBeVisible()\n  })\n\n  test('should handle empty payments state', async ({ page }) => {\n    // Mock empty payments response\n    await page.route('/api/v1/organizations/987fcdeb-51d2-43a1-b456-426614174000/payments', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify([]),\n      })\n    })\n\n    await navigateWithAuth(page, '/payments')\n\n    // Should show empty state\n    await expect(page.getByText('No payments yet')).toBeVisible()\n    await expect(page.getByText('Your payment history will appear here once you make a payment.')).toBeVisible()\n  })\n\n  test('should close payment methods modal', async ({ page }) => {\n    await navigateWithAuth(page, '/payments')\n\n    // Open payment methods modal\n    await page.getByRole('button', { name: 'Payment Methods' }).click()\n\n    // Modal should be visible\n    await expect(page.getByRole('dialog')).toBeVisible()\n\n    // Close modal by clicking X button\n    await page.getByRole('button', { name: 'Close' }).click()\n\n    // Modal should be hidden\n    await expect(page.getByRole('dialog')).not.toBeVisible()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/settings.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":45,"nodeType":"Property","messageId":"anyAssignment","endLine":42,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":42,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .preferences on an `any` value.","line":43,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .preferences on an `any` value.","line":68,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":38}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from './fixtures'\nimport {\n  loginAsUser,\n  waitForToast,\n  fulfillJson,\n  createTestUser,\n} from './utils/test-utils'\n\ntest.describe('Settings', () => {\n  test.beforeEach(async ({ page }) => {\n    // Mock auth/session and orgs to be logged in\n    await loginAsUser(page, {\n      id: 'user-123',\n      name: 'Test User',\n      email: 'test@example.com',\n    })\n\n    // Mock current user profile\n    await page.route('**/api/v1/users/me', async (route) => {\n      await fulfillJson(route, {\n        ...createTestUser({ id: 'user-123', name: 'Test User' }),\n        preferences: {\n          timezone: 'UTC',\n          language: 'en',\n          notifications: { email: true, push: true, sms: false },\n        },\n      })\n    })\n\n    await page.goto('/settings')\n    await expect(page.getByRole('heading', { name: 'Settings' })).toBeVisible()\n  })\n\n  test('should edit and save profile information', async ({ page }) => {\n    // Ensure Profile tab is active\n    await expect(page.getByRole('button', { name: /Profile/i })).toHaveClass(/border-primary-500/)\n\n    // Mock update profile API\n    await page.route('**/api/v1/users/me/profile', async (route) => {\n      const body = await route.request().postDataJSON()\n      await fulfillJson(route, {\n        ...createTestUser({ id: 'user-123', name: body.name }),\n        preferences: body.preferences,\n      })\n    })\n\n    // Update fields\n    await page.fill('input[placeholder=\"Your full name\"]', 'QA User')\n    await page.selectOption('select[name=\"timezone\"]', 'Europe/Paris')\n    await page.selectOption('select[name=\"language\"]', 'fr')\n\n    // Save\n    await page.getByRole('button', { name: 'Save Changes' }).click()\n\n    await waitForToast(page, 'Profile updated successfully')\n  })\n\n  test('should update notification preferences', async ({ page }) => {\n    // Go to Notifications tab\n    await page.getByRole('button', { name: /Notifications/i }).click()\n    await expect(page.getByText('Notification Preferences')).toBeVisible()\n\n    // Mock preferences update\n    await page.route('**/api/v1/users/me/profile', async (route) => {\n      const body = await route.request().postDataJSON()\n      await fulfillJson(route, {\n        ...createTestUser({ id: 'user-123', name: 'Test User' }),\n        preferences: body.preferences,\n      })\n    })\n\n    // Toggle checkboxes by order (email, push, sms)\n    const checkboxes = page.locator('input[type=\"checkbox\"]')\n    await checkboxes.nth(0).check() // email\n    await checkboxes.nth(1).uncheck() // push\n    await checkboxes.nth(2).check() // sms\n\n    // Save\n    await page.getByRole('button', { name: 'Save Changes' }).click()\n    await waitForToast(page, 'Profile updated successfully')\n  })\n\n  test('should show security controls', async ({ page }) => {\n    await page.getByRole('button', { name: /Security/i }).click()\n    await expect(page.getByText('Security Settings')).toBeVisible()\n    await expect(page.getByText('OAuth Authentication')).toBeVisible()\n    await expect(page.getByText('Two-Factor Authentication')).toBeVisible()\n\n    // Button should be clickable\n    await page.getByRole('button', { name: 'Enable' }).click()\n  })\n\n  test('should show account management actions', async ({ page }) => {\n    await page.getByRole('button', { name: /Account/i }).click()\n    await expect(page.getByText('Account Management')).toBeVisible()\n    await expect(page.getByRole('button', { name: 'Export Data' })).toBeVisible()\n    await expect(page.getByRole('button', { name: 'Delete' })).toBeVisible()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/subscription.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/test-app-flow.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/user-journey.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/utils/enhanced-reporter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'suite' is defined but never used.","line":17,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":173,"column":106,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":173,"endColumn":108,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7942,7944],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":228,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":256,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":256,"endColumn":69},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":317,"column":122,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":317,"endColumn":124,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14912,14914],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":321,"column":120,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":321,"endColumn":122,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15238,15240],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":369,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":369,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17227,17229],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs/promises'\nimport path from 'path'\n\nimport { FullConfig, FullResult, Reporter, Suite, TestCase, TestResult } from '@playwright/test/reporter'\n\n/**\n * Enhanced Playwright Reporter\n * Generates comprehensive HTML reports with evidence gallery,\n * performance analytics, and failure analysis\n */\nexport class EnhancedEvidenceReporter implements Reporter {\n  private config: FullConfig | undefined\n  private results: TestResult[] = []\n  private testCases: TestCase[] = []\n  private startTime = 0\n\n  onBegin(config: FullConfig, suite: Suite) {\n    this.config = config\n    this.startTime = Date.now()\n    console.log('🎬 Starting enhanced evidence collection...')\n  }\n\n  onTestBegin(test: TestCase) {\n    this.testCases.push(test)\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    this.results.push(result)\n  }\n\n  async onEnd(result: FullResult) {\n    const endTime = Date.now()\n    const duration = endTime - this.startTime\n\n    console.log('📊 Generating enhanced evidence report...')\n\n    try {\n      // Generate comprehensive evidence report\n      await this.generateEnhancedReport({\n        config: this.config!,\n        results: this.results,\n        testCases: this.testCases,\n        summary: {\n          duration,\n          totalTests: this.results.length,\n          passed: this.results.filter(r => r.status === 'passed').length,\n          failed: this.results.filter(r => r.status === 'failed').length,\n          skipped: this.results.filter(r => r.status === 'skipped').length,\n          flaky: this.results.filter(r => r.status === 'flaky').length,\n        },\n        fullResult: result,\n      })\n\n      console.log('✅ Enhanced evidence report generated successfully')\n    } catch (error) {\n      console.error('❌ Failed to generate enhanced evidence report:', error)\n    }\n  }\n\n  private async generateEnhancedReport(data: EnhancedReportData) {\n    const reportDir = path.join(this.config!.projects[0].outputDir, '..', 'enhanced-report')\n    await fs.mkdir(reportDir, { recursive: true })\n\n    // Generate main HTML report\n    await this.generateMainReport(reportDir, data)\n\n    // Generate evidence gallery\n    await this.generateEvidenceGallery(reportDir, data)\n\n    // Generate performance dashboard\n    await this.generatePerformanceDashboard(reportDir, data)\n\n    // Generate failure analysis\n    await this.generateFailureAnalysis(reportDir, data)\n\n    // Copy assets\n    await this.copyAssets(reportDir)\n  }\n\n  private async generateMainReport(reportDir: string, data: EnhancedReportData) {\n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Enhanced E2E Test Report</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism-tomorrow.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js\"></script>\n</head>\n<body class=\"bg-gray-50\">\n    <div class=\"min-h-screen\">\n        <!-- Header -->\n        <header class=\"bg-white shadow-sm border-b\">\n            <div class=\"max-w-7xl mx-auto px-4 py-4\">\n                <div class=\"flex items-center justify-between\">\n                    <div>\n                        <h1 class=\"text-2xl font-bold text-gray-900\">Enhanced E2E Test Report</h1>\n                        <p class=\"text-gray-600\">Generated on ${new Date().toISOString()}</p>\n                    </div>\n                    <div class=\"flex space-x-4\">\n                        <div class=\"text-center\">\n                            <div class=\"text-2xl font-bold text-green-600\">${data.summary.passed}</div>\n                            <div class=\"text-sm text-gray-600\">Passed</div>\n                        </div>\n                        <div class=\"text-center\">\n                            <div class=\"text-2xl font-bold text-red-600\">${data.summary.failed}</div>\n                            <div class=\"text-sm text-gray-600\">Failed</div>\n                        </div>\n                        <div class=\"text-center\">\n                            <div class=\"text-2xl font-bold text-yellow-600\">${data.summary.flaky}</div>\n                            <div class=\"text-sm text-gray-600\">Flaky</div>\n                        </div>\n                        <div class=\"text-center\">\n                            <div class=\"text-2xl font-bold text-gray-600\">${data.summary.skipped}</div>\n                            <div class=\"text-sm text-gray-600\">Skipped</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </header>\n\n        <!-- Navigation -->\n        <nav class=\"bg-white border-b\">\n            <div class=\"max-w-7xl mx-auto px-4\">\n                <div class=\"flex space-x-8\">\n                    <a href=\"index.html\" class=\"border-b-2 border-blue-500 py-2 px-1 text-blue-600 font-medium\">Overview</a>\n                    <a href=\"evidence-gallery.html\" class=\"py-2 px-1 text-gray-600 hover:text-gray-900\">Evidence Gallery</a>\n                    <a href=\"performance.html\" class=\"py-2 px-1 text-gray-600 hover:text-gray-900\">Performance</a>\n                    <a href=\"failures.html\" class=\"py-2 px-1 text-gray-600 hover:text-gray-900\">Failure Analysis</a>\n                </div>\n            </div>\n        </nav>\n\n        <!-- Main Content -->\n        <main class=\"max-w-7xl mx-auto px-4 py-8\">\n            <!-- Summary Stats -->\n            <div class=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n                <div class=\"bg-white rounded-lg shadow p-6\">\n                    <div class=\"flex items-center justify-between\">\n                        <div>\n                            <p class=\"text-sm font-medium text-gray-600\">Total Duration</p>\n                            <p class=\"text-2xl font-bold text-gray-900\">${Math.round(data.summary.duration / 1000)}s</p>\n                        </div>\n                        <div class=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <svg class=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clip-rule=\"evenodd\"></path>\n                            </svg>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"bg-white rounded-lg shadow p-6\">\n                    <div class=\"flex items-center justify-between\">\n                        <div>\n                            <p class=\"text-sm font-medium text-gray-600\">Success Rate</p>\n                            <p class=\"text-2xl font-bold text-green-600\">${Math.round((data.summary.passed / data.summary.totalTests) * 100)}%</p>\n                        </div>\n                        <div class=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                            <svg class=\"w-4 h-4 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\"></path>\n                            </svg>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"bg-white rounded-lg shadow p-6\">\n                    <div class=\"flex items-center justify-between\">\n                        <div>\n                            <p class=\"text-sm font-medium text-gray-600\">Browser Coverage</p>\n                            <p class=\"text-2xl font-bold text-purple-600\">${this.config?.projects.length || 0}</p>\n                        </div>\n                        <div class=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                            <svg class=\"w-4 h-4 text-purple-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fill-rule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm0 4a1 1 0 011-1h12a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1V8z\" clip-rule=\"evenodd\"></path>\n                            </svg>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"bg-white rounded-lg shadow p-6\">\n                    <div class=\"flex items-center justify-between\">\n                        <div>\n                            <p class=\"text-sm font-medium text-gray-600\">Evidence Items</p>\n                            <p class=\"text-2xl font-bold text-indigo-600\">${this.countEvidenceItems(data)}</p>\n                        </div>\n                        <div class=\"w-8 h-8 bg-indigo-100 rounded-full flex items-center justify-center\">\n                            <svg class=\"w-4 h-4 text-indigo-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fill-rule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clip-rule=\"evenodd\"></path>\n                            </svg>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Test Results -->\n            <div class=\"bg-white rounded-lg shadow mb-8\">\n                <div class=\"px-6 py-4 border-b border-gray-200\">\n                    <h2 class=\"text-lg font-semibold text-gray-900\">Test Results</h2>\n                </div>\n                <div class=\"overflow-x-auto\">\n                    <table class=\"min-w-full divide-y divide-gray-200\">\n                        <thead class=\"bg-gray-50\">\n                            <tr>\n                                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Test</th>\n                                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Duration</th>\n                                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Browser</th>\n                                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Evidence</th>\n                            </tr>\n                        </thead>\n                        <tbody class=\"bg-white divide-y divide-gray-200\">\n                            ${this.generateTestRowsHtml(data)}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </main>\n    </div>\n</body>\n</html>`\n\n    await fs.writeFile(path.join(reportDir, 'index.html'), html)\n  }\n\n  private async generateEvidenceGallery(reportDir: string, data: EnhancedReportData) {\n    // Implementation for evidence gallery\n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Evidence Gallery - Enhanced E2E Test Report</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-gray-50\">\n    <!-- Evidence gallery implementation -->\n    <div class=\"min-h-screen\">\n        <h1 class=\"text-3xl font-bold text-center py-8\">Evidence Gallery</h1>\n        <div class=\"max-w-7xl mx-auto px-4\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <!-- Evidence items will be populated here -->\n                <p class=\"text-gray-600 text-center col-span-full\">Evidence gallery will show screenshots, videos, and network traces from test executions.</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>`\n\n    await fs.writeFile(path.join(reportDir, 'evidence-gallery.html'), html)\n  }\n\n  private async generatePerformanceDashboard(reportDir: string, data: EnhancedReportData) {\n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Performance Dashboard - Enhanced E2E Test Report</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body class=\"bg-gray-50\">\n    <div class=\"min-h-screen\">\n        <h1 class=\"text-3xl font-bold text-center py-8\">Performance Dashboard</h1>\n        <div class=\"max-w-7xl mx-auto px-4\">\n            <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                <div class=\"bg-white p-6 rounded-lg shadow\">\n                    <h2 class=\"text-xl font-semibold mb-4\">Load Times</h2>\n                    <canvas id=\"loadTimeChart\"></canvas>\n                </div>\n                <div class=\"bg-white p-6 rounded-lg shadow\">\n                    <h2 class=\"text-xl font-semibold mb-4\">Network Requests</h2>\n                    <canvas id=\"networkChart\"></canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script>\n        // Chart implementations would go here\n        console.log('Performance dashboard loaded');\n    </script>\n</body>\n</html>`\n\n    await fs.writeFile(path.join(reportDir, 'performance.html'), html)\n  }\n\n  private async generateFailureAnalysis(reportDir: string, data: EnhancedReportData) {\n    const failedTests = data.results.filter(r => r.status === 'failed')\n\n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Failure Analysis - Enhanced E2E Test Report</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-gray-50\">\n    <div class=\"min-h-screen\">\n        <h1 class=\"text-3xl font-bold text-center py-8\">Failure Analysis</h1>\n        <div class=\"max-w-7xl mx-auto px-4\">\n            ${failedTests.length > 0 ? `\n                <div class=\"space-y-6\">\n                    ${failedTests.map((result, index) => `\n                        <div class=\"bg-white rounded-lg shadow p-6\">\n                            <h2 class=\"text-xl font-semibold text-red-600 mb-4\">Failed Test ${index + 1}</h2>\n                            <div class=\"space-y-4\">\n                                <div>\n                                    <h3 class=\"font-medium text-gray-900\">Error Details</h3>\n                                    <pre class=\"bg-gray-100 p-4 rounded text-sm overflow-x-auto\">${result.error?.message || 'No error message available'}</pre>\n                                </div>\n                                <div>\n                                    <h3 class=\"font-medium text-gray-900\">Stack Trace</h3>\n                                    <pre class=\"bg-gray-100 p-4 rounded text-sm overflow-x-auto\">${result.error?.stack || 'No stack trace available'}</pre>\n                                </div>\n                            </div>\n                        </div>\n                    `).join('')}\n                </div>\n            ` : `\n                <div class=\"text-center\">\n                    <div class=\"text-green-600 text-6xl mb-4\">✅</div>\n                    <h2 class=\"text-2xl font-semibold text-gray-900 mb-2\">All Tests Passed!</h2>\n                    <p class=\"text-gray-600\">No failures to analyze.</p>\n                </div>\n            `}\n        </div>\n    </div>\n</body>\n</html>`\n\n    await fs.writeFile(path.join(reportDir, 'failures.html'), html)\n  }\n\n  private async copyAssets(reportDir: string) {\n    // Copy any additional assets needed for the report\n    const assetsDir = path.join(reportDir, 'assets')\n    await fs.mkdir(assetsDir, { recursive: true })\n  }\n\n  private generateTestRowsHtml(data: EnhancedReportData): string {\n    return data.results.map((result, index) => {\n      const testCase = data.testCases[index]\n      const statusColor = this.getStatusColor(result.status)\n      const statusIcon = this.getStatusIcon(result.status)\n\n      return `\n        <tr>\n            <td class=\"px-6 py-4 whitespace-nowrap\">\n                <div class=\"text-sm font-medium text-gray-900\">${testCase?.title || 'Unknown Test'}</div>\n                <div class=\"text-sm text-gray-500\">${testCase?.location?.file || 'Unknown File'}</div>\n            </td>\n            <td class=\"px-6 py-4 whitespace-nowrap\">\n                <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColor}\">\n                    ${statusIcon} ${result.status}\n                </span>\n            </td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                ${Math.round(result.duration)}ms\n            </td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                ${testCase?.parent?.project()?.name || 'Unknown'}\n            </td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-blue-600\">\n                <a href=\"#\" class=\"hover:text-blue-900\">View Evidence</a>\n            </td>\n        </tr>`\n    }).join('')\n  }\n\n  private getStatusColor(status: string): string {\n    switch (status) {\n      case 'passed': return 'bg-green-100 text-green-800'\n      case 'failed': return 'bg-red-100 text-red-800'\n      case 'skipped': return 'bg-gray-100 text-gray-800'\n      case 'flaky': return 'bg-yellow-100 text-yellow-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  private getStatusIcon(status: string): string {\n    switch (status) {\n      case 'passed': return '✅'\n      case 'failed': return '❌'\n      case 'skipped': return '⏭️'\n      case 'flaky': return '🔄'\n      default: return '❓'\n    }\n  }\n\n  private countEvidenceItems(data: EnhancedReportData): number {\n    // This would count actual evidence items from test results\n    return data.results.reduce((count, result) => {\n      return count + (result.attachments?.length || 0)\n    }, 0)\n  }\n}\n\ninterface EnhancedReportData {\n  config: FullConfig\n  results: TestResult[]\n  testCases: TestCase[]\n  summary: {\n    duration: number\n    totalTests: number\n    passed: number\n    failed: number\n    skipped: number\n    flaky: number\n  }\n  fullResult: FullResult\n}\n\nexport default EnhancedEvidenceReporter","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/utils/evidence-collector.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":24,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[705,705],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[705,705],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'setupCollectors' has no 'await' expression.","line":30,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":30,"endColumn":32,"suggestions":[{"messageId":"removeAsync","fix":{"range":[787,793],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":38},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'arg' will use Object's default stringification format ('[object Object]') when stringified.","line":64,"column":37,"nodeType":"Identifier","messageId":"baseToString","endLine":64,"endColumn":40},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":75,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":75,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2199,2201],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":96,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":106,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":106,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3053,3055],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":161,"column":91,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":161,"endColumn":93,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4844,4846],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":162,"column":112,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":162,"endColumn":114,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4961,4963],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5053,5056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5053,5056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":165,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":166,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":166,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5101,5104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5101,5104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":166,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":167,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":167,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5162,5165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5162,5165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":167,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":168,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":168,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5224,5227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5224,5227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .memory on an `any` value.","line":168,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10032,10035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10032,10035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'withEvidenceCollection' has no 'await' expression.","line":373,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":373,"endColumn":45,"suggestions":[{"messageId":"removeAsync","fix":{"range":[10531,10537],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":377,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10719,10722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10719,10722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .evidence on an `any` value.","line":377,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":26}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import path from 'path'\nimport fs from 'fs/promises'\n\nimport { Page, TestInfo } from '@playwright/test'\n\n/**\n * Enhanced Evidence Collector for Playwright Tests\n * Provides comprehensive evidence collection including screenshots,\n * network logs, console logs, performance metrics, and more.\n */\nexport class EvidenceCollector {\n  private page: Page\n  private testInfo: TestInfo\n  private networkLogs: NetworkLog[] = []\n  private consoleLogs: ConsoleLog[] = []\n  private performanceMetrics: PerformanceMetric[] = []\n  private startTime: number\n  private stepCounter = 0\n\n  constructor(page: Page, testInfo: TestInfo) {\n    this.page = page\n    this.testInfo = testInfo\n    this.startTime = Date.now()\n    this.setupCollectors()\n  }\n\n  /**\n   * Set up evidence collectors\n   */\n  private async setupCollectors() {\n    // Network request/response logging\n    this.page.on('request', (request) => {\n      this.networkLogs.push({\n        timestamp: Date.now() - this.startTime,\n        type: 'request',\n        url: request.url(),\n        method: request.method(),\n        headers: request.headers(),\n        postData: request.postData(),\n        resourceType: request.resourceType(),\n      })\n    })\n\n    this.page.on('response', (response) => {\n      this.networkLogs.push({\n        timestamp: Date.now() - this.startTime,\n        type: 'response',\n        url: response.url(),\n        status: response.status(),\n        statusText: response.statusText(),\n        headers: response.headers(),\n        fromCache: response.fromCache(),\n        fromServiceWorker: response.fromServiceWorker(),\n      })\n    })\n\n    // Console logging\n    this.page.on('console', (msg) => {\n      this.consoleLogs.push({\n        timestamp: Date.now() - this.startTime,\n        type: msg.type(),\n        text: msg.text(),\n        location: msg.location(),\n        args: msg.args().map(arg => arg.toString()),\n      })\n    })\n\n    // Error logging\n    this.page.on('pageerror', (error) => {\n      this.consoleLogs.push({\n        timestamp: Date.now() - this.startTime,\n        type: 'error',\n        text: error.message,\n        location: { url: this.page.url(), lineNumber: 0, columnNumber: 0 },\n        args: [error.stack || ''],\n      })\n    })\n  }\n\n  /**\n   * Take screenshot with step annotation\n   */\n  async takeStepScreenshot(stepName: string, options: {\n    fullPage?: boolean\n    highlight?: string[]\n    mask?: string[]\n  } = {}) {\n    this.stepCounter++\n    const timestamp = Date.now() - this.startTime\n\n    // Highlight elements if specified\n    if (options.highlight) {\n      for (const selector of options.highlight) {\n        try {\n          await this.page.locator(selector).highlight()\n        } catch (e) {\n          console.warn(`Could not highlight element: ${selector}`)\n        }\n      }\n    }\n\n    const screenshotPath = `step-${this.stepCounter.toString().padStart(3, '0')}-${stepName.replace(/[^a-zA-Z0-9]/g, '-')}.png`\n\n    await this.page.screenshot({\n      path: path.join(this.testInfo.outputDir, screenshotPath),\n      fullPage: options.fullPage || true,\n      mask: options.mask ? options.mask.map(s => this.page.locator(s)) : undefined,\n    })\n\n    // Attach to test results\n    await this.testInfo.attach(`Step ${this.stepCounter}: ${stepName}`, {\n      path: path.join(this.testInfo.outputDir, screenshotPath),\n      contentType: 'image/png',\n    })\n\n    return {\n      step: this.stepCounter,\n      name: stepName,\n      timestamp,\n      screenshot: screenshotPath,\n    }\n  }\n\n  /**\n   * Capture current page HTML\n   */\n  async capturePageHTML(stepName: string) {\n    const timestamp = Date.now() - this.startTime\n    const htmlPath = `step-${this.stepCounter}-${stepName.replace(/[^a-zA-Z0-9]/g, '-')}-page.html`\n\n    const html = await this.page.content()\n    await fs.writeFile(path.join(this.testInfo.outputDir, htmlPath), html)\n\n    await this.testInfo.attach(`Page HTML: ${stepName}`, {\n      path: path.join(this.testInfo.outputDir, htmlPath),\n      contentType: 'text/html',\n    })\n\n    return {\n      name: stepName,\n      timestamp,\n      html: htmlPath,\n    }\n  }\n\n  /**\n   * Collect performance metrics\n   */\n  async collectPerformanceMetrics(stepName: string) {\n    const timestamp = Date.now() - this.startTime\n\n    const metrics = await this.page.evaluate(() => {\n      const perfEntries = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming\n      const paintEntries = performance.getEntriesByType('paint')\n      const resourceEntries = performance.getEntriesByType('resource')\n\n      return {\n        navigation: {\n          loadComplete: perfEntries.loadEventEnd - perfEntries.loadEventStart,\n          domContentLoaded: perfEntries.domContentLoadedEventEnd - perfEntries.domContentLoadedEventStart,\n          firstPaint: paintEntries.find(entry => entry.name === 'first-paint')?.startTime || 0,\n          firstContentfulPaint: paintEntries.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0,\n        },\n        resources: resourceEntries.length,\n        memory: (performance as any).memory ? {\n          used: (performance as any).memory.usedJSHeapSize,\n          total: (performance as any).memory.totalJSHeapSize,\n          limit: (performance as any).memory.jsHeapSizeLimit,\n        } : null,\n      }\n    })\n\n    this.performanceMetrics.push({\n      timestamp,\n      step: stepName,\n      metrics,\n    })\n\n    return metrics\n  }\n\n  /**\n   * Collect accessibility snapshot\n   */\n  async collectAccessibilitySnapshot(stepName: string) {\n    const timestamp = Date.now() - this.startTime\n\n    const snapshot = await this.page.accessibility.snapshot()\n    const snapshotPath = `step-${this.stepCounter}-${stepName.replace(/[^a-zA-Z0-9]/g, '-')}-a11y.json`\n\n    await fs.writeFile(\n      path.join(this.testInfo.outputDir, snapshotPath),\n      JSON.stringify(snapshot, null, 2)\n    )\n\n    await this.testInfo.attach(`Accessibility: ${stepName}`, {\n      path: path.join(this.testInfo.outputDir, snapshotPath),\n      contentType: 'application/json',\n    })\n\n    return {\n      name: stepName,\n      timestamp,\n      snapshot: snapshotPath,\n    }\n  }\n\n  /**\n   * Capture element screenshots\n   */\n  async captureElementScreenshot(selector: string, stepName: string) {\n    const element = this.page.locator(selector)\n    if (await element.count() === 0) {\n      console.warn(`Element not found for screenshot: ${selector}`)\n      return null\n    }\n\n    const screenshotPath = `element-${stepName.replace(/[^a-zA-Z0-9]/g, '-')}.png`\n\n    await element.screenshot({\n      path: path.join(this.testInfo.outputDir, screenshotPath),\n    })\n\n    await this.testInfo.attach(`Element: ${stepName}`, {\n      path: path.join(this.testInfo.outputDir, screenshotPath),\n      contentType: 'image/png',\n    })\n\n    return screenshotPath\n  }\n\n  /**\n   * Wait for and capture network activity\n   */\n  async waitForNetworkIdle(timeout = 5000) {\n    const startTime = Date.now()\n    let lastRequestTime = Date.now()\n\n    const requestListener = () => {\n      lastRequestTime = Date.now()\n    }\n\n    this.page.on('request', requestListener)\n\n    try {\n      while (Date.now() - lastRequestTime < 2000 && Date.now() - startTime < timeout) {\n        await this.page.waitForTimeout(100)\n      }\n    } finally {\n      this.page.off('request', requestListener)\n    }\n\n    return Date.now() - startTime\n  }\n\n  /**\n   * Generate comprehensive evidence report\n   */\n  async generateEvidenceReport() {\n    const endTime = Date.now()\n    const totalDuration = endTime - this.startTime\n\n    const report: EvidenceReport = {\n      testInfo: {\n        title: this.testInfo.title,\n        file: this.testInfo.file,\n        duration: totalDuration,\n        startTime: new Date(this.startTime).toISOString(),\n        endTime: new Date(endTime).toISOString(),\n        status: this.testInfo.status,\n      },\n      networkLogs: this.networkLogs,\n      consoleLogs: this.consoleLogs,\n      performanceMetrics: this.performanceMetrics,\n      summary: {\n        totalNetworkRequests: this.networkLogs.filter(log => log.type === 'request').length,\n        failedRequests: this.networkLogs.filter(log => log.type === 'response' && log.status >= 400).length,\n        consoleErrors: this.consoleLogs.filter(log => log.type === 'error').length,\n        consoleWarnings: this.consoleLogs.filter(log => log.type === 'warning').length,\n        averageResponseTime: this.calculateAverageResponseTime(),\n      },\n    }\n\n    const reportPath = 'evidence-report.json'\n    await fs.writeFile(\n      path.join(this.testInfo.outputDir, reportPath),\n      JSON.stringify(report, null, 2)\n    )\n\n    await this.testInfo.attach('Evidence Report', {\n      path: path.join(this.testInfo.outputDir, reportPath),\n      contentType: 'application/json',\n    })\n\n    return report\n  }\n\n  private calculateAverageResponseTime(): number {\n    const responses = this.networkLogs.filter(log => log.type === 'response')\n    if (responses.length === 0) return 0\n\n    const requests = this.networkLogs.filter(log => log.type === 'request')\n    const responseTimes: number[] = []\n\n    responses.forEach(response => {\n      const matchingRequest = requests.find(req =>\n        req.url === response.url && req.timestamp < response.timestamp\n      )\n      if (matchingRequest) {\n        responseTimes.push(response.timestamp - matchingRequest.timestamp)\n      }\n    })\n\n    return responseTimes.length > 0\n      ? responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length\n      : 0\n  }\n}\n\n// Types\ninterface NetworkLog {\n  timestamp: number\n  type: 'request' | 'response'\n  url: string\n  method?: string\n  status?: number\n  statusText?: string\n  headers: Record<string, string>\n  postData?: string | null\n  resourceType?: string\n  fromCache?: boolean\n  fromServiceWorker?: boolean\n}\n\ninterface ConsoleLog {\n  timestamp: number\n  type: string\n  text: string\n  location: { url: string; lineNumber: number; columnNumber: number }\n  args: string[]\n}\n\ninterface PerformanceMetric {\n  timestamp: number\n  step: string\n  metrics: any\n}\n\ninterface EvidenceReport {\n  testInfo: {\n    title: string\n    file: string\n    duration: number\n    startTime: string\n    endTime: string\n    status?: string\n  }\n  networkLogs: NetworkLog[]\n  consoleLogs: ConsoleLog[]\n  performanceMetrics: PerformanceMetric[]\n  summary: {\n    totalNetworkRequests: number\n    failedRequests: number\n    consoleErrors: number\n    consoleWarnings: number\n    averageResponseTime: number\n  }\n}\n\n/**\n * Enhanced test fixture with evidence collection\n */\nexport async function withEvidenceCollection(page: Page, testInfo: TestInfo) {\n  const collector = new EvidenceCollector(page, testInfo)\n\n  // Add evidence collection methods to page\n  ;(page as any).evidence = collector\n\n  return collector\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/utils/global-setup.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":20,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":20,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[537,539],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1345,1348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1345,1348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":57,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":57,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .evaluate on an `any` value.","line":57,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2045,2048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2045,2048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":88,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":77,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":77,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .evaluate on an `any` value.","line":77,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ok on an `any` value.","line":90,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":21}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { chromium, FullConfig } from '@playwright/test'\n\n/**\n * Global setup for Playwright tests\n * Runs once before all tests across all workers\n */\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL } = config.projects[0].use\n\n  console.log('🚀 Starting global setup...')\n\n  // Launch browser for setup\n  const browser = await chromium.launch()\n  const page = await browser.newPage()\n\n  try {\n    // Wait for the app to be ready\n    console.log('⏳ Waiting for application to be ready...')\n    await page.goto(baseURL || 'http://localhost:3000')\n\n    // Wait for app to load\n    await page.waitForSelector('[data-testid=\"app-ready\"]', {\n      timeout: 30000,\n      state: 'attached'\n    }).catch(() => {\n      // If app-ready selector doesn't exist, just wait for body\n      return page.waitForSelector('body')\n    })\n\n    // Set up test data if needed\n    console.log('📊 Setting up test data...')\n\n    // Create test users, organizations, etc.\n    await setupTestData(page)\n\n    // Verify API connectivity\n    console.log('🔗 Verifying API connectivity...')\n    await verifyApiConnectivity(page)\n\n    console.log('✅ Global setup completed successfully')\n\n  } catch (error) {\n    console.error('❌ Global setup failed:', error)\n    throw error\n  } finally {\n    await browser.close()\n  }\n}\n\nasync function setupTestData(page: any) {\n  // Set up any required test data\n  // This could include creating test users, organizations, etc.\n\n  try {\n    // Example: Set up mock authentication state\n    await page.evaluate(() => {\n      // Set up any global test state\n      window.__E2E_TEST__ = true\n\n      // Set up test authentication tokens if needed\n      localStorage.setItem('e2e-test-mode', 'true')\n    })\n\n    // Create test organizations, users, payment methods, etc.\n    // This would typically call your backend API to set up test data\n\n  } catch (error) {\n    console.warn('⚠️ Failed to set up test data:', error)\n    // Don't fail the setup if test data creation fails\n  }\n}\n\nasync function verifyApiConnectivity(page: any) {\n  try {\n    // Verify that the API is accessible\n    const response = await page.evaluate(async () => {\n      const response = await fetch('/api/health', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      return {\n        status: response.status,\n        ok: response.ok,\n      }\n    })\n\n    if (!response.ok) {\n      console.warn('⚠️ API health check failed, but continuing with tests')\n    } else {\n      console.log('✅ API connectivity verified')\n    }\n  } catch (error) {\n    console.warn('⚠️ Could not verify API connectivity:', error)\n    // Don't fail setup if API is not available - tests might use mocks\n  }\n}\n\nexport default globalSetup","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/utils/global-teardown.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":18,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[466,468],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":41,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":41,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .evaluate on an `any` value.","line":41,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":24},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":76,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":76,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2037,2039],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":77,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":77,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2097,2099],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { chromium, FullConfig } from '@playwright/test'\n\n/**\n * Global teardown for Playwright tests\n * Runs once after all tests across all workers have completed\n */\n\nasync function globalTeardown(config: FullConfig) {\n  const { baseURL } = config.projects[0].use\n\n  console.log('🧹 Starting global teardown...')\n\n  // Launch browser for cleanup\n  const browser = await chromium.launch()\n  const page = await browser.newPage()\n\n  try {\n    await page.goto(baseURL || 'http://localhost:3000')\n\n    // Clean up test data\n    console.log('🗑️ Cleaning up test data...')\n    await cleanupTestData(page)\n\n    // Generate test artifacts\n    console.log('📊 Generating test artifacts...')\n    await generateTestArtifacts()\n\n    console.log('✅ Global teardown completed successfully')\n\n  } catch (error) {\n    console.error('❌ Global teardown failed:', error)\n    // Don't throw error to avoid masking test failures\n  } finally {\n    await browser.close()\n  }\n}\n\nasync function cleanupTestData(page: any) {\n  try {\n    // Clean up any test data created during setup\n    await page.evaluate(() => {\n      // Clear test-specific localStorage\n      localStorage.removeItem('e2e-test-mode')\n\n      // Clear any other test state\n      if (window.__E2E_TEST__) {\n        delete window.__E2E_TEST__\n      }\n    })\n\n    // Clean up test users, organizations, etc. from backend\n    // This would typically call your backend API to clean up test data\n\n  } catch (error) {\n    console.warn('⚠️ Failed to clean up test data:', error)\n  }\n}\n\nasync function generateTestArtifacts() {\n  try {\n    const fs = await import('fs')\n    const path = await import('path')\n\n    // Create test results summary\n    const testResultsPath = path.join(process.cwd(), 'test-results')\n\n    if (!fs.existsSync(testResultsPath)) {\n      fs.mkdirSync(testResultsPath, { recursive: true })\n    }\n\n    // Generate summary report\n    const summary = {\n      timestamp: new Date().toISOString(),\n      testRun: {\n        completed: true,\n        environment: process.env.NODE_ENV || 'test',\n        baseURL: process.env.PLAYWRIGHT_BASE_URL || 'http://localhost:3000',\n      },\n      cleanup: {\n        completed: true,\n        timestamp: new Date().toISOString(),\n      }\n    }\n\n    fs.writeFileSync(\n      path.join(testResultsPath, 'test-summary.json'),\n      JSON.stringify(summary, null, 2)\n    )\n\n    console.log('📋 Test summary generated')\n\n  } catch (error) {\n    console.warn('⚠️ Failed to generate test artifacts:', error)\n  }\n}\n\nexport default globalTeardown","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/utils/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/tests/e2e/working-basic-test.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/viewport-test.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":59,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockError' is defined but never used.","line":65,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { chromium } from 'playwright';\n\nasync function testViewport() {\n  const browser = await chromium.launch({ headless: false });\n  const context = await browser.newContext({\n    viewport: { width: 1024, height: 768 }\n  });\n\n  const page = await context.newPage();\n\n  console.log('🔍 Testing 1024x768 viewport compatibility...\\n');\n\n  try {\n    // Test login page\n    console.log('📋 LOGIN PAGE:');\n    await page.goto('http://localhost:3000', { waitUntil: 'networkidle' });\n\n    const loginMetrics = await page.evaluate(() => {\n      const body = document.body;\n      const scrollHeight = body.scrollHeight;\n      const windowHeight = window.innerHeight;\n      const needsScroll = scrollHeight > windowHeight;\n\n      // Check for large elements\n      const allElements = Array.from(document.querySelectorAll('*'));\n      const oversized = allElements.filter(el => {\n        const rect = el.getBoundingClientRect();\n        return rect.height > 100 && !el.closest('main'); // Allow large main content areas\n      }).map(el => ({\n        tag: el.tagName.toLowerCase(),\n        class: el.className,\n        height: Math.round(el.getBoundingClientRect().height)\n      }));\n\n      return {\n        scrollHeight,\n        windowHeight,\n        needsScroll,\n        oversizedElements: oversized.slice(0, 5)\n      };\n    });\n\n    console.log(`- Content height: ${loginMetrics.scrollHeight}px`);\n    console.log(`- Window height: ${loginMetrics.windowHeight}px`);\n    console.log(`- Needs scrolling: ${loginMetrics.needsScroll ? 'YES ❌' : 'NO ✅'}`);\n\n    if (loginMetrics.oversizedElements.length > 0) {\n      console.log('- Oversized elements found:');\n      loginMetrics.oversizedElements.forEach(el => {\n        console.log(`  • ${el.tag}${el.class ? '.' + el.class.split(' ')[0] : ''} - ${el.height}px`);\n      });\n    }\n\n    // Navigate to dashboard (mock login if needed)\n    console.log('\\n📋 DASHBOARD PAGE:');\n\n    try {\n      await page.goto('http://localhost:3000/dashboard', { waitUntil: 'networkidle', timeout: 5000 });\n    } catch (e) {\n      // Try mock login route\n      try {\n        await page.goto('http://localhost:3000/mock-login', { waitUntil: 'networkidle', timeout: 5000 });\n        await page.click('button', { timeout: 5000 });\n        await page.waitForNavigation({ waitUntil: 'networkidle', timeout: 10000 });\n      } catch (mockError) {\n        console.log('⚠️ Could not access dashboard - trying organizations page');\n        await page.goto('http://localhost:3000/organizations', { waitUntil: 'networkidle', timeout: 5000 });\n      }\n    }\n\n    const dashboardMetrics = await page.evaluate(() => {\n      const body = document.body;\n      const scrollHeight = body.scrollHeight;\n      const windowHeight = window.innerHeight;\n      const needsScroll = scrollHeight > windowHeight;\n\n      // Check icon sizes specifically\n      const icons = Array.from(document.querySelectorAll('svg')).map(icon => {\n        const rect = icon.getBoundingClientRect();\n        return {\n          width: Math.round(rect.width),\n          height: Math.round(rect.height),\n          classes: icon.className.baseVal || icon.getAttribute('class') || ''\n        };\n      }).filter(icon => icon.width > 24 || icon.height > 24); // Find icons larger than 24px\n\n      // Check typography\n      const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')).map(h => {\n        const style = window.getComputedStyle(h);\n        return {\n          tag: h.tagName.toLowerCase(),\n          fontSize: style.fontSize,\n          lineHeight: style.lineHeight\n        };\n      });\n\n      return {\n        scrollHeight,\n        windowHeight,\n        needsScroll,\n        largeIcons: icons.slice(0, 5),\n        headings: headings.slice(0, 5)\n      };\n    });\n\n    console.log(`- Content height: ${dashboardMetrics.scrollHeight}px`);\n    console.log(`- Window height: ${dashboardMetrics.windowHeight}px`);\n    console.log(`- Needs scrolling: ${dashboardMetrics.needsScroll ? 'YES ❌' : 'NO ✅'}`);\n\n    if (dashboardMetrics.largeIcons.length > 0) {\n      console.log('- Large icons found:');\n      dashboardMetrics.largeIcons.forEach(icon => {\n        console.log(`  • ${icon.width}x${icon.height}px - ${icon.classes.split(' ')[0] || 'no-class'}`);\n      });\n    } else {\n      console.log('✅ All icons appropriately sized (≤24px)');\n    }\n\n    console.log('- Typography sizes:');\n    dashboardMetrics.headings.forEach(h => {\n      console.log(`  • ${h.tag}: ${h.fontSize}`);\n    });\n\n    // Take a screenshot for manual review\n    await page.screenshot({\n      path: 'viewport-test-1024x768.png',\n      fullPage: false // Only capture viewport\n    });\n\n    console.log('\\n📸 Screenshot saved as viewport-test-1024x768.png');\n    console.log('\\n⏱️ Keeping browser open for 15 seconds for manual review...');\n    await page.waitForTimeout(15000);\n\n  } catch (error) {\n    console.error('❌ Error during viewport test:', error.message);\n  } finally {\n    await browser.close();\n  }\n}\n\ntestViewport().catch(console.error);","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/vitest.config.ts","messages":[{"ruleId":"@typescript-eslint/triple-slash-reference","severity":2,"message":"Do not use a triple slash reference for vitest/config, use `import` style instead.","line":1,"column":1,"nodeType":"Line","messageId":"tripleSlashReference","endLine":1,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .projects on an `error` typed value.","line":38,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":68,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":68,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vitest/config\" />\nimport path from 'path'\nimport { fileURLToPath } from 'node:url'\n\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin'\nconst dirname =\n  typeof __dirname !== 'undefined'\n    ? __dirname\n    : path.dirname(fileURLToPath(import.meta.url))\n\n// More info at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon\nconst enableStorybookProject = process.env.VITEST_DISABLE_STORYBOOK !== '1'\n\nconst testConfig: Parameters<typeof defineConfig>[0]['test'] = {\n  globals: true,\n  environment: 'jsdom',\n  setupFiles: ['./src/test/setup.ts'],\n  coverage: {\n    provider: 'v8',\n    reporter: ['text', 'lcov', 'html'],\n    reportsDirectory: 'coverage',\n  },\n  exclude: [\n    '**/node_modules/**',\n    '**/dist/**',\n    '**/cypress/**',\n    '**/tests/e2e/**',\n    // Exclude Playwright E2E tests\n    '**/.{idea,git,cache,output,temp}/**',\n    '**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build}.config.*',\n  ],\n  include: ['src/**/*.{test,spec}.{ts,tsx}'],\n}\n\nif (enableStorybookProject) {\n  testConfig.projects = [\n    {\n      extends: true,\n      plugins: [\n        // The plugin will run tests for the stories defined in your Storybook config\n        // See options at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon#storybooktest\n        storybookTest({\n          configDir: path.join(dirname, '.storybook'),\n        }),\n      ],\n      test: {\n        name: 'storybook',\n        browser: {\n          enabled: true,\n          headless: true,\n          provider: 'playwright',\n          instances: [\n            {\n              browser: 'chromium',\n            },\n          ],\n        },\n        setupFiles: ['.storybook/vitest.setup.ts'],\n      },\n    },\n  ]\n}\n\nexport default defineConfig({\n  plugins: [react()],\n  test: testConfig,\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/lsendel/IdeaProjects/sass/frontend/vitest.shims.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
