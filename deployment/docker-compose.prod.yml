version: '3.8'

services:
  # Application service
  payment-platform:
    image: payment-platform:latest
    container_name: payment-platform-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Spring configuration
      - SPRING_PROFILES_ACTIVE=production
      - SERVER_PORT=8080

      # Database configuration
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/payment_platform
      - SPRING_DATASOURCE_USERNAME=payment_user
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=20
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=5

      # Redis configuration
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
      - SPRING_DATA_REDIS_DATABASE=0

      # Performance monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,metrics,prometheus,performance
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_ENDPOINT_PERFORMANCE_ENABLED=true
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true

      # Security configuration
      - SECURITY_JWT_SECRET=${JWT_SECRET}
      - SECURITY_OAUTH2_ENCRYPTION_KEY=${OAUTH2_ENCRYPTION_KEY}

      # Payment configuration
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}

      # Alerting configuration
      - ALERTING_SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - ALERTING_EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - ALERTING_EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}

      # Performance tuning
      - JAVA_OPTS=-Xms1024m -Xmx2048m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump.hprof

      # Logging
      - LOGGING_LEVEL_COM_PLATFORM=INFO
      - LOGGING_LEVEL_COM_PLATFORM_SHARED_MONITORING=DEBUG
      - LOGGING_FILE_NAME=/var/log/payment-platform/application.log

    volumes:
      - app-logs:/var/log/payment-platform
      - app-data:/var/lib/payment-platform
      - /tmp:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - payment-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: payment-platform-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=payment_platform
      - POSTGRES_USER=payment_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./postgres/conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - payment-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment_user -d payment_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: payment-platform-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
      - ./redis/conf:/usr/local/etc/redis
    ports:
      - "6379:6379"
    networks:
      - payment-platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Nginx reverse proxy and static file serving
  nginx:
    image: nginx:alpine
    container_name: payment-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - frontend-dist:/usr/share/nginx/html
      - nginx-logs:/var/log/nginx
    depends_on:
      - payment-platform
    networks:
      - payment-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: payment-platform-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - payment-platform-network
    depends_on:
      - payment-platform

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: payment-platform-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - payment-platform-network
    depends_on:
      - prometheus

  # Log aggregation with ELK stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: payment-platform-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - payment-platform-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: payment-platform-logstash
    restart: unless-stopped
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - app-logs:/var/log/payment-platform
    ports:
      - "5044:5044"
    networks:
      - payment-platform-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: payment-platform-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - payment-platform-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-data:
    driver: local
  frontend-dist:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  payment-platform-network:
    driver: bridge