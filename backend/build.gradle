plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    // id 'org.owasp.dependencycheck' version '10.0.4' // Temporarily disabled due to dependency resolution issue
    id 'org.jetbrains.dokka' version '1.9.10'
    id 'com.github.ben-manes.versions' version '0.53.0'
}

group = 'com.platform'
version = '1.0.0'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.modulith:spring-modulith-bom:1.4.3'
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.8.13'

    // Spring Modulith
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springframework.modulith:spring-modulith-events-api'

    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'com.h2database:h2'

    // Stripe
    implementation 'com.stripe:stripe-java:29.5.0'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Vault (optional - only in production)
    implementation 'org.springframework.vault:spring-vault-core:3.1.2'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.rest-assured:json-path'
    testImplementation 'io.rest-assured:xml-path'
    testImplementation 'com.h2database:h2'

    // Security Testing Dependencies
    testImplementation 'org.zaproxy:zap-clientapi:1.14.0'
    testImplementation 'com.github.spotbugs:spotbugs-annotations:4.8.6'
    // testImplementation 'org.owasp:dependency-check-gradle:10.0.4' // Temporarily disabled due to dependency resolution issue
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // Security test configuration
    systemProperty 'security.testing.enabled', 'true'

    // Exclude long-running security tests from regular builds
    exclude '**/SecurityTestSuite.class'
    exclude '**/PenetrationTest.class'
    exclude '**/SecurityPipelineTest.class'
}

// Security testing task
task securityTest(type: Test) {
    description = 'Run comprehensive security tests'
    group = 'security'

    useJUnitPlatform()
    include '**/SecurityTestSuite.class'
    include '**/SecurityValidation*Test.class'

    systemProperty 'security.testing.enabled', 'true'
    systemProperty 'security.testing.comprehensive', 'true'

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Penetration testing task
task penetrationTest(type: Test) {
    description = 'Run automated penetration tests'
    group = 'security'

    useJUnitPlatform()
    include '**/PenetrationTest.class'
    include '**/SecurityPipelineTest.class'

    systemProperty 'security.testing.enabled', 'true'
    systemProperty 'penetration.testing.enabled', 'true'

    // Run only in secure environments
    onlyIf {
        System.getProperty('environment') == 'test' ||
        System.getProperty('ci.pipeline') == 'security'
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

// Enforce minimum coverage (lines >= 80%)
jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
}

tasks.named('check') {
    dependsOn jacocoTestCoverageVerification
}

checkstyle {
    toolVersion = '10.20.1'
    configFile = file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}


sonar {
    properties {
        property "sonar.projectKey", "lsendel_sass"
        property "sonar.organization", "lsendel"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml,build/reports/checkstyle/test.xml"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.java.source", "21"
        property "sonar.exclusions", "**/build/**,**/target/**,**/.gradle/**"
        property "sonar.coverage.exclusions", "**/test/**,**/config/**"
        
    }
}

// Temporarily disabled due to dependency resolution issue
/*
dependencyCheck {
    formats = ['HTML', 'JSON']
    outputDirectory = 'build/reports/dependency-check'
    failBuildOnCVSS = 5.0
    suppressionFile = 'config/dependency-check-suppressions.xml'
    analyzers {
        assemblyEnabled = false
        nuspecEnabled = false
        nugetconfEnabled = false
    }
}

// Security scanning tasks
task dependencySecurityScan {
    description = 'Run OWASP Dependency Check analysis'
    group = 'security'
    dependsOn dependencyCheckAnalyze
}
*/

// CI/CD Security Pipeline
task securityPipeline {
    description = 'Run complete security pipeline'
    group = 'security'

    dependsOn 'checkstyleMain', 'checkstyleTest'
    dependsOn 'dependencySecurityScan'
    dependsOn 'securityTest'
    dependsOn 'jacocoTestCoverageVerification'

    doLast {
        println "Security pipeline completed successfully"
        println "Reports available in: build/reports/"
    }
}

// Full security validation (including penetration tests)
task fullSecurityValidation {
    description = 'Run comprehensive security validation including penetration tests'
    group = 'security'

    dependsOn 'securityPipeline'
    dependsOn 'penetrationTest'

    doLast {
        println "Full security validation completed"
        println "Security test reports:"
        println "  - Unit tests: build/reports/tests/test/"
        println "  - Security tests: build/reports/tests/securityTest/"
        println "  - Penetration tests: build/reports/tests/penetrationTest/"
        println "  - Dependency check: build/reports/dependency-check/"
        println "  - Code coverage: build/reports/jacoco/"
        println "  - Checkstyle: build/reports/checkstyle/"
    }
}

tasks.withType(org.jetbrains.dokka.gradle.DokkaTask.class) {
    outputDirectory.set(file("../docs/docs/backend-api"))
    dokkaSourceSets {
        configureEach {
            displayName.set("Backend API")
            platform.set(org.jetbrains.dokka.Platform.jvm)
            jdkVersion.set(21)
            includeNonPublic.set(false)
            skipEmptyPackages.set(false)
            reportUndocumented.set(false)
            suppress.set(false)
            javaSourceRoots.setFrom(file("src/main/java"))
            classpath.setFrom(configurations.compileClasspath)
            perPackageOption(".*\\.internal(\\..*)?") {
                suppress.set(false)
            }
        }
    }
}

dokkaGfm {
    outputDirectory.set(file("../docs/docs/backend-api-gfm"))
    dokkaSourceSets.configureEach {
        reportUndocumented.set(true)
    }
}

javadoc {
    options.encoding = 'UTF-8'
    options.author = true
    options.version = true
    options.use = true
    options.addStringOption('Xdoclint:none', '-quiet')
    destinationDir = file("../docs/docs/backend-api-javadoc")
}
