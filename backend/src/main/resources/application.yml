spring:
  application:
    name: payment-platform

  profiles:
    active: development

  datasource:
    url: jdbc:postgresql://localhost:5432/platform
    username: ${DB_USERNAME:platform}
    password: ${DB_PASSWORD:platform}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        show_sql: false
        jdbc:
          batch_size: 25
          fetch_size: 50
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
        generate_statistics: false
    show-sql: ${SHOW_SQL:false}
    open-in-view: false

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      password: ${REDIS_PASSWORD:}

# InfluxDB configuration for security metrics time-series storage
influxdb:
  url: ${INFLUXDB_URL:http://localhost:8086}
  token: ${INFLUXDB_TOKEN:security-dashboard-token}
  org: ${INFLUXDB_ORG:sass-platform}
  bucket: ${INFLUXDB_BUCKET:security-metrics}
  connection:
    timeout: 5000ms
    read-timeout: 10000ms
    write-timeout: 10000ms
  batch:
    size: 5000
    flush-interval: 1000ms
  retention:
    detailed: P90D  # 90 days for detailed metrics
    aggregated: P365D  # 1 year for aggregated metrics

  session:
    store-type: redis
    timeout: 24h
    redis:
      flush-mode: on_save
      namespace: spring:session

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:${OAUTH_GOOGLE_CLIENT_ID:}}
            client-secret: ${GOOGLE_CLIENT_SECRET:${OAUTH_GOOGLE_CLIENT_SECRET:}}
            scope:
              - openid
              - profile
              - email
            redirect-uri: "{baseUrl}/api/v1/auth/oauth2/callback/google"
          github:
            client-id: ${GITHUB_CLIENT_ID:${OAUTH_GITHUB_CLIENT_ID:}}
            client-secret: ${GITHUB_CLIENT_SECRET:${OAUTH_GITHUB_CLIENT_SECRET:}}
            scope:
              - read:user
              - user:email
            redirect-uri: "{baseUrl}/api/v1/auth/oauth2/callback/github"
          microsoft:
            client-id: ${MICROSOFT_CLIENT_ID:${OAUTH_MICROSOFT_CLIENT_ID:}}
            client-secret: ${MICROSOFT_CLIENT_SECRET:${OAUTH_MICROSOFT_CLIENT_SECRET:}}
            scope:
              - openid
              - profile
              - email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/api/v1/auth/oauth2/callback/microsoft"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: id
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id
          microsoft:
            authorization-uri: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
            token-uri: https://login.microsoftonline.com/common/oauth2/v2.0/token
            user-info-uri: https://graph.microsoft.com/oidc/userinfo
            user-name-attribute: sub

server:
  port: ${SERVER_PORT:8082}
  servlet:
    context-path: /
  error:
    include-stacktrace: on_param
    include-exception: false
    include-message: on_param

# API Documentation Configuration
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
    filter: true
    displayRequestDuration: true
  show-actuator: false
  group-configs:
    - group: 'authentication'
      display-name: 'Authentication APIs'
      paths-to-match: '/auth/**'
    - group: 'payments'
      display-name: 'Payment APIs'
      paths-to-match: '/api/v1/payments/**'
    - group: 'subscriptions'
      display-name: 'Subscription APIs'
      paths-to-match: '/api/v1/subscriptions/**'
    - group: 'organizations'
      display-name: 'Organization APIs'
      paths-to-match: '/api/v1/organizations/**'
    - group: 'users'
      display-name: 'User APIs'
      paths-to-match: '/api/v1/users/**'

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,flyway
  endpoint:
    health:
      show-details: when_authorized
    flyway:
      enabled: true

logging:
  level:
    com.platform: ${LOG_LEVEL:INFO}
    org.springframework.modulith: DEBUG
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Application Configuration
app:
  base-url: ${APP_BASE_URL:http://localhost:8080}
  frontend-url: ${FRONTEND_URL:http://localhost:3000}

  # Password Authentication Configuration
  auth:
    password:
      enabled: ${ENABLE_PASSWORD_AUTH:false}
      policy:
        min-length: ${PASSWORD_MIN_LENGTH:12}
        require-uppercase: ${PASSWORD_REQUIRE_UPPERCASE:true}
        require-lowercase: ${PASSWORD_REQUIRE_LOWERCASE:true}
        require-numbers: ${PASSWORD_REQUIRE_NUMBERS:true}
        require-symbols: ${PASSWORD_REQUIRE_SYMBOLS:true}
        max-age-days: ${PASSWORD_MAX_AGE_DAYS:0} # 0 = no expiration
        prevent-reuse-count: ${PASSWORD_PREVENT_REUSE:5}
      lockout:
        max-attempts: ${PASSWORD_MAX_ATTEMPTS:5}
        lockout-durations: # Exponential backoff in minutes
          - 1
          - 2
          - 4
          - 8
          - 16
          - 32
        max-lockout-duration: ${PASSWORD_MAX_LOCKOUT_MINUTES:1440} # 24 hours
      tokens:
        reset-expiry-hours: ${PASSWORD_RESET_EXPIRY_HOURS:24}
        verification-expiry-hours: ${EMAIL_VERIFICATION_EXPIRY_HOURS:72}

  # Email Configuration for Password Reset/Verification
  email:
    smtp:
      host: ${SMTP_HOST:}
      port: ${SMTP_PORT:587}
      username: ${SMTP_USERNAME:}
      password: ${SMTP_PASSWORD:}
      auth: ${SMTP_AUTH:true}
      starttls: ${SMTP_STARTTLS:true}
    from-address: ${EMAIL_FROM_ADDRESS:noreply@platform.com}
    from-name: ${EMAIL_FROM_NAME:Payment Platform}

stripe:
  api-key: ${STRIPE_SECRET_KEY:}
  webhook-secret: ${STRIPE_WEBHOOK_SECRET:}

---
spring:
  config:
    activate:
      on-profile: test

  main:
    allow-circular-references: true

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        globally_quoted_identifiers: true

  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms

  flyway:
    enabled: false

  h2:
    console:
      enabled: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: dummy-google-client-id
            client-secret: dummy-google-client-secret
          github:
            client-id: dummy-github-client-id
            client-secret: dummy-github-client-secret
          microsoft:
            client-id: dummy-microsoft-client-id
            client-secret: dummy-microsoft-client-secret

stripe:
  secret-key: sk_test_dummy_key_for_testing
  webhook:
    secret: whsec_dummy_webhook_secret_for_testing

# Test profile configuration
app:
  auth:
    password:
      enabled: true
