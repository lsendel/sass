name: Matrix Testing

on:
  workflow_call:
    inputs:
      test-type:
        required: true
        type: string
        description: 'Type of tests to run (unit, integration, e2e)'
      parallel-count:
        required: false
        type: number
        default: 4
        description: 'Number of parallel test runners'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Find Test Files
      id: find-tests
      run: |
        case "${{ inputs.test-type }}" in
          "unit")
            TEST_FILES=$(find . -name "test_*.py" -not -path "*/integration/*" -not -path "*/e2e/*")
            ;;
          "integration")
            TEST_FILES=$(find . -path "*/integration/*test_*.py")
            ;;
          "e2e")
            TEST_FILES=$(find . -path "*/e2e/*test_*.py")
            ;;
        esac
        echo "files=${TEST_FILES}" >> $GITHUB_OUTPUT

    - name: Set Matrix
      id: set-matrix
      run: |
        FILES=(${{ steps.find-tests.outputs.files }})
        COUNT=${#FILES[@]}
        CHUNK_SIZE=$(( (COUNT + ${{ inputs.parallel-count }} - 1) / ${{ inputs.parallel-count }} ))
        
        MATRIX='{"include":['
        for ((i=0; i<${{ inputs.parallel-count }}; i++)); do
          START=$((i * CHUNK_SIZE))
          END=$((START + CHUNK_SIZE))
          if [ $i -gt 0 ]; then
            MATRIX+=','
          fi
          CHUNK=(${FILES[@]:START:CHUNK_SIZE})
          MATRIX+="{\"chunk\":$i,\"files\":\"${CHUNK[*]}\"}"
        done
        MATRIX+=']}'
        echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  run-tests:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run Tests
      run: |
        pytest ${{ matrix.files }} \
          --junitxml=test-results/junit-${{ matrix.chunk }}.xml \
          --cov=src \
          --cov-report=xml:coverage-${{ matrix.chunk }}.xml
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.chunk }}
        path: |
          test-results/junit-${{ matrix.chunk }}.xml
          coverage-${{ matrix.chunk }}.xml
        retention-days: 14

  combine-results:
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download Test Results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
    
    - name: Combine Coverage Reports
      run: |
        pip install coverage
        coverage combine coverage-*.xml
        coverage xml
        coverage html
    
    - name: Upload Combined Results
      uses: actions/upload-artifact@v4
      with:
        name: combined-test-results
        path: |
          htmlcov/
          coverage.xml
          test-results/
        retention-days: 30
    
    - name: Check Coverage Threshold
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        if (( $(echo "$COVERAGE < 85" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below minimum 85%"
          exit 1
        fi