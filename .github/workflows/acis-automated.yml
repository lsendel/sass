name: ACIS Automated Improvement

# Runs ACIS system automatically on schedule and PR events
on:
  # Schedule - runs every hour (matches acis-config.yml default)
  # To change interval: edit scripts/acis/config/acis-config.yml
  schedule:
    - cron: '0 * * * *'  # Every hour

  # Run on pull requests
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

  # Manual trigger
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode'
        required: true
        default: 'validate'
        type: choice
        options:
          - validate  # Just validate, no changes
          - improve   # Validate and auto-fix
          - full      # Full improvement cycle

permissions:
  contents: write  # For creating commits
  pull-requests: write  # For PR comments
  issues: write  # For creating issues

env:
  JAVA_VERSION: '21'
  ACIS_LOG_LEVEL: INFO

jobs:
  acis-run:
    name: ACIS Continuous Improvement
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip3 install pyyaml
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Git
        run: |
          git config --global user.name "ACIS Bot"
          git config --global user.email "acis-bot@github.actions"

      - name: Determine run mode
        id: mode
        run: |
          # Default mode based on trigger
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "mode=validate" >> $GITHUB_OUTPUT
            echo "auto_commit=false" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "mode=improve" >> $GITHUB_OUTPUT
            echo "auto_commit=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "mode=${{ inputs.mode }}" >> $GITHUB_OUTPUT
            echo "auto_commit=${{ inputs.mode != 'validate' }}" >> $GITHUB_OUTPUT
          fi

      - name: Run ACIS
        id: acis
        env:
          ACIS_CONTINUE_APPROVED: true
          ACIS_AUTO_COMMIT: ${{ steps.mode.outputs.auto_commit }}
          ACIS_MODE: ${{ steps.mode.outputs.mode }}
        run: |
          echo "Running ACIS in $ACIS_MODE mode..."

          # Run ACIS main script
          if [ "$ACIS_MODE" = "validate" ]; then
            # Validate only (dry run)
            DRY_RUN=true ./scripts/acis/acis-main.sh
          else
            # Full improvement cycle
            ./scripts/acis/acis-main.sh
          fi

        continue-on-error: true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acis-logs-${{ github.run_number }}
          path: |
            .acis/logs/
            .acis/reports/
          retention-days: 7

      - name: Generate summary
        if: always()
        run: |
          echo "## ACIS Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Mode**: ${{ steps.mode.outputs.mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add metrics if available
          if [ -f .acis/reports/metrics-latest.json ]; then
            echo "### Metrics" >> $GITHUB_STEP_SUMMARY
            jq -r '"**Status**: " + .status' .acis/reports/metrics-latest.json >> $GITHUB_STEP_SUMMARY || true
            jq -r '"**Iterations**: " + (.iterations | tostring)' .acis/reports/metrics-latest.json >> $GITHUB_STEP_SUMMARY || true
            jq -r '"**Runtime**: " + (.runtime_seconds | tostring) + "s"' .acis/reports/metrics-latest.json >> $GITHUB_STEP_SUMMARY || true
          fi

          # Add recent log entries
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recent Log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 .acis/logs/acis.log 2>/dev/null || echo "No logs available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Create PR for improvements
        if: |
          steps.mode.outputs.auto_commit == 'true' &&
          github.event_name == 'schedule'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            ü§ñ ACIS: Automated quality improvements

            Generated by ACIS automated improvement system.

            Co-Authored-By: ACIS Bot <acis-bot@github.actions>
          branch: acis/auto-improvements-${{ github.run_number }}
          title: 'ü§ñ ACIS: Automated quality improvements'
          body: |
            ## Automated Code Quality Improvements

            This PR contains automated improvements generated by the ACIS system.

            **Review checklist**:
            - [ ] Changes improve code quality
            - [ ] All tests pass
            - [ ] No unintended side effects
            - [ ] Safe to merge

            **Details**:
            - Run: ${{ github.run_number }}
            - Workflow: ${{ github.workflow }}
            - Logs: [View artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            ü§ñ *Generated by [ACIS](https://github.com/${{ github.repository }})*
          labels: |
            automated
            code-quality
            acis
          delete-branch: true

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## ACIS Validation Report\n\n';
            comment += '**Status**: ';

            if (${{ steps.acis.outcome == 'success' }}) {
              comment += '‚úÖ PASSED\n\n';
              comment += 'All quality gates passed. This PR is safe to merge.\n';
            } else {
              comment += '‚ùå FAILED\n\n';
              comment += 'Some quality gates failed. Please review the logs.\n';
            }

            comment += '\n### Quality Gates\n';
            comment += '- Compilation\n';
            comment += '- Code Style\n';
            comment += '- Testing\n';
            comment += '- Security\n';

            comment += '\n---\n';
            comment += `ü§ñ *Automated validation by [ACIS](https://github.com/${context.repo.owner}/${context.repo.repo})*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail job if ACIS failed
        if: steps.acis.outcome != 'success' && github.event_name == 'pull_request'
        run: |
          echo "ACIS validation failed"
          exit 1
