name: Security Scans

# Prevent concurrent security scans
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# Minimal required permissions
permissions:
  security-events: write
  actions: read
  contents: read
  id-token: write # Required for OIDC signing

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  security-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    
    # SLSA compliance settings
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      sbom: ${{ steps.sbom.outputs.path }}
      
    # Use OIDC for cloud provider authentication
    permissions:
      id-token: write
      contents: read
      security-events: write
    
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit
        disable-telemetry: true

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        sparse-checkout: |
          src/
          backend/
          frontend/
          requirements*.txt
          package*.json
          gradle*
          pom.xml

    # SLSA provenance generation
    # Note: SLSA provenance should be generated using a reusable workflow in a separate job
    # See: https://github.com/slsa-framework/slsa-github-generator#getting-started
    - name: Generate Build Metadata
      run: |
        echo "Recording build metadata for SLSA compliance"
        echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "BUILD_COMMIT=${{ github.sha }}" >> $GITHUB_ENV

    # Generate SBOM
    - name: Generate SBOM
      uses: anchore/sbom-action@v0.15.1
      with:
        format: spdx-json
        artifact-name: sbom.spdx.json

    # Vulnerability Scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.17.0
      with:
        scan-ref: '.'
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        timeout: '10m'
        scanners: 'vuln,secret,config'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'

    # SCA Analysis
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'SASS'
        path: '.'
        format: 'SARIF'
        args: >-
          --failOnCVSS 7
          --suppression security/suppressions.xml

    # Infrastructure Security
    - name: Run tfsec with SARIF output
      if: hashFiles('terraform/**/*.tf') != ''
      uses: aquasecurity/tfsec-sarif-action@v0.1.4
      with:
        working_directory: terraform
        sarif_file: tfsec.sarif
      continue-on-error: true

    # Container Security
    - name: Run Snyk Container Security
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: payment-platform/sass:latest
        args: --file=Dockerfile --severity-threshold=high
      continue-on-error: true

    # Secrets Scanning
    - name: Run GitGuardian scan
      uses: GitGuardian/ggshield-action@master
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      continue-on-error: true

    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript, java
        queries: security-extended,security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # SLSA Verification
    # Note: SLSA verification requires provenance generated by slsa-github-generator
    # Skipping verification until provenance generation is implemented
    - name: Record Build Info
      run: |
        echo "Build completed at: $BUILD_TIME"
        echo "Build commit: $BUILD_COMMIT"

    # Upload Reports
    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/
          *.sarif
          sbom.spdx.json
          provenance.intoto.jsonl
        retention-days: 30
        compression-level: 9

    # Security Score
    - name: Calculate Security Score
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true

    # Generate Security Summary
    - name: Generate Security Summary
      if: always()
      run: |
        echo "### Security Scan Summary :shield:" >> $GITHUB_STEP_SUMMARY
        echo "\n#### Scan Results" >> $GITHUB_STEP_SUMMARY
        
        # Check Trivy results
        if [ -f trivy-results.sarif ]; then
          VULN_COUNT=$(grep -c "\"level\": \"error\"" trivy-results.sarif || echo "0")
          echo "- Trivy Vulnerabilities: ${VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Trivy scan: No results file found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check SBOM
        if [ -f sbom.spdx.json ]; then
          DEPS_COUNT=$(grep -c "\"name\"" sbom.spdx.json || echo "0")
          echo "- Dependencies Analyzed: ${DEPS_COUNT}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- SBOM: Not generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check CodeQL
        if [ -d ../results/codeql ]; then
          echo "- CodeQL Analysis: Complete" >> $GITHUB_STEP_SUMMARY
        else
          echo "- CodeQL Analysis: Failed or incomplete" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "\n> Note: Review full reports for detailed findings" >> $GITHUB_STEP_SUMMARY

  notify-security-issues:
    needs: security-checks
    if: failure()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      issues: write
      security-events: write
    
    steps:
    - name: Create Security Issue
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Security Vulnerabilities Detected',
            body: `### Security Scan Failed
            
            #### Scan Information
            - Run ID: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - Triggered by: ${context.actor}
            - Branch: ${context.ref}
            
            #### Security Reports
            - Trivy Scan Results
            - OWASP Dependency Check
            - Infrastructure Security (tfsec)
            - Container Security (Snyk)
            - Secrets Scanning (GitGuardian)
            - CodeQL Analysis
            - SLSA Provenance
            
            Please review the security reports and address all findings.
            
            > **Note**: High and Critical vulnerabilities must be resolved immediately.`,
            labels: ['security', 'high-priority', 'needs-triage']
          });

    - name: Send Security Alert
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'security-alerts'
        slack-message: |
          ðŸš¨ *Security Vulnerabilities Detected*

          *Scan:* ${{ github.workflow }}
          *Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Results>
          *Branch:* ${{ github.ref_name }}

          Please review and address the security findings ASAP.
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      continue-on-error: true