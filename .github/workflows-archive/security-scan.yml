name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'

jobs:
  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Dependency Scanning
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Java dependency check
      - name: OWASP Dependency Check - Backend
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'payment-platform-backend'
          path: './backend'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload Backend Dependency Check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-dependency-check-report
          path: reports/

      # Node dependency check
      - name: NPM Audit - Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --audit-level=high

      - name: Snyk Security Scan - Frontend
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          working-directory: ./frontend

  # SAST - Static Application Security Testing
  sast-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=payment-platform
            -Dsonar.organization=your-org
            -Dsonar.sources=backend/src/main,frontend/src
            -Dsonar.tests=backend/src/test,frontend/src/**/*.test.ts
            -Dsonar.java.binaries=backend/build/classes
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/java

      - name: SpotBugs Analysis
        working-directory: ./backend
        run: |
          ./gradlew spotbugsMain spotbugsTest

      - name: Upload SpotBugs Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: spotbugs-report
          path: backend/build/reports/spotbugs/

  # Container Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t payment-platform:${{ github.sha }} -f backend/Dockerfile backend/

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'payment-platform:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Grype Container Scan
        uses: anchore/scan-action@v3
        with:
          image: 'payment-platform:${{ github.sha }}'
          severity-cutoff: high
          fail-build: true

  # Security Policy Compliance
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Security Headers Configuration
        run: |
          # Check for security headers in code
          grep -r "Content-Security-Policy\|Strict-Transport-Security\|X-Frame-Options" backend/src || exit 1

      - name: Check Authentication Configuration
        run: |
          # Verify no localStorage usage for auth tokens
          ! grep -r "localStorage.*auth\|localStorage.*token" frontend/src || exit 1

      - name: Check for Hardcoded Secrets
        run: |
          # Basic check for common secret patterns
          ! grep -r "api[_-]key.*=.*['\"].*['\"]" --include="*.java" --include="*.ts" --include="*.tsx" || exit 1
          ! grep -r "password.*=.*['\"].*['\"]" --include="*.java" --include="*.ts" --include="*.tsx" || exit 1

      - name: Validate CORS Configuration
        run: |
          # Check that localhost is not allowed in production configs
          ! grep -r "localhost\|127.0.0.1" backend/src/main/resources/application-production.yml || exit 1

  # Infrastructure as Code Scanning
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Checkov IaC Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: false
          framework: all
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3

      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        if: hashFiles('**/*.tf') != ''
        with:
          soft_fail: false

  # License Compliance
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: License Finder - Backend
        working-directory: ./backend
        run: |
          ./gradlew checkLicense || true

      - name: License Checker - Frontend
        working-directory: ./frontend
        run: |
          npx license-checker --production --summary

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-check, sast-scan, container-scan, compliance-check]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Create Security Report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results Summary" >> security-report.md
          echo "" >> security-report.md

          # Add job status
          echo "- Secret Scanning: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-report
          path: security-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Alert on Critical Findings
  security-alert:
    name: Security Alert
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-check, sast-scan, container-scan]
    if: failure()
    steps:
      - name: Send Slack Alert
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'ðŸš¨ Security scan failed! Critical vulnerabilities detected in ${{ github.repository }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: '#security-alerts'

      - name: Create GitHub Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security Scan Failed - Critical Vulnerabilities Detected',
              body: `A security scan has failed on commit ${context.sha}.

              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              **Run:** ${context.runId}

              Please review the security scan results and address the vulnerabilities immediately.

              [View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['security', 'critical', 'automated'],
              assignees: ['security-team']
            });