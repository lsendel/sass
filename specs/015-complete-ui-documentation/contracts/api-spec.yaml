openapi: 3.0.3
info:
  title: Project Management & Collaboration Platform API
  description: REST API for comprehensive project management and team collaboration
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@example.com
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.projectmanager.example.com/v1
    description: Production server

security:
  - bearerAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                rememberMe:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  expiresIn:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/register:
    post:
      tags: [Authentication]
      summary: User registration
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, firstName, lastName]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                  maxLength: 100
                lastName:
                  type: string
                  maxLength: 100
                timezone:
                  type: string
                  default: "UTC"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  expiresIn:
                    type: integer

  # User Management
  /users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      operationId: getCurrentUser
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Users]
      summary: Update current user profile
      operationId: updateCurrentUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  maxLength: 100
                lastName:
                  type: string
                  maxLength: 100
                timezone:
                  type: string
                language:
                  type: string
                avatar:
                  type: string
                  format: uri
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Workspace Management
  /workspaces:
    get:
      tags: [Workspaces]
      summary: List user workspaces
      operationId: getUserWorkspaces
      responses:
        '200':
          description: List of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workspace'

    post:
      tags: [Workspaces]
      summary: Create new workspace
      operationId: createWorkspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, slug]
              properties:
                name:
                  type: string
                  maxLength: 200
                slug:
                  type: string
                  maxLength: 50
                  pattern: '^[a-z0-9-]+$'
                description:
                  type: string
                logoUrl:
                  type: string
                  format: uri
      responses:
        '201':
          description: Workspace created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'

  /workspaces/{workspaceId}:
    get:
      tags: [Workspaces]
      summary: Get workspace details
      operationId: getWorkspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
      responses:
        '200':
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Workspaces]
      summary: Update workspace
      operationId: updateWorkspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 200
                description:
                  type: string
                logoUrl:
                  type: string
                  format: uri
                settings:
                  type: object
      responses:
        '200':
          description: Workspace updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'

  # Project Management
  /workspaces/{workspaceId}/projects:
    get:
      tags: [Projects]
      summary: List workspace projects
      operationId: getWorkspaceProjects
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, ARCHIVED, COMPLETED, ON_HOLD]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Projects]
      summary: Create new project
      operationId: createProject
      parameters:
        - $ref: '#/components/parameters/workspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  maxLength: 200
                description:
                  type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                privacy:
                  type: string
                  enum: [PRIVATE, WORKSPACE, PUBLIC]
                  default: WORKSPACE
                color:
                  type: string
                  pattern: '^#[0-9A-Fa-f]{6}$'
                template:
                  type: string
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: Get project details
      operationId: getProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

    put:
      tags: [Projects]
      summary: Update project
      operationId: updateProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 200
                description:
                  type: string
                status:
                  type: string
                  enum: [ACTIVE, ARCHIVED, COMPLETED, ON_HOLD]
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                privacy:
                  type: string
                  enum: [PRIVATE, WORKSPACE, PUBLIC]
                color:
                  type: string
                  pattern: '^#[0-9A-Fa-f]{6}$'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  # Task Management
  /projects/{projectId}/tasks:
    get:
      tags: [Tasks]
      summary: List project tasks
      operationId: getProjectTasks
      parameters:
        - $ref: '#/components/parameters/projectId'
        - name: status
          in: query
          schema:
            type: string
            enum: [TODO, IN_PROGRESS, REVIEW, DONE, ARCHIVED]
        - name: assigneeId
          in: query
          schema:
            type: string
            format: uuid
        - name: boardId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags: [Tasks]
      summary: Create new task
      operationId: createTask
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title:
                  type: string
                  maxLength: 500
                description:
                  type: string
                assigneeId:
                  type: string
                  format: uuid
                priority:
                  type: string
                  enum: [LOW, MEDIUM, HIGH, URGENT]
                  default: MEDIUM
                dueDate:
                  type: string
                  format: date-time
                estimatedHours:
                  type: integer
                  minimum: 0
                tags:
                  type: array
                  items:
                    type: string
                boardId:
                  type: string
                  format: uuid
                position:
                  type: integer
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{taskId}:
    get:
      tags: [Tasks]
      summary: Get task details
      operationId: getTask
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    put:
      tags: [Tasks]
      summary: Update task
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/taskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 500
                description:
                  type: string
                status:
                  type: string
                  enum: [TODO, IN_PROGRESS, REVIEW, DONE, ARCHIVED]
                assigneeId:
                  type: string
                  format: uuid
                priority:
                  type: string
                  enum: [LOW, MEDIUM, HIGH, URGENT]
                dueDate:
                  type: string
                  format: date-time
                estimatedHours:
                  type: integer
                  minimum: 0
                actualHours:
                  type: integer
                  minimum: 0
                tags:
                  type: array
                  items:
                    type: string
                position:
                  type: integer
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  # Search
  /search:
    get:
      tags: [Search]
      summary: Global search across workspaces
      operationId: globalSearch
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
        - name: type
          in: query
          schema:
            type: string
            enum: [projects, tasks, files, users]
        - name: workspaceId
          in: query
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/SearchResult'
                  total:
                    type: integer

  # Dashboard
  /dashboard:
    get:
      tags: [Dashboard]
      summary: Get user dashboard data
      operationId: getDashboard
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  todayTasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  activeProjects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  recentActivity:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    workspaceId:
      name: workspaceId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    projectId:
      name: projectId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    taskId:
      name: taskId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
          format: uri
        timezone:
          type: string
        language:
          type: string
        isActive:
          type: boolean
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time

    Workspace:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        logoUrl:
          type: string
          format: uri
        storageUsed:
          type: integer
          format: int64
        storageLimit:
          type: integer
          format: int64
        memberCount:
          type: integer
        projectCount:
          type: integer
        userRole:
          type: string
          enum: [OWNER, ADMIN, MEMBER, VIEWER]
        createdAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [ACTIVE, ARCHIVED, COMPLETED, ON_HOLD]
        privacy:
          type: string
          enum: [PRIVATE, WORKSPACE, PUBLIC]
        color:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        memberCount:
          type: integer
        taskCount:
          type: integer
        completedTaskCount:
          type: integer
        progress:
          type: number
          format: float
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, REVIEW, DONE, ARCHIVED]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
        assignee:
          $ref: '#/components/schemas/User'
        reporter:
          $ref: '#/components/schemas/User'
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: integer
        actualHours:
          type: integer
        tags:
          type: array
          items:
            type: string
        position:
          type: integer
        subtaskCount:
          type: integer
        completedSubtaskCount:
          type: integer
        commentCount:
          type: integer
        attachmentCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Activity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        action:
          type: string
        description:
          type: string
        entityType:
          type: string
        entityId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        title:
          type: string
        message:
          type: string
        actionUrl:
          type: string
          format: uri
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time

    SearchResult:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        url:
          type: string
        breadcrumb:
          type: string
        relevance:
          type: number
          format: float

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time