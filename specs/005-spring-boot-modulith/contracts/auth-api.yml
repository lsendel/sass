openapi: 3.0.3
info:
  title: Authentication API
  description: OAuth2/PKCE authentication and session management
  version: 1.0.0
  contact:
    name: Payment Platform API Team

servers:
  - url: https://api.payment-platform.com/v1
    description: Production server
  - url: https://staging-api.payment-platform.com/v1
    description: Staging server

paths:
  /auth/providers:
    get:
      summary: List available OAuth2 providers
      operationId: listOAuthProviders
      tags: [Authentication]
      responses:
        '200':
          description: List of configured OAuth2 providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/OAuth2Provider'

  /auth/authorize:
    get:
      summary: Initiate OAuth2 authorization
      operationId: initiateAuthorization
      tags: [Authentication]
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
            enum: [google, github, microsoft]
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
        - name: code_challenge
          in: query
          required: true
          schema:
            type: string
        - name: code_challenge_method
          in: query
          required: true
          schema:
            type: string
            enum: [S256]
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to OAuth2 provider
          headers:
            Location:
              schema:
                type: string
                format: uri

  /auth/callback:
    get:
      summary: OAuth2 callback endpoint
      operationId: handleOAuthCallback
      tags: [Authentication]
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to application with session
          headers:
            Location:
              schema:
                type: string
                format: uri
            Set-Cookie:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/exchange:
    post:
      summary: Exchange authorization code for tokens
      operationId: exchangeCode
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/session:
    get:
      summary: Get current session info
      operationId: getSession
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current session information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Logout and invalidate session
      operationId: logout
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/sessions:
    get:
      summary: List all user sessions
      operationId: listSessions
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of active sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionSummary'

    delete:
      summary: Revoke all sessions except current
      operationId: revokeAllSessions
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '204':
          description: All other sessions revoked
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/sessions/{sessionId}:
    delete:
      summary: Revoke specific session
      operationId: revokeSession
      tags: [Authentication]
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session revoked
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    OAuth2Provider:
      type: object
      required: [name, display_name, authorization_url]
      properties:
        name:
          type: string
          enum: [google, github, microsoft]
        display_name:
          type: string
          example: "Google"
        authorization_url:
          type: string
          format: uri
        icon_url:
          type: string
          format: uri

    TokenExchangeRequest:
      type: object
      required: [code, code_verifier, redirect_uri, provider]
      properties:
        code:
          type: string
          description: Authorization code from OAuth2 provider
        code_verifier:
          type: string
          description: PKCE code verifier
        redirect_uri:
          type: string
          format: uri
          description: Must match authorization request
        provider:
          type: string
          enum: [google, github, microsoft]

    TokenResponse:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token:
          type: string
          description: Opaque access token
        token_type:
          type: string
          enum: [Bearer]
        expires_in:
          type: integer
          description: Token lifetime in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/UserSummary'

    SessionInfo:
      type: object
      required: [session_id, user, created_at, last_used, expires_at]
      properties:
        session_id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/UserSummary'
        created_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        ip_address:
          type: string
          format: ipv4
        user_agent:
          type: string

    SessionSummary:
      type: object
      required: [session_id, created_at, last_used, current]
      properties:
        session_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
        ip_address:
          type: string
          format: ipv4
        user_agent:
          type: string
        current:
          type: boolean
          description: True if this is the current session

    UserSummary:
      type: object
      required: [id, email, name]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        avatar_url:
          type: string
          format: uri
        email_verified:
          type: boolean

    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        correlation_id:
          type: string
          description: Request correlation ID for debugging

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "invalid_request"
            message: "Missing required parameter: code_verifier"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Valid authentication required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "Session not found"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Opaque bearer token

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: OAuth2 authentication and session management