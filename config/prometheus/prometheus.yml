# Prometheus Configuration for Payment Platform
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'payment-platform'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "rules/*.yml"

# Scrape configuration
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 5s
    metrics_path: /metrics

  # Payment Platform Backend (Spring Boot)
  - job_name: 'payment-platform-backend'
    static_configs:
      - targets: ['payment-platform-backend:8080']
    scrape_interval: 30s
    scrape_timeout: 10s
    metrics_path: /actuator/prometheus
    honor_labels: true
    params:
      format: [prometheus]
    relabel_configs:
      # Add instance labels
      - source_labels: [__address__]
        target_label: instance
      - source_labels: [__address__]
        target_label: service
        replacement: 'payment-platform-backend'

  # Database metrics (if postgres_exporter is deployed)
  - job_name: 'postgresql'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'postgresql'

  # Redis metrics (if redis_exporter is deployed)
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'redis'

  # Node Exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'node-exporter'

  # Nginx metrics (if nginx-prometheus-exporter is deployed)
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx-exporter:9113']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'nginx'

  # Docker metrics (if running on Docker)
  - job_name: 'docker'
    static_configs:
      - targets: ['docker-exporter:9323']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'docker'

  # Kubernetes API Server (if running on Kubernetes)
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - default
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # Kubernetes Nodes
  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

  # Kubernetes Pod discovery for annotated pods
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      # Only scrape pods with prometheus.io/scrape annotation
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      # Set scrape path from annotation
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      # Set port from annotation
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # Add pod metadata as labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # Kubernetes Services discovery
  - job_name: 'kubernetes-services'
    kubernetes_sd_configs:
      - role: service
    metrics_path: /probe
    params:
      module: [http_2xx]
    relabel_configs:
      # Only probe services with prometheus.io/probe annotation
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: true
      # Set target from service
      - source_labels: [__address__]
        target_label: __param_target
      # Set actual target to blackbox exporter
      - target_label: __address__
        replacement: blackbox-exporter:9115
      # Add service metadata
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_service_name

  # Custom business metrics scraping
  - job_name: 'payment-platform-business'
    static_configs:
      - targets: ['payment-platform-backend:8080']
    scrape_interval: 60s  # Less frequent for business metrics
    metrics_path: /actuator/prometheus
    params:
      format: [prometheus]
    metric_relabel_configs:
      # Keep only business-related metrics
      - source_labels: [__name__]
        regex: '(payment_.*|subscription_.*|revenue_.*|user_.*)'
        action: keep

# Remote write configuration (for long-term storage)
remote_write:
  - url: "https://prometheus-remote-write.example.com/api/v1/write"
    basic_auth:
      username: "${REMOTE_WRITE_USERNAME}"
      password: "${REMOTE_WRITE_PASSWORD}"
    write_relabel_configs:
      # Add environment label to all metrics
      - target_label: environment
        replacement: 'production'
    queue_config:
      capacity: 10000
      max_samples_per_send: 1000
      batch_send_deadline: 5s
      min_shards: 1
      max_shards: 10

# Storage configuration
storage:
  tsdb:
    retention.time: 30d
    retention.size: 50GB